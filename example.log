12/07/2023 06:27:47 PM Lanuching Main.py
12/07/2023 06:28:34 PM Lanuching Main.py
12/07/2023 06:29:44 PM Lanuching Main.py
12/07/2023 06:35:10 PM Lanuching Main.py
12/07/2023 06:55:18 PM Launching Main.py
12/07/2023 06:55:38 PM Launching Main.py
12/07/2023 06:56:21 PM Launching Main.py
12/07/2023 06:56:29 PM Launching Main.py
12/07/2023 08:17:31 PM Launching Main.py
12/07/2023 08:20:02 PM Launching Main.py
12/07/2023 09:40:38 PM Launching Main.py
12/07/2023 09:41:06 PM Launching Main.py
12/07/2023 09:42:03 PM Launching Main.py
12/07/2023 09:42:07 PM Launching Main.py
12/07/2023 09:43:35 PM Launching Main.py
12/07/2023 09:44:13 PM Launching Main.py
12/07/2023 09:45:05 PM Launching Main.py
12/07/2023 09:45:30 PM Launching Main.py
12/07/2023 11:24:03 PM Launching Main.py
12/07/2023 11:24:54 PM Launching Main.py
12/07/2023 11:25:29 PM Launching Main.py
12/07/2023 11:27:00 PM Launching Main.py
12/07/2023 11:27:38 PM Launching Main.py
12/07/2023 11:28:22 PM Launching Main.py
12/07/2023 11:30:01 PM Launching Main.py
12/07/2023 11:30:25 PM Launching Main.py
12/07/2023 11:36:54 PM Launching Main.py
12/07/2023 11:39:36 PM Launching Main.py
12/07/2023 11:40:54 PM Launching Main.py
12/07/2023 11:41:04 PM Launching Main.py
12/07/2023 11:51:31 PM Launching Main.py
12/07/2023 11:51:57 PM Launching Main.py
12/08/2023 11:00:00 AM Launching Main.py
12/08/2023 11:00:15 AM Launching Main.py
12/08/2023 11:01:57 AM Launching Main.py
12/08/2023 11:03:49 AM Launching Main.py
12/08/2023 11:05:21 AM Launching Main.py
12/08/2023 11:27:13 AM Launching Main.py
12/08/2023 11:27:36 AM Launching Main.py
12/08/2023 11:29:12 AM Launching Main.py
12/08/2023 11:40:55 AM Launching Main.py
12/08/2023 11:41:56 AM Launching Main.py
12/08/2023 11:43:32 AM Launching Main.py
12/08/2023 11:44:03 AM Launching Main.py
12/08/2023 11:44:19 AM Launching Main.py
12/08/2023 11:45:33 AM Launching Main.py
12/08/2023 11:46:32 AM Launching Main.py
12/08/2023 11:50:26 AM Launching Main.py
12/08/2023 11:51:14 AM Launching Main.py
12/08/2023 11:51:27 AM Launching Main.py
12/08/2023 11:52:32 AM Launching Main.py
12/08/2023 12:09:24 PM Launching Main.py
12/08/2023 12:12:05 PM Launching Main.py
12/08/2023 12:18:17 PM Launching Main.py
12/08/2023 12:18:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f0db5dbf3d0> moves and attacks before: ([], [])
12/08/2023 12:18:19 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:18:19 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:18:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:18:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f0db5dbe860> (5, 2)
12/08/2023 12:18:19 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:18:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:18:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f0db5dbf700> (4, 2)
12/08/2023 12:18:19 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:18:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:18:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:21:10 PM Launching Main.py
12/08/2023 12:21:12 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f40b61bb310> moves and attacks before: ([], [])
12/08/2023 12:21:12 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:21:12 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:21:12 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:21:12 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f40b61ba7d0> (5, 3)
12/08/2023 12:21:12 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:21:12 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:21:12 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f40b61bb670> (4, 3)
12/08/2023 12:21:12 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:21:12 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:21:12 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:21:14 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f40b61bb310> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:21:14 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:21:14 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:21:14 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:21:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f40b61ba7d0> (5, 3)
12/08/2023 12:21:14 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:21:14 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:21:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f40b61bb670> (4, 3)
12/08/2023 12:21:14 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:21:14 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:21:14 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:21:15 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f40b61bb310> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:21:15 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:21:15 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:21:15 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:21:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f40b61ba7d0> (5, 3)
12/08/2023 12:21:15 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:21:15 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:21:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f40b61bb670> (4, 3)
12/08/2023 12:21:15 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:21:15 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:21:15 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:29:39 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f40b61bb370> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:29:39 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:29:39 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:29:39 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:29:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f40b61ba800> (5, 4)
12/08/2023 12:29:39 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:29:39 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:29:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f40b61bb6a0> (4, 4)
12/08/2023 12:29:39 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:29:39 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:29:39 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:29:39 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f40b61bb3d0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:29:39 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:29:39 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 12:29:39 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:29:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f40b61ba860> (5, 5)
12/08/2023 12:29:39 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 12:29:39 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:29:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f40b61bb700> (4, 5)
12/08/2023 12:29:39 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 12:29:39 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 12:29:39 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 12:29:40 PM RenderPossibleMoves(): choosen figure: <classes.piece.King object at 0x7f40b61b8cd0> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 12:50:08 PM Launching Main.py
12/08/2023 12:50:10 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7ff084fc0e80> moves and attacks before: ([], [])
12/08/2023 12:50:10 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:10 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:50:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7ff084fc0310> (5, 2)
12/08/2023 12:50:10 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:50:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7ff084fc1d50> (4, 2)
12/08/2023 12:50:10 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:50:10 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:10 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:10 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7ff084fc0eb0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:10 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:10 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:50:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7ff084fc02b0> (5, 3)
12/08/2023 12:50:10 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:50:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7ff084fc1d20> (4, 3)
12/08/2023 12:50:10 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:50:10 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:10 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:11 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7ff084fc0e80> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:11 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:11 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:50:11 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7ff084fc0310> (5, 2)
12/08/2023 12:50:11 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:50:11 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7ff084fc1d50> (4, 2)
12/08/2023 12:50:11 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:50:11 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:11 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:12 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7ff084fc0eb0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:12 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:12 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:50:12 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:12 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7ff084fc02b0> (5, 3)
12/08/2023 12:50:12 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:50:12 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:12 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7ff084fc1d20> (4, 3)
12/08/2023 12:50:12 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:50:12 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:12 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:32 PM Launching Main.py
12/08/2023 12:50:33 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4dc0> moves and attacks before: ([], [])
12/08/2023 12:50:33 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:33 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 12:50:33 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb55a0> (5, 1)
12/08/2023 12:50:33 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 12:50:33 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7700> (4, 1)
12/08/2023 12:50:33 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 12:50:33 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:33 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:33 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4dc0> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:33 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:33 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 12:50:33 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb55a0> (5, 1)
12/08/2023 12:50:33 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 12:50:33 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7700> (4, 1)
12/08/2023 12:50:33 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 12:50:33 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:33 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:34 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4dc0> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:34 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:34 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 12:50:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb55a0> (5, 1)
12/08/2023 12:50:34 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 12:50:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7700> (4, 1)
12/08/2023 12:50:34 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 12:50:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:34 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4dc0> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:34 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:34 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 12:50:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb55a0> (5, 1)
12/08/2023 12:50:34 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 12:50:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7700> (4, 1)
12/08/2023 12:50:34 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 12:50:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:34 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4dc0> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:34 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:34 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 12:50:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb55a0> (5, 1)
12/08/2023 12:50:34 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 12:50:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7700> (4, 1)
12/08/2023 12:50:34 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 12:50:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:35 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4e50> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:35 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:35 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb5660> (5, 2)
12/08/2023 12:50:35 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7760> (4, 2)
12/08/2023 12:50:35 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:50:35 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:35 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:35 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4dc0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:35 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:35 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb55a0> (5, 1)
12/08/2023 12:50:35 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7700> (4, 1)
12/08/2023 12:50:35 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 12:50:35 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:35 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:35 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4e50> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:35 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:35 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb5660> (5, 2)
12/08/2023 12:50:35 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7760> (4, 2)
12/08/2023 12:50:35 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:50:35 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:35 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:35 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4e50> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:35 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:35 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb5660> (5, 2)
12/08/2023 12:50:35 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7760> (4, 2)
12/08/2023 12:50:35 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:50:35 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:35 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:36 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4dc0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:36 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:36 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb55a0> (5, 1)
12/08/2023 12:50:36 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7700> (4, 1)
12/08/2023 12:50:36 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 12:50:36 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:36 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:36 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb6500> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:36 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:36 PM Pawn Figure info: (6, 0, 'w', 'p')
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7520> (5, 0)
12/08/2023 12:50:36 PM Pawn (5, 0) is empty appended moves [(5, 0)]
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb4fa0> (4, 0)
12/08/2023 12:50:36 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
12/08/2023 12:50:36 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
12/08/2023 12:50:36 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
12/08/2023 12:50:36 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4dc0> moves and attacks before: ([(5, 0), (4, 0)], [])
12/08/2023 12:50:36 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:36 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb55a0> (5, 1)
12/08/2023 12:50:36 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7700> (4, 1)
12/08/2023 12:50:36 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 12:50:36 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:36 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:36 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4e50> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:36 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:36 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb5660> (5, 2)
12/08/2023 12:50:36 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7760> (4, 2)
12/08/2023 12:50:36 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:50:36 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:36 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:37 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4eb0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:37 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:37 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb5ab0> (5, 3)
12/08/2023 12:50:37 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb77c0> (4, 3)
12/08/2023 12:50:37 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:50:37 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:37 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:37 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4eb0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:37 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:37 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb5ab0> (5, 3)
12/08/2023 12:50:37 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb77c0> (4, 3)
12/08/2023 12:50:37 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:50:37 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:37 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:37 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4eb0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:37 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:37 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb5ab0> (5, 3)
12/08/2023 12:50:37 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb77c0> (4, 3)
12/08/2023 12:50:37 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:50:37 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:37 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:37 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4eb0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:37 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:37 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb5ab0> (5, 3)
12/08/2023 12:50:37 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb77c0> (4, 3)
12/08/2023 12:50:37 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:50:37 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:37 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:37 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4ee0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:37 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:37 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb6980> (5, 4)
12/08/2023 12:50:37 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb46d0> (4, 4)
12/08/2023 12:50:37 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:50:37 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:50:37 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:50:38 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4460> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:50:38 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:38 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb69e0> (5, 5)
12/08/2023 12:50:38 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb54e0> (4, 5)
12/08/2023 12:50:38 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 12:50:38 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 12:50:38 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 12:50:38 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4f40> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 12:50:38 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:38 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb6a10> (5, 6)
12/08/2023 12:50:38 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb5510> (4, 6)
12/08/2023 12:50:38 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 12:50:38 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 12:50:38 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 12:50:38 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4f40> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 12:50:38 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:38 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb6a10> (5, 6)
12/08/2023 12:50:38 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb5510> (4, 6)
12/08/2023 12:50:38 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 12:50:38 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 12:50:38 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 12:50:38 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb5690> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 12:50:38 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:38 PM Pawn Figure info: (6, 7, 'w', 'p')
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb6a70> (5, 7)
12/08/2023 12:50:38 PM Pawn (5, 7) is empty appended moves [(5, 7)]
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb5330> (4, 7)
12/08/2023 12:50:38 PM Pawn (4, 7) is empty appended moves [(5, 7), (4, 7)]
12/08/2023 12:50:38 PM Pawn ReturnPossibleMove(): returning values: ([(5, 7), (4, 7)], [])
12/08/2023 12:50:38 PM RenderPossibleMoves(): moves and attacks after: ([(5, 7), (4, 7)], [])
12/08/2023 12:50:39 PM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x7f523cfb7a60> moves and attacks before: ([(5, 7), (4, 7)], [])
12/08/2023 12:50:39 PM RenderPossibleMoves(): moves and attacks after: ([(5, 7), (5, 5)], [])
12/08/2023 12:50:39 PM RenderPossibleMoves(): choosen figure: <classes.piece.Bishop object at 0x7f523cfb7190> moves and attacks before: ([(5, 7), (5, 5)], [])
12/08/2023 12:50:39 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/08/2023 12:50:39 PM RenderPossibleMoves(): choosen figure: <classes.piece.King object at 0x7f523cfb7130> moves and attacks before: ([], [])
12/08/2023 12:51:17 PM Launching Main.py
12/08/2023 12:51:18 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f271d3acdc0> moves and attacks before: ([], [])
12/08/2023 12:51:18 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:18 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 12:51:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3ad5a0> (5, 1)
12/08/2023 12:51:18 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 12:51:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3af700> (4, 1)
12/08/2023 12:51:18 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 12:51:18 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 12:51:18 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 12:51:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f271d3ace50> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 12:51:19 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:19 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:51:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3ad660> (5, 2)
12/08/2023 12:51:19 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:51:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3af760> (4, 2)
12/08/2023 12:51:19 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:51:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f271d3acdc0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:19 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:19 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 12:51:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3ad5a0> (5, 1)
12/08/2023 12:51:19 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 12:51:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3af700> (4, 1)
12/08/2023 12:51:19 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 12:51:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 12:51:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 12:51:21 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f271d3ace50> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 12:51:21 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:21 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:51:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3ad660> (5, 2)
12/08/2023 12:51:21 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:51:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3af760> (4, 2)
12/08/2023 12:51:21 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:51:21 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:21 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f271d3aceb0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:22 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:22 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:51:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3adab0> (5, 3)
12/08/2023 12:51:22 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:51:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3af7c0> (4, 3)
12/08/2023 12:51:22 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:51:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f271d3ace50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:23 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:51:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3ad660> (5, 2)
12/08/2023 12:51:23 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:51:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3af760> (4, 2)
12/08/2023 12:51:23 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:51:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f271d3aceb0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:24 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:51:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3adab0> (5, 3)
12/08/2023 12:51:24 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:51:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3af7c0> (4, 3)
12/08/2023 12:51:24 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:51:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f271d3ace50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:24 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:51:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3ad660> (5, 2)
12/08/2023 12:51:24 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:51:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3af760> (4, 2)
12/08/2023 12:51:24 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:51:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f271d3aceb0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:25 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:25 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:51:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3adab0> (5, 3)
12/08/2023 12:51:25 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:51:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3af7c0> (4, 3)
12/08/2023 12:51:25 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:51:25 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f271d3ace50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:27 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:27 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:51:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3ad660> (5, 2)
12/08/2023 12:51:27 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:51:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3af760> (4, 2)
12/08/2023 12:51:27 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:51:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:41 PM Launching Main.py
12/08/2023 12:51:43 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe2593c0ee0> moves and attacks before: ([], [])
12/08/2023 12:51:43 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:43 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:51:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe2593c1690> (5, 2)
12/08/2023 12:51:43 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:51:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe2593c3790> (4, 2)
12/08/2023 12:51:43 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:51:43 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:43 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:43 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe2593c0d30> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:43 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:43 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:51:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe2593c1ae0> (5, 3)
12/08/2023 12:51:43 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:51:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe2593c37f0> (4, 3)
12/08/2023 12:51:43 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:51:43 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:43 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:44 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe2593c0ee0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:44 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:44 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:51:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe2593c1690> (5, 2)
12/08/2023 12:51:44 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:51:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe2593c3790> (4, 2)
12/08/2023 12:51:44 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:51:44 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:44 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:45 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe2593c0d30> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:45 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:45 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:51:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe2593c1ae0> (5, 3)
12/08/2023 12:51:45 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:51:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe2593c37f0> (4, 3)
12/08/2023 12:51:45 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:51:45 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:45 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:52:36 PM Launching Main.py
12/08/2023 12:54:16 PM Launching Main.py
12/08/2023 12:54:18 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8d90> moves and attacks before: ([], [])
12/08/2023 12:54:18 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:18 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:54:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b96f0> (5, 2)
12/08/2023 12:54:18 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:54:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb7f0> (4, 2)
12/08/2023 12:54:18 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:54:18 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:54:18 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:54:18 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8fd0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:54:18 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:18 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:54:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b9b40> (5, 3)
12/08/2023 12:54:18 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:54:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb850> (4, 3)
12/08/2023 12:54:18 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:54:18 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:18 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8d90> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:19 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:19 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:54:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b96f0> (5, 2)
12/08/2023 12:54:19 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:54:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb7f0> (4, 2)
12/08/2023 12:54:19 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:54:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:54:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:54:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8fd0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:54:22 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:22 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:54:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b9b40> (5, 3)
12/08/2023 12:54:22 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:54:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb850> (4, 3)
12/08/2023 12:54:22 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:54:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8fd0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:23 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:54:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b9b40> (5, 3)
12/08/2023 12:54:23 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:54:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb850> (4, 3)
12/08/2023 12:54:23 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:54:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:38 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:38 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:38 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:54:38 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:54:38 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:54:38 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:54:38 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:54:38 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:38 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:39 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:39 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:39 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:54:39 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:54:39 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:54:39 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:54:39 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:54:39 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:39 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:40 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:40 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:40 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:54:40 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:54:40 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:54:40 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:54:40 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:54:40 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:40 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:41 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:41 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:41 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:54:41 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:54:41 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:54:41 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:54:41 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:54:41 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:41 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:41 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:41 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:41 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:54:41 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:54:41 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:54:41 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:54:41 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:54:41 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:41 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:43 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8fd0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:43 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:43 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:54:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b9b40> (5, 3)
12/08/2023 12:54:43 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:54:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb850> (4, 3)
12/08/2023 12:54:43 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:54:43 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:43 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:44 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:44 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:44 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:54:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:54:44 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:54:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:54:44 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:54:44 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:44 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:44 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8fd0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:44 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:44 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:54:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b9b40> (5, 3)
12/08/2023 12:54:44 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:54:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb850> (4, 3)
12/08/2023 12:54:44 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:54:44 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:44 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:47 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:47 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:47 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:54:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:54:47 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:54:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:54:47 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:54:47 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:47 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:26 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8fd0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:26 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:55:26 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:55:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b9b40> (5, 3)
12/08/2023 12:55:26 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:55:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb850> (4, 3)
12/08/2023 12:55:26 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:55:26 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:55:26 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:55:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:55:27 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:55:27 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:55:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:55:27 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:55:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:55:27 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:55:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:28 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:55:28 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:55:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:55:28 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:55:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:55:28 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:55:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:29 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:29 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:55:29 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:55:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:55:29 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:55:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:55:29 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:55:29 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:29 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:30 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8fd0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:30 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:55:30 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:55:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b9b40> (5, 3)
12/08/2023 12:55:30 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:55:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb850> (4, 3)
12/08/2023 12:55:30 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:55:30 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:55:30 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:55:31 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:55:31 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:55:31 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:55:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:55:31 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:55:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:55:31 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:55:31 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:31 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:37 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:37 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:55:37 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:55:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:55:37 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:55:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:55:37 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:55:37 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:37 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:56:52 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b9030> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:56:52 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:56:52 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 12:56:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:56:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa70> (5, 5)
12/08/2023 12:56:52 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 12:56:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:56:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b9570> (4, 5)
12/08/2023 12:56:52 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 12:56:52 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 12:56:52 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 12:56:52 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8fd0> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 12:56:52 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:56:52 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:56:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:56:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b9b40> (5, 3)
12/08/2023 12:56:52 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:56:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:56:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb850> (4, 3)
12/08/2023 12:56:52 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:56:52 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:56:52 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:56:53 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:56:53 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:56:53 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:56:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:56:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:56:53 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:56:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:56:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:56:53 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:56:53 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:56:53 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:56:53 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8fd0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:56:53 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:56:53 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:56:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:56:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b9b40> (5, 3)
12/08/2023 12:56:53 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:56:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:56:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb850> (4, 3)
12/08/2023 12:56:53 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:56:53 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:56:53 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:58:20 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8f40> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:58:20 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:58:20 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 12:58:20 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:58:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b9630> (5, 1)
12/08/2023 12:58:20 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 12:58:20 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:58:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb790> (4, 1)
12/08/2023 12:58:20 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 12:58:20 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 12:58:20 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 12:58:21 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8d90> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 12:58:21 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:58:21 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:58:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:58:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b96f0> (5, 2)
12/08/2023 12:58:21 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:58:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:58:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb7f0> (4, 2)
12/08/2023 12:58:21 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:58:21 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:58:21 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:59:02 PM Launching Main.py
12/08/2023 01:00:33 PM Launching Main.py
12/08/2023 01:00:34 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc8df0> moves and attacks before: ([], [])
12/08/2023 01:00:34 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:34 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:00:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc9750> (5, 2)
12/08/2023 01:00:34 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:00:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcb850> (4, 2)
12/08/2023 01:00:34 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:00:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:00:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:00:36 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9030> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:00:36 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:36 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 01:00:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc9ba0> (5, 3)
12/08/2023 01:00:36 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 01:00:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcb8b0> (4, 3)
12/08/2023 01:00:36 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 01:00:36 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 01:00:36 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 01:00:40 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc80d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 01:00:40 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:40 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 01:00:40 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaa70> (5, 4)
12/08/2023 01:00:40 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 01:00:40 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc87c0> (4, 4)
12/08/2023 01:00:40 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 01:00:40 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 01:00:40 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 01:00:42 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc80d0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 01:00:42 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:42 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 01:00:42 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaa70> (5, 4)
12/08/2023 01:00:42 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 01:00:42 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc87c0> (4, 4)
12/08/2023 01:00:42 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 01:00:42 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 01:00:42 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 01:00:44 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9090> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 01:00:44 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:44 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:00:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaad0> (5, 5)
12/08/2023 01:00:44 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:00:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc95d0> (4, 5)
12/08/2023 01:00:44 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:00:44 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:44 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:46 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9090> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:46 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:46 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:00:46 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:46 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaad0> (5, 5)
12/08/2023 01:00:46 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:00:46 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:46 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc95d0> (4, 5)
12/08/2023 01:00:46 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:00:46 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:46 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:47 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9090> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:47 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:47 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:00:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaad0> (5, 5)
12/08/2023 01:00:47 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:00:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc95d0> (4, 5)
12/08/2023 01:00:47 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:00:47 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:47 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:47 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9090> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:47 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:47 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:00:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaad0> (5, 5)
12/08/2023 01:00:47 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:00:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc95d0> (4, 5)
12/08/2023 01:00:47 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:00:47 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:47 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:47 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9090> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:47 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:47 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:00:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaad0> (5, 5)
12/08/2023 01:00:47 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:00:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc95d0> (4, 5)
12/08/2023 01:00:47 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:00:47 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:47 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9090> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:48 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaad0> (5, 5)
12/08/2023 01:00:48 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc95d0> (4, 5)
12/08/2023 01:00:48 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:00:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9090> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:48 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaad0> (5, 5)
12/08/2023 01:00:48 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc95d0> (4, 5)
12/08/2023 01:00:48 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:00:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9090> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:48 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaad0> (5, 5)
12/08/2023 01:00:48 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc95d0> (4, 5)
12/08/2023 01:00:48 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:00:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9090> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:48 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaad0> (5, 5)
12/08/2023 01:00:48 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc95d0> (4, 5)
12/08/2023 01:00:48 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:00:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9090> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:48 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaad0> (5, 5)
12/08/2023 01:00:48 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc95d0> (4, 5)
12/08/2023 01:00:48 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:00:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9090> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:48 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaad0> (5, 5)
12/08/2023 01:00:48 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc95d0> (4, 5)
12/08/2023 01:00:48 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:00:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9090> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:48 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaad0> (5, 5)
12/08/2023 01:00:48 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc95d0> (4, 5)
12/08/2023 01:00:48 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:00:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:05:56 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc80d0> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:05:56 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:05:56 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 01:05:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:05:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaa70> (5, 4)
12/08/2023 01:05:56 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 01:05:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:05:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc87c0> (4, 4)
12/08/2023 01:05:56 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 01:05:56 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 01:05:56 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:03 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc80d0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:03 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:03 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 01:06:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaa70> (5, 4)
12/08/2023 01:06:03 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 01:06:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc87c0> (4, 4)
12/08/2023 01:06:03 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 01:06:03 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:03 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:27 PM Launching Main.py
12/08/2023 01:06:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fea2ebc4dc0> moves and attacks before: ([], [])
12/08/2023 01:06:28 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:28 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 01:06:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fea2ebc55a0> (5, 1)
12/08/2023 01:06:28 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 01:06:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fea2ebc7700> (4, 1)
12/08/2023 01:06:28 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 01:06:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 01:06:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 01:06:29 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fea2ebc4e50> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 01:06:29 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:29 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:06:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fea2ebc5660> (5, 2)
12/08/2023 01:06:29 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:06:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fea2ebc7760> (4, 2)
12/08/2023 01:06:29 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:06:29 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:06:29 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:06:31 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fea2ebc4eb0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:06:31 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:31 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 01:06:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fea2ebc5ab0> (5, 3)
12/08/2023 01:06:31 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 01:06:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fea2ebc77c0> (4, 3)
12/08/2023 01:06:31 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 01:06:31 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 01:06:31 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 01:06:44 PM Launching Main.py
12/08/2023 01:06:45 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0dc0> moves and attacks before: ([], [])
12/08/2023 01:06:45 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:45 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 01:06:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc15a0> (5, 1)
12/08/2023 01:06:45 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 01:06:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc3700> (4, 1)
12/08/2023 01:06:45 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 01:06:45 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 01:06:45 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 01:06:45 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0e50> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 01:06:45 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:45 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:06:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc1660> (5, 2)
12/08/2023 01:06:45 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:06:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc3760> (4, 2)
12/08/2023 01:06:45 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:06:45 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:06:45 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:06:46 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0eb0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:06:46 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:46 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 01:06:46 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:46 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc1ab0> (5, 3)
12/08/2023 01:06:46 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 01:06:46 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:46 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc37c0> (4, 3)
12/08/2023 01:06:46 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 01:06:46 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 01:06:46 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 01:06:46 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0ee0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 01:06:46 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:46 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 01:06:46 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:46 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc2980> (5, 4)
12/08/2023 01:06:46 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 01:06:46 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:46 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc06d0> (4, 4)
12/08/2023 01:06:46 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 01:06:46 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:46 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:47 PM RenderPossibleMoves(): choosen figure: <classes.piece.Queen object at 0x7faa60fc2ef0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:47 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/08/2023 01:06:47 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0ee0> moves and attacks before: ([], [])
12/08/2023 01:06:47 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:47 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 01:06:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc2980> (5, 4)
12/08/2023 01:06:47 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 01:06:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc06d0> (4, 4)
12/08/2023 01:06:47 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 01:06:47 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:47 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:48 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0eb0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:48 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:48 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 01:06:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc1ab0> (5, 3)
12/08/2023 01:06:48 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 01:06:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc37c0> (4, 3)
12/08/2023 01:06:48 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 01:06:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 01:06:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 01:06:48 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0e50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 01:06:48 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:48 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:06:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc1660> (5, 2)
12/08/2023 01:06:48 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:06:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc3760> (4, 2)
12/08/2023 01:06:48 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:06:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:06:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:06:49 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0dc0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:06:49 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:49 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 01:06:49 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc15a0> (5, 1)
12/08/2023 01:06:49 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 01:06:49 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc3700> (4, 1)
12/08/2023 01:06:49 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 01:06:49 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 01:06:49 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 01:06:49 PM RenderPossibleMoves(): choosen figure: <classes.piece.Rock object at 0x7faa60fc1cc0> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 01:06:49 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/08/2023 01:06:50 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc2500> moves and attacks before: ([], [])
12/08/2023 01:06:50 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:50 PM Pawn Figure info: (6, 0, 'w', 'p')
12/08/2023 01:06:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc3520> (5, 0)
12/08/2023 01:06:50 PM Pawn (5, 0) is empty appended moves [(5, 0)]
12/08/2023 01:06:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc0fa0> (4, 0)
12/08/2023 01:06:50 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
12/08/2023 01:06:50 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
12/08/2023 01:06:50 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
12/08/2023 01:06:50 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0dc0> moves and attacks before: ([(5, 0), (4, 0)], [])
12/08/2023 01:06:50 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:50 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 01:06:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc15a0> (5, 1)
12/08/2023 01:06:50 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 01:06:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc3700> (4, 1)
12/08/2023 01:06:50 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 01:06:50 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 01:06:50 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 01:06:51 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0e50> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 01:06:51 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:51 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc1660> (5, 2)
12/08/2023 01:06:51 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc3760> (4, 2)
12/08/2023 01:06:51 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:06:51 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:06:51 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:06:51 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0eb0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:06:51 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:51 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc1ab0> (5, 3)
12/08/2023 01:06:51 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc37c0> (4, 3)
12/08/2023 01:06:51 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 01:06:51 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 01:06:51 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 01:06:51 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0ee0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 01:06:51 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:51 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc2980> (5, 4)
12/08/2023 01:06:51 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc06d0> (4, 4)
12/08/2023 01:06:51 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 01:06:51 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:51 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:51 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0460> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:51 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:51 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc29e0> (5, 5)
12/08/2023 01:06:51 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc14e0> (4, 5)
12/08/2023 01:06:51 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:06:51 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:06:51 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:06:52 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0f40> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:06:52 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:52 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 01:06:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc2a10> (5, 6)
12/08/2023 01:06:52 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 01:06:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc1510> (4, 6)
12/08/2023 01:06:52 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 01:06:52 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 01:06:52 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 01:06:52 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc1690> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 01:06:52 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:52 PM Pawn Figure info: (6, 7, 'w', 'p')
12/08/2023 01:06:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc2a70> (5, 7)
12/08/2023 01:06:52 PM Pawn (5, 7) is empty appended moves [(5, 7)]
12/08/2023 01:06:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc1330> (4, 7)
12/08/2023 01:06:52 PM Pawn (4, 7) is empty appended moves [(5, 7), (4, 7)]
12/08/2023 01:06:52 PM Pawn ReturnPossibleMove(): returning values: ([(5, 7), (4, 7)], [])
12/08/2023 01:06:52 PM RenderPossibleMoves(): moves and attacks after: ([(5, 7), (4, 7)], [])
12/08/2023 01:07:59 PM Launching Main.py
12/08/2023 01:08:01 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f29785c1960> moves and attacks before: ([], [])
12/08/2023 01:08:01 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:08:01 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:08:01 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:08:01 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f29785c2740> (5, 2)
12/08/2023 01:08:01 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:08:01 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:08:01 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f29785c1240> (4, 2)
12/08/2023 01:08:01 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:08:01 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:08:01 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:17 PM Launching Main.py
12/08/2023 01:21:18 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([], [])
12/08/2023 01:21:18 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:21:18 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:21:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:21:18 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:21:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:21:18 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:21:18 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:18 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:21 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:21 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:21:21 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:21:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:21:21 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:21:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:21:21 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:21:21 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:21 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:21:23 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:21:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:21:23 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:21:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:21:23 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:21:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:25 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:21:25 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:21:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:21:25 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:21:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:21:25 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:21:25 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:28 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:21:28 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:21:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:21:28 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:21:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:21:28 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:21:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:30 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:30 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:21:30 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:21:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:21:30 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:21:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:21:30 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:21:30 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:30 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:34 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:34 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:21:34 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:21:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:21:34 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:21:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:21:34 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:21:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:41 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb9bd0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:41 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:26:41 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 01:26:41 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb9570> (5, 1)
12/08/2023 01:26:41 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 01:26:41 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb670> (4, 1)
12/08/2023 01:26:41 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 01:26:41 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 01:26:41 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 01:26:42 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb9bd0> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 01:26:42 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:26:42 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 01:26:42 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb9570> (5, 1)
12/08/2023 01:26:42 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 01:26:42 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb670> (4, 1)
12/08/2023 01:26:42 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 01:26:42 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 01:26:42 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 01:26:42 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb9bd0> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 01:26:42 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:26:42 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 01:26:42 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb9570> (5, 1)
12/08/2023 01:26:42 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 01:26:42 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb670> (4, 1)
12/08/2023 01:26:42 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 01:26:42 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 01:26:42 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 01:26:43 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 01:26:43 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:26:43 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:26:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:26:43 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:26:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:26:43 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:26:43 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:43 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:44 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:44 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:26:44 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:26:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:26:44 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:26:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:26:44 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:26:44 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:44 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:44 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:44 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:26:44 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:26:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:26:44 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:26:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:26:44 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:26:44 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:44 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:45 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:45 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:26:45 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:26:45 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:26:45 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:26:45 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:45 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:45 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:45 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:26:45 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:26:45 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:26:45 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:26:45 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:45 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:45 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:45 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:26:45 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:26:45 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:26:45 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:26:45 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:45 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:45 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:45 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:26:45 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:26:45 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:26:45 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:26:45 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:45 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:46 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:46 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:26:46 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:26:46 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:46 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:26:46 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:26:46 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:46 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:26:46 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:26:46 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:46 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:28 PM Launching Main.py
12/08/2023 01:28:29 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([], [])
12/08/2023 01:28:29 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:29 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:29 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:29 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:29 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:29 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:30 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:30 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:30 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:30 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:30 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:30 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:30 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:31 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:31 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:31 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:31 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:31 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:31 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:31 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:34 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:34 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:34 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:34 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:34 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:34 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:34 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:34 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:34 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:34 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:35 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:35 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:35 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:35 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:35 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:35 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:35 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:36 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:36 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:36 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:36 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:36 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:36 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:36 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:37 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:37 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:37 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:37 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:37 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:37 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:37 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:42 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:42 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:42 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:42 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:42 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:42 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:42 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:42 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:42 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:43 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:43 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:43 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:43 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:43 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:43 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:43 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:45 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:45 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:45 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:45 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:45 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:45 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:45 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:52 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:52 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:52 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:52 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:52 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:52 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:52 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:53 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:53 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:53 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:53 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:53 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:53 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:53 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:53 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:53 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:53 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:53 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:53 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:53 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:53 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:54 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:54 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:54 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:55 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc4220> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:55 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:55 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 01:28:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d70> (5, 3)
12/08/2023 01:28:55 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 01:28:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc5870> (4, 3)
12/08/2023 01:28:55 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 01:28:55 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 01:28:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 01:28:56 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc4220> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 01:28:56 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:56 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 01:28:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d70> (5, 3)
12/08/2023 01:28:56 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 01:28:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc5870> (4, 3)
12/08/2023 01:28:56 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 01:28:56 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 01:28:56 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 01:28:57 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc4220> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 01:28:57 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:57 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 01:28:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d70> (5, 3)
12/08/2023 01:28:57 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 01:28:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc5870> (4, 3)
12/08/2023 01:28:57 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 01:28:57 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 01:28:57 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 01:29:02 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 01:29:02 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:29:02 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:29:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:29:02 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:29:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:29:02 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:29:02 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:29:02 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:29:04 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc4220> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:29:04 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:29:04 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 01:29:04 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d70> (5, 3)
12/08/2023 01:29:04 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 01:29:04 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc5870> (4, 3)
12/08/2023 01:29:04 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 01:29:04 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 01:29:04 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 01:29:05 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5a80> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 01:29:05 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:29:05 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 01:29:05 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:05 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6da0> (5, 4)
12/08/2023 01:29:05 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 01:29:05 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:05 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc58a0> (4, 4)
12/08/2023 01:29:05 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 01:29:05 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 01:29:05 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 01:29:05 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5b10> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 01:29:05 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:29:05 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:29:05 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:05 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6e00> (5, 5)
12/08/2023 01:29:05 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:29:05 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:05 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc56c0> (4, 5)
12/08/2023 01:29:05 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:29:05 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:29:05 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:29:06 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc7340> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:29:06 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:29:06 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 01:29:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6c50> (5, 6)
12/08/2023 01:29:06 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 01:29:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4970> (4, 6)
12/08/2023 01:29:06 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 01:29:06 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 01:29:06 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 01:29:07 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5f00> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 01:29:07 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:29:07 PM Pawn Figure info: (6, 0, 'w', 'p')
12/08/2023 01:29:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4df0> (5, 0)
12/08/2023 01:29:07 PM Pawn (5, 0) is empty appended moves [(5, 0)]
12/08/2023 01:29:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc7a00> (4, 0)
12/08/2023 01:29:07 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
12/08/2023 01:29:07 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
12/08/2023 01:29:07 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
12/08/2023 01:29:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5f00> moves and attacks before: ([(5, 0), (4, 0)], [])
12/08/2023 01:29:08 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:29:08 PM Pawn Figure info: (6, 0, 'w', 'p')
12/08/2023 01:29:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4df0> (5, 0)
12/08/2023 01:29:08 PM Pawn (5, 0) is empty appended moves [(5, 0)]
12/08/2023 01:29:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc7a00> (4, 0)
12/08/2023 01:29:08 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
12/08/2023 01:29:08 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
12/08/2023 01:29:08 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
12/08/2023 01:29:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5f00> moves and attacks before: ([(5, 0), (4, 0)], [])
12/08/2023 01:29:08 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:29:08 PM Pawn Figure info: (6, 0, 'w', 'p')
12/08/2023 01:29:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4df0> (5, 0)
12/08/2023 01:29:08 PM Pawn (5, 0) is empty appended moves [(5, 0)]
12/08/2023 01:29:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc7a00> (4, 0)
12/08/2023 01:29:08 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
12/08/2023 01:29:08 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
12/08/2023 01:29:08 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
12/08/2023 01:29:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5f00> moves and attacks before: ([(5, 0), (4, 0)], [])
12/08/2023 01:29:08 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:29:08 PM Pawn Figure info: (6, 0, 'w', 'p')
12/08/2023 01:29:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4df0> (5, 0)
12/08/2023 01:29:08 PM Pawn (5, 0) is empty appended moves [(5, 0)]
12/08/2023 01:29:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc7a00> (4, 0)
12/08/2023 01:29:08 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
12/08/2023 01:29:08 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
12/08/2023 01:29:08 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
12/08/2023 01:29:09 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc41c0> moves and attacks before: ([(5, 0), (4, 0)], [])
12/08/2023 01:29:09 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:29:09 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 01:29:09 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc5e40> (5, 1)
12/08/2023 01:29:09 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 01:29:09 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc50c0> (4, 1)
12/08/2023 01:29:09 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 01:29:09 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 01:29:09 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 01:29:29 PM Launching Main.py
12/08/2023 01:29:31 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f07edfc4280> moves and attacks before: ([], [])
12/08/2023 01:29:31 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:29:31 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 01:29:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f07edfc5ea0> (5, 1)
12/08/2023 01:29:31 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 01:29:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f07edfc5180> (4, 1)
12/08/2023 01:29:31 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 01:29:31 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 01:29:31 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 01:30:25 PM Launching Main.py
12/08/2023 01:30:26 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f2a375c0280> moves and attacks before: ([], [])
12/08/2023 01:30:26 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:30:26 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 01:30:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:30:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f2a375c1ea0> (5, 1)
12/08/2023 01:30:26 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 01:30:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:30:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f2a375c1180> (4, 1)
12/08/2023 01:30:26 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 01:30:26 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 01:30:26 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 01:35:33 PM Launching Main.py
12/08/2023 01:35:34 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fba96dbd2d0> moves and attacks before: ([], [])
12/08/2023 01:35:34 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:35:34 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:35:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:35:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fba96dbed70> (5, 2)
12/08/2023 01:35:34 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:35:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:35:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fba96dbc070> (4, 2)
12/08/2023 01:35:34 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:35:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:35:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:35:53 PM Launching Main.py
12/08/2023 01:35:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fb9369bc280> moves and attacks before: ([], [])
12/08/2023 01:35:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:35:54 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 01:35:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:35:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fb9369bdea0> (5, 1)
12/08/2023 01:35:54 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 01:35:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:35:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fb9369bd180> (4, 1)
12/08/2023 01:35:54 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 01:35:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 01:35:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 01:39:49 PM Launching Main.py
12/08/2023 01:39:50 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f921d1c19c0> moves and attacks before: ([], [])
12/08/2023 01:39:50 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:39:50 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:39:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:39:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f921d1c2e60> (5, 5)
12/08/2023 01:39:50 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:39:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:39:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f921d1c1720> (4, 5)
12/08/2023 01:39:50 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:39:50 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:39:50 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:40:01 PM Launching Main.py
12/08/2023 01:40:02 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fee22fbb340> moves and attacks before: ([], [])
12/08/2023 01:40:02 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:40:02 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 01:40:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fee22fbac50> (5, 6)
12/08/2023 01:40:02 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 01:40:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fee22fb8970> (4, 6)
12/08/2023 01:40:02 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 01:40:02 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:02 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:03 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fee22fbb340> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:03 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:40:03 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 01:40:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fee22fbac50> (5, 6)
12/08/2023 01:40:03 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 01:40:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fee22fb8970> (4, 6)
12/08/2023 01:40:03 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 01:40:03 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:03 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:03 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fee22fbb340> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:03 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:40:03 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 01:40:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fee22fbac50> (5, 6)
12/08/2023 01:40:03 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 01:40:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fee22fb8970> (4, 6)
12/08/2023 01:40:03 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 01:40:03 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:03 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:04 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fee22fbb340> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:04 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:40:04 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 01:40:04 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fee22fbac50> (5, 6)
12/08/2023 01:40:04 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 01:40:04 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fee22fb8970> (4, 6)
12/08/2023 01:40:04 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 01:40:04 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:04 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:04 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fee22fbb340> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:04 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:40:04 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 01:40:04 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fee22fbac50> (5, 6)
12/08/2023 01:40:04 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 01:40:04 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fee22fb8970> (4, 6)
12/08/2023 01:40:04 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 01:40:04 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:04 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:04 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fee22fbb340> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:04 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:40:04 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 01:40:04 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fee22fbac50> (5, 6)
12/08/2023 01:40:04 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 01:40:04 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fee22fb8970> (4, 6)
12/08/2023 01:40:04 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 01:40:04 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:04 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:15 PM Launching Main.py
12/08/2023 01:40:16 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9a2e3b9ae0> moves and attacks before: ([], [])
12/08/2023 01:40:16 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:40:16 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:40:16 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:16 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9a2e3badd0> (5, 5)
12/08/2023 01:40:16 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:40:16 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:16 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9a2e3b98d0> (4, 5)
12/08/2023 01:40:16 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:40:16 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:40:16 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:40:17 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9a2e3b9a50> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:40:17 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:40:17 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 01:40:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9a2e3bada0> (5, 4)
12/08/2023 01:40:17 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 01:40:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9a2e3b98a0> (4, 4)
12/08/2023 01:40:17 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 01:40:17 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 01:40:17 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 01:40:17 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9a2e3b92a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 01:40:17 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:40:17 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 01:40:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9a2e3bad40> (5, 3)
12/08/2023 01:40:17 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 01:40:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9a2e3b8040> (4, 3)
12/08/2023 01:40:17 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 01:40:17 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 01:40:17 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 01:40:18 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9a2e3b8250> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 01:40:18 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:40:18 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:40:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9a2e3b9e70> (5, 2)
12/08/2023 01:40:18 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:40:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9a2e3b9150> (4, 2)
12/08/2023 01:40:18 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:40:18 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:40:18 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:40:20 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9a2e3b8250> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:40:20 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:40:20 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:40:20 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9a2e3b9e70> (5, 2)
12/08/2023 01:40:20 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:40:20 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9a2e3b9150> (4, 2)
12/08/2023 01:40:20 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:40:20 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:40:20 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:03:05 PM Launching Main.py
12/08/2023 02:03:07 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f78e1bc1a50> moves and attacks before: ([], [])
12/08/2023 02:03:07 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:03:07 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:03:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:03:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f78e1bc2da0> (5, 4)
12/08/2023 02:03:07 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:03:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:03:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f78e1bc18a0> (4, 4)
12/08/2023 02:03:07 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:03:07 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:03:07 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:03:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f78e1bc1ae0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:03:08 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:03:08 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 02:03:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:03:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f78e1bc2dd0> (5, 5)
12/08/2023 02:03:08 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 02:03:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:03:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f78e1bc18d0> (4, 5)
12/08/2023 02:03:08 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 02:03:08 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 02:03:08 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 02:03:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f78e1bc1a50> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 02:03:08 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:03:08 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:03:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:03:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f78e1bc2da0> (5, 4)
12/08/2023 02:03:08 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:03:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:03:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f78e1bc18a0> (4, 4)
12/08/2023 02:03:08 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:03:08 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:03:08 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:03:11 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f78e1bc1a50> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:03:11 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:03:11 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:03:11 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:03:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f78e1bc2da0> (5, 4)
12/08/2023 02:03:11 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:03:11 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:03:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f78e1bc18a0> (4, 4)
12/08/2023 02:03:11 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:03:11 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:03:11 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:03:12 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f78e1bc1a50> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:03:12 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:03:12 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:03:12 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:03:12 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f78e1bc2da0> (5, 4)
12/08/2023 02:03:12 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:03:12 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:03:12 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f78e1bc18a0> (4, 4)
12/08/2023 02:03:12 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:03:12 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:03:12 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:07:14 PM Launching Main.py
12/08/2023 02:11:00 PM Launching Main.py
12/08/2023 02:11:02 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f942a1c9b40> moves and attacks before: ([], [])
12/08/2023 02:11:02 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:11:02 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:11:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:11:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f942a1c9b10> (5, 2)
12/08/2023 02:11:02 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:11:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:11:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f942a1c8c10> (4, 2)
12/08/2023 02:11:02 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:11:02 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:02 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:02 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f942a1c9b40> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:02 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:11:02 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:11:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:11:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f942a1c9b10> (5, 2)
12/08/2023 02:11:02 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:11:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:11:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f942a1c8c10> (4, 2)
12/08/2023 02:11:02 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:11:02 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:02 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:13 PM Launching Main.py
12/08/2023 02:11:17 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f20ac5b5b40> moves and attacks before: ([], [])
12/08/2023 02:11:17 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:11:17 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:11:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:11:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f20ac5b5b10> (5, 2)
12/08/2023 02:11:17 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:11:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:11:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f20ac5b4c10> (4, 2)
12/08/2023 02:11:17 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:11:17 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:17 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f20ac5b5b40> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:11:24 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:11:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:11:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f20ac5b5b10> (5, 2)
12/08/2023 02:11:24 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:11:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:11:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f20ac5b4c10> (4, 2)
12/08/2023 02:11:24 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:11:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:26 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f20ac5b5b40> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:26 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:11:26 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:11:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:11:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f20ac5b5b10> (5, 2)
12/08/2023 02:11:26 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:11:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:11:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f20ac5b4c10> (4, 2)
12/08/2023 02:11:26 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:11:26 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:26 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:30 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f20ac5b5b40> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:30 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:11:30 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:11:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:11:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f20ac5b5b10> (5, 2)
12/08/2023 02:11:30 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:11:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:11:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f20ac5b4c10> (4, 2)
12/08/2023 02:11:30 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:11:30 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:30 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:37 PM Launching Main.py
12/08/2023 02:21:23 PM Launching Main.py
12/08/2023 02:21:47 PM Launching Main.py
12/08/2023 02:22:12 PM Launching Main.py
12/08/2023 02:24:26 PM Launching Main.py
12/08/2023 02:24:43 PM Launching Main.py
12/08/2023 02:26:14 PM Launching Main.py
12/08/2023 02:27:04 PM Launching Main.py
12/08/2023 02:27:13 PM Launching Main.py
12/08/2023 02:27:18 PM Launching Main.py
12/08/2023 02:27:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa6221beb00> moves and attacks before: ([], [])
12/08/2023 02:27:22 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:27:22 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:27:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:27:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa6221bf010> (5, 4)
12/08/2023 02:27:22 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:27:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:27:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa6221be9e0> (4, 4)
12/08/2023 02:27:22 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:27:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:27:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:27:43 PM Launching Main.py
12/08/2023 02:28:12 PM Launching Main.py
12/08/2023 02:35:43 PM Launching Main.py
12/08/2023 02:35:53 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f4cb35bb8e0> moves and attacks before: ([], [])
12/08/2023 02:35:53 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:35:53 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 02:35:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:35:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f4cb35b8760> (5, 5)
12/08/2023 02:35:53 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 02:35:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:35:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f4cb35baf20> (4, 5)
12/08/2023 02:35:53 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 02:35:53 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 02:35:53 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 02:36:32 PM Launching Main.py
12/08/2023 02:36:43 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5f417bfdf0> moves and attacks before: ([], [])
12/08/2023 02:36:43 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:36:43 PM Pawn Figure info: (6, 0, 'w', 'p')
12/08/2023 02:36:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:36:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5f417bf010> (5, 0)
12/08/2023 02:36:43 PM Pawn (5, 0) is empty appended moves [(5, 0)]
12/08/2023 02:36:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:36:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5f417be9e0> (4, 0)
12/08/2023 02:36:43 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
12/08/2023 02:36:43 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
12/08/2023 02:36:43 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
12/08/2023 02:36:43 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5f417bedd0> moves and attacks before: ([(5, 0), (4, 0)], [])
12/08/2023 02:36:43 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:36:43 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 02:36:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:36:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5f417bc970> (5, 1)
12/08/2023 02:36:43 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 02:36:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:36:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5f417bf070> (4, 1)
12/08/2023 02:36:43 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 02:36:43 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 02:36:43 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 02:37:04 PM Launching Main.py
12/08/2023 02:37:10 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c78e0> moves and attacks before: ([], [])
12/08/2023 02:37:10 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:10 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 02:37:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6200> (5, 3)
12/08/2023 02:37:10 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 02:37:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c7100> (4, 3)
12/08/2023 02:37:10 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 02:37:10 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 02:37:10 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 02:37:10 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c78e0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 02:37:10 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:10 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 02:37:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6200> (5, 3)
12/08/2023 02:37:10 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 02:37:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c7100> (4, 3)
12/08/2023 02:37:10 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 02:37:10 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 02:37:10 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 02:37:16 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 02:37:16 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:16 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:16 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:16 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:16 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:16 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:16 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:16 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:16 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:16 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:16 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:16 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:16 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:16 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:16 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:16 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:16 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:16 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:16 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:16 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:16 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:20 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:20 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:20 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:20 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:20 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:20 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:20 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:20 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:20 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:22 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:22 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:22 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:22 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:23 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:23 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:23 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:23 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:23 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:23 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:24 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:24 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:24 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:24 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:24 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:24 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:24 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:24 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:24 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:25 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:25 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:25 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:25 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:25 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:25 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:25 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:25 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:25 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:25 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:25 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:25 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:25 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:25 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:25 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:25 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:25 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:25 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:25 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:25 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:38:47 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c6dd0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:38:47 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:38:47 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 02:38:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:38:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c4970> (5, 1)
12/08/2023 02:38:47 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 02:38:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:38:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c7070> (4, 1)
12/08/2023 02:38:47 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 02:38:47 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 02:38:47 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 02:41:41 PM Launching Main.py
12/08/2023 02:41:44 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f25fd1c3b80> moves and attacks before: ([], [])
12/08/2023 02:41:44 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:41:44 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:41:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c2470> (5, 2)
12/08/2023 02:41:44 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:41:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c3250> (4, 2)
12/08/2023 02:41:44 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:41:44 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:44 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:45 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f25fd1c3b80> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:45 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:41:45 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:41:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c2470> (5, 2)
12/08/2023 02:41:45 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:41:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c3250> (4, 2)
12/08/2023 02:41:45 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:41:45 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:45 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:53 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f25fd1c0100> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:53 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:41:53 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 02:41:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c0d30> (5, 3)
12/08/2023 02:41:53 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 02:41:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c32b0> (4, 3)
12/08/2023 02:41:53 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 02:41:53 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 02:41:53 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 02:41:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f25fd1c3b80> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 02:41:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:41:54 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c2470> (5, 2)
12/08/2023 02:41:54 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c3250> (4, 2)
12/08/2023 02:41:54 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:41:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f25fd1c3b80> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:41:54 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c2470> (5, 2)
12/08/2023 02:41:54 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c3250> (4, 2)
12/08/2023 02:41:54 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:41:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f25fd1c3b80> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:41:54 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c2470> (5, 2)
12/08/2023 02:41:54 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c3250> (4, 2)
12/08/2023 02:41:54 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:41:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f25fd1c3b80> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:41:54 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c2470> (5, 2)
12/08/2023 02:41:54 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c3250> (4, 2)
12/08/2023 02:41:54 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:41:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:44:06 PM Launching Main.py
12/08/2023 02:44:16 PM Launching Main.py
12/08/2023 02:44:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc6bb3c0d00> moves and attacks before: ([], [])
12/08/2023 02:44:22 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:44:22 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 02:44:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:44:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc6bb3c15a0> (5, 3)
12/08/2023 02:44:22 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 02:44:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:44:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc6bb3c0760> (4, 3)
12/08/2023 02:44:22 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 02:44:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 02:44:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 02:45:03 PM Launching Main.py
12/08/2023 02:45:54 PM Launching Main.py
12/08/2023 02:45:58 PM Launching Main.py
12/08/2023 02:47:10 PM Launching Main.py
12/08/2023 02:47:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13adfc0> moves and attacks before: ([], [])
12/08/2023 02:47:19 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:19 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:47:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13adde0> (5, 2)
12/08/2023 02:47:19 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:47:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ae470> (4, 2)
12/08/2023 02:47:19 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:47:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:47:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:47:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13adfc0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 02:47:19 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:19 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:47:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13adde0> (5, 2)
12/08/2023 02:47:19 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:47:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ae470> (4, 2)
12/08/2023 02:47:19 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:47:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:47:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:47:20 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae710> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 02:47:20 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:20 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 02:47:20 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ade70> (5, 3)
12/08/2023 02:47:20 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 02:47:20 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad570> (4, 3)
12/08/2023 02:47:20 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 02:47:20 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 02:47:20 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 02:47:21 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 02:47:21 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:21 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:21 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:21 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:21 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:21 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:22 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:22 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:22 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:22 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:22 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:22 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:22 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:22 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:22 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:22 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:22 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:22 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:23 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:23 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:23 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:23 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:23 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:23 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:23 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:23 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:23 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:23 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:23 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:23 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:23 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:23 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:23 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:23 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:23 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:23 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:23 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:23 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:23 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:23 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:23 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:23 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:24 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:24 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:24 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:24 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:24 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:24 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:24 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:24 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:24 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:24 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:24 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:24 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:24 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:24 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:24 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:24 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:24 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:24 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:24 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:24 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:24 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:24 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:24 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:24 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:25 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:25 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:25 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:25 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:25 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae710> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:25 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:25 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ade70> (5, 3)
12/08/2023 02:47:25 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad570> (4, 3)
12/08/2023 02:47:25 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 02:47:25 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 02:47:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 02:47:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae710> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 02:47:25 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:25 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ade70> (5, 3)
12/08/2023 02:47:25 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad570> (4, 3)
12/08/2023 02:47:25 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 02:47:25 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 02:47:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 02:47:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae710> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 02:47:25 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:25 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ade70> (5, 3)
12/08/2023 02:47:25 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad570> (4, 3)
12/08/2023 02:47:25 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 02:47:25 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 02:47:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 02:56:46 PM Launching Main.py
12/08/2023 02:56:49 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([], [])
12/08/2023 02:56:49 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:49 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:49 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:49 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:49 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:49 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:49 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:49 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:50 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:50 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:50 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:50 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:50 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:50 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:50 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:50 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:50 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:50 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:50 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:50 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:50 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:50 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:51 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:51 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:51 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:51 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:51 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:51 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:51 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:52 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:52 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:52 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:52 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:52 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:52 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:52 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:54 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:54 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:54 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:54 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:54 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:54 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:54 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:54 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:54 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:55 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:55 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:55 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:55 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:55 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:55 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:55 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:55 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:55 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:55 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:55 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:55 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:55 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:55 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:55 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:55 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:55 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:55 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:55 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:55 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:55 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:55 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:55 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:55 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:56 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:56 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:56 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:56 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:56 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:56 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:56 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:56 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:56 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:56 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:56 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:56 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:56 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:56 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:56 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:56 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:56 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:56 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:56 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:56 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:56 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:57 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:57 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:57 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:57 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:57 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:57 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:57 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:57 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:57 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:57 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:57 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:57 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:57 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:57 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:57 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:57 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:57 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:57 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:57 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:57 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:57 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:57 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:57 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:57 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:57 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:57 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:57 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:57 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:00:59 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:00:59 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:00:59 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:00:59 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:00:59 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 03:00:59 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:00:59 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:00:59 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 03:00:59 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:00:59 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:00:59 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:01:00 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:01:00 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:01:00 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:01:00 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:01:00 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 03:01:00 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:01:00 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:01:00 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 03:01:00 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:01:00 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:01:00 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:01:57 PM Launching Main.py
12/08/2023 03:02:53 PM Launching Main.py
12/08/2023 03:02:55 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db40a0> moves and attacks before: ([], [])
12/08/2023 03:02:55 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:02:55 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:02:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:02:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4fd0> (5, 2)
12/08/2023 03:02:55 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:02:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:02:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db42b0> (4, 2)
12/08/2023 03:02:55 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:02:55 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:56 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db40a0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:56 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:02:56 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:02:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:02:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4fd0> (5, 2)
12/08/2023 03:02:56 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:02:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:02:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db42b0> (4, 2)
12/08/2023 03:02:56 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:02:56 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:56 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:56 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db40a0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:56 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:02:56 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:02:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:02:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4fd0> (5, 2)
12/08/2023 03:02:56 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:02:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:02:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db42b0> (4, 2)
12/08/2023 03:02:56 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:02:56 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:56 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:57 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db40a0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:57 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:02:57 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:02:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:02:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4fd0> (5, 2)
12/08/2023 03:02:57 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:02:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:02:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db42b0> (4, 2)
12/08/2023 03:02:57 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:02:57 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:57 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:57 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db40a0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:57 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:02:57 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:02:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:02:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4fd0> (5, 2)
12/08/2023 03:02:57 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:02:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:02:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db42b0> (4, 2)
12/08/2023 03:02:57 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:02:57 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:57 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:03:02 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db40a0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:03:02 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:02 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:03:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4fd0> (5, 2)
12/08/2023 03:03:02 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:03:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db42b0> (4, 2)
12/08/2023 03:03:02 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:03:02 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:03:02 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:03:02 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db40a0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:03:02 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:02 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:03:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4fd0> (5, 2)
12/08/2023 03:03:02 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:03:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db42b0> (4, 2)
12/08/2023 03:03:02 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:03:02 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:03:02 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:03:03 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db40a0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:03:03 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:03 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:03:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4fd0> (5, 2)
12/08/2023 03:03:03 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:03:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db42b0> (4, 2)
12/08/2023 03:03:03 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:03:03 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:03:03 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:03:03 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:03:03 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:03 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:03 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:03 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:03 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:03 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:06 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:06 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:06 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:06 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:06 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:06 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:06 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:06 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:06 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:06 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:06 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:06 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:06 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:06 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:06 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:06 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:06 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:06 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:06 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:06 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:06 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:06 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:06 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:06 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:06 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:06 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:06 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:06 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:07 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:07 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:07 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:07 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:07 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:07 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:07 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:07 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:07 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:07 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:07 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:07 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:07 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:07 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:07 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:07 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:07 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:07 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:07 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:07 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:07 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:07 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:07 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:07 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:07 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:07 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:07 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:07 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:13 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db6890> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:13 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:13 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:03:13 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:13 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5f30> (5, 4)
12/08/2023 03:03:13 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:03:13 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:13 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5810> (4, 4)
12/08/2023 03:03:13 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:03:13 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:03:13 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:03:26 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:03:26 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:26 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:26 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:26 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:26 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:26 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:27 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:27 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:27 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:27 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:27 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:27 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:27 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:27 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:27 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:27 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:27 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:27 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:27 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:27 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:27 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:27 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:27 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:27 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:28 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:28 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:28 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:28 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:28 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:28 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:28 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:28 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:28 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:28 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:28 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:28 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:28 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:28 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:28 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:28 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:28 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:28 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:28 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:28 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:28 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:28 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:28 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:28 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:29 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:29 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:29 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:29 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:29 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:29 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:29 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:49 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db40a0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:49 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:49 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:03:49 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4fd0> (5, 2)
12/08/2023 03:03:49 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:03:49 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db42b0> (4, 2)
12/08/2023 03:03:49 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:03:49 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:03:49 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:04:10 PM RenderPossibleMoves(): choosen figure: <classes.piece.Bishop object at 0x7fa065db7cd0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:04:10 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/08/2023 03:04:51 PM Launching Main.py
12/08/2023 03:04:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe216bc2d40> moves and attacks before: ([], [])
12/08/2023 03:04:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:04:54 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:04:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:04:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe216bc2170> (5, 4)
12/08/2023 03:04:54 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:04:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:04:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe216bc16c0> (4, 4)
12/08/2023 03:04:54 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:04:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:04:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:04:56 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe216bc2d40> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:04:56 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:04:56 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:04:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:04:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe216bc2170> (5, 4)
12/08/2023 03:04:56 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:04:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:04:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe216bc16c0> (4, 4)
12/08/2023 03:04:56 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:04:56 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:04:56 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:05:00 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe216bc28f0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:05:00 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:05:00 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:05:00 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:05:00 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe216bc10c0> (5, 3)
12/08/2023 03:05:00 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:05:00 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:05:00 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe216bc03a0> (4, 3)
12/08/2023 03:05:00 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:05:00 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:05:00 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:05:15 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe216bc2830> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:05:15 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:05:15 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:05:15 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:05:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe216bc0e80> (5, 2)
12/08/2023 03:05:15 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:05:15 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:05:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe216bc0370> (4, 2)
12/08/2023 03:05:15 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:05:15 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:05:15 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:07:04 PM Launching Main.py
12/08/2023 03:07:06 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe358fbc040> moves and attacks before: ([], [])
12/08/2023 03:07:06 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:06 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:07:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe358fbe290> (5, 3)
12/08/2023 03:07:06 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:07:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe358fbd960> (4, 3)
12/08/2023 03:07:06 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:07:06 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:07:06 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:07:07 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe358fbee00> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:07:07 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:07 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:07:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe358fbd1e0> (5, 2)
12/08/2023 03:07:07 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:07:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe358fbc4c0> (4, 2)
12/08/2023 03:07:07 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:07:07 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:07:07 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:07:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe358fbee00> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:07:08 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:08 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:07:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe358fbd1e0> (5, 2)
12/08/2023 03:07:08 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:07:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe358fbc4c0> (4, 2)
12/08/2023 03:07:08 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:07:08 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:07:08 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:07:12 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe358fbee00> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:07:12 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:12 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:07:12 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:12 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe358fbd1e0> (5, 2)
12/08/2023 03:07:12 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:07:12 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:12 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe358fbc4c0> (4, 2)
12/08/2023 03:07:12 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:07:12 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:07:12 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:07:17 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe358fbee00> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:07:17 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:17 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:07:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe358fbd1e0> (5, 2)
12/08/2023 03:07:17 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:07:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe358fbc4c0> (4, 2)
12/08/2023 03:07:17 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:07:17 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:07:17 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:07:40 PM Launching Main.py
12/08/2023 03:07:48 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7efddc3bedd0> moves and attacks before: ([], [])
12/08/2023 03:07:48 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:48 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:07:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bd1b0> (5, 3)
12/08/2023 03:07:48 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:07:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bc490> (4, 3)
12/08/2023 03:07:48 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:07:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:07:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:07:49 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7efddc3bedd0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:07:49 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:49 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:07:49 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bd1b0> (5, 3)
12/08/2023 03:07:49 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:07:49 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bc490> (4, 3)
12/08/2023 03:07:49 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:07:49 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:07:49 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:07:49 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7efddc3bedd0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:07:49 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:49 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:07:49 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bd1b0> (5, 3)
12/08/2023 03:07:49 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:07:49 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bc490> (4, 3)
12/08/2023 03:07:49 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:07:49 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:07:49 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:07:50 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7efddc3bfca0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:07:50 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:50 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:07:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3be260> (5, 4)
12/08/2023 03:07:50 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:07:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bd930> (4, 4)
12/08/2023 03:07:50 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:07:50 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:50 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:50 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7efddc3bfca0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:50 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:50 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:07:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3be260> (5, 4)
12/08/2023 03:07:50 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:07:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bd930> (4, 4)
12/08/2023 03:07:50 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:07:50 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:50 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:53 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7efddc3bfca0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:53 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:53 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:07:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3be260> (5, 4)
12/08/2023 03:07:53 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:07:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bd930> (4, 4)
12/08/2023 03:07:53 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:07:53 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:53 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7efddc3bfca0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:54 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:07:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3be260> (5, 4)
12/08/2023 03:07:54 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:07:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bd930> (4, 4)
12/08/2023 03:07:54 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:07:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7efddc3bfca0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:54 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:07:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3be260> (5, 4)
12/08/2023 03:07:54 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:07:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bd930> (4, 4)
12/08/2023 03:07:54 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:07:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:58 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7efddc3bfca0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:58 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:58 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:07:58 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:58 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3be260> (5, 4)
12/08/2023 03:07:58 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:07:58 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:58 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bd930> (4, 4)
12/08/2023 03:07:58 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:07:58 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:58 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:58 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7efddc3bfca0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:58 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:58 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:07:58 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:58 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3be260> (5, 4)
12/08/2023 03:07:58 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:07:58 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:58 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bd930> (4, 4)
12/08/2023 03:07:58 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:07:58 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:58 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:59 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7efddc3bfca0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:59 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:59 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:07:59 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:59 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3be260> (5, 4)
12/08/2023 03:07:59 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:07:59 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:59 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bd930> (4, 4)
12/08/2023 03:07:59 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:07:59 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:59 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:59 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7efddc3bfca0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:59 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:59 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:07:59 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:59 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3be260> (5, 4)
12/08/2023 03:07:59 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:07:59 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:59 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bd930> (4, 4)
12/08/2023 03:07:59 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:07:59 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:59 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:08:11 PM Launching Main.py
12/08/2023 03:08:14 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fce1fbb4d60> moves and attacks before: ([], [])
12/08/2023 03:08:14 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:08:14 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:08:14 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:08:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fce1fbb4ee0> (5, 5)
12/08/2023 03:08:14 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:08:14 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:08:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fce1fbb41c0> (4, 5)
12/08/2023 03:08:14 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:08:14 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:08:14 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:08:15 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fce1fbb4d60> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:08:15 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:08:15 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:08:15 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:08:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fce1fbb4ee0> (5, 5)
12/08/2023 03:08:15 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:08:15 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:08:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fce1fbb41c0> (4, 5)
12/08/2023 03:08:15 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:08:15 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:08:15 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:08:15 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fce1fbb4d60> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:08:15 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:08:15 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:08:15 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:08:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fce1fbb4ee0> (5, 5)
12/08/2023 03:08:15 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:08:15 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:08:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fce1fbb41c0> (4, 5)
12/08/2023 03:08:15 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:08:15 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:08:15 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:08:15 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fce1fbb4d60> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:08:15 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:08:15 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:08:15 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:08:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fce1fbb4ee0> (5, 5)
12/08/2023 03:08:15 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:08:15 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:08:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fce1fbb41c0> (4, 5)
12/08/2023 03:08:15 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:08:15 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:08:15 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:08:18 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fce1fbb6470> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:08:18 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:08:18 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:08:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:08:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fce1fbb5f60> (5, 4)
12/08/2023 03:08:18 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:08:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:08:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fce1fbb5630> (4, 4)
12/08/2023 03:08:18 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:08:18 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:08:18 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:08:59 PM Launching Main.py
12/08/2023 03:09:02 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b4370> moves and attacks before: ([], [])
12/08/2023 03:09:02 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:02 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:09:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b6050> (5, 2)
12/08/2023 03:09:02 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:09:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5720> (4, 2)
12/08/2023 03:09:02 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:09:02 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:02 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:02 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b40d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:02 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:02 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:09:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b60b0> (5, 3)
12/08/2023 03:09:02 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:09:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5780> (4, 3)
12/08/2023 03:09:02 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:09:02 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:09:02 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:09:03 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b65f0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:09:03 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:03 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:09:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b4e20> (5, 4)
12/08/2023 03:09:03 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:09:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b4100> (4, 4)
12/08/2023 03:09:03 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:09:03 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:09:03 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:09:04 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b6620> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:09:04 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:04 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:09:04 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5ed0> (5, 5)
12/08/2023 03:09:04 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:09:04 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b6560> (4, 5)
12/08/2023 03:09:04 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:09:04 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:09:04 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:09:04 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b65f0> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:09:04 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:04 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:09:04 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b4e20> (5, 4)
12/08/2023 03:09:04 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:09:04 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b4100> (4, 4)
12/08/2023 03:09:04 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:09:04 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:09:04 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:09:05 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b40d0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:09:05 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:05 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:09:05 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:05 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b60b0> (5, 3)
12/08/2023 03:09:05 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:09:05 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:05 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5780> (4, 3)
12/08/2023 03:09:05 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:09:05 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:09:05 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:09:05 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b4370> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:09:05 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:05 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:09:05 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:05 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b6050> (5, 2)
12/08/2023 03:09:05 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:09:05 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:05 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5720> (4, 2)
12/08/2023 03:09:05 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:09:05 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:05 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:05 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b6980> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:05 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:05 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 03:09:05 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:05 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5e10> (5, 1)
12/08/2023 03:09:05 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 03:09:05 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:05 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b56f0> (4, 1)
12/08/2023 03:09:05 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 03:09:05 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 03:09:05 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 03:09:06 PM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x7f9ba39b6770> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 03:09:06 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:07 PM RenderPossibleMoves(): choosen figure: <classes.piece.Bishop object at 0x7f9ba39b7a90> moves and attacks before: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:07 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/08/2023 03:09:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b4370> moves and attacks before: ([], [])
12/08/2023 03:09:08 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:08 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:09:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b6050> (5, 2)
12/08/2023 03:09:08 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:09:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5720> (4, 2)
12/08/2023 03:09:08 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:09:08 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:08 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b6980> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:08 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:08 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 03:09:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5e10> (5, 1)
12/08/2023 03:09:08 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 03:09:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b56f0> (4, 1)
12/08/2023 03:09:08 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 03:09:08 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 03:09:08 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 03:09:09 PM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x7f9ba39b6770> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 03:09:09 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:17 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b4370> moves and attacks before: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:17 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:17 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:09:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b6050> (5, 2)
12/08/2023 03:09:17 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:09:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5720> (4, 2)
12/08/2023 03:09:17 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:09:17 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:17 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:18 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b4370> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:18 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:18 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:09:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b6050> (5, 2)
12/08/2023 03:09:18 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:09:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5720> (4, 2)
12/08/2023 03:09:18 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:09:18 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:18 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b4370> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:19 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:19 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:09:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b6050> (5, 2)
12/08/2023 03:09:19 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:09:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5720> (4, 2)
12/08/2023 03:09:19 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:09:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:21 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b4370> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:21 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:21 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:09:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b6050> (5, 2)
12/08/2023 03:09:21 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:09:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5720> (4, 2)
12/08/2023 03:09:21 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:09:21 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:21 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x7f9ba39b6770> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b6980> moves and attacks before: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:22 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:22 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 03:09:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5e10> (5, 1)
12/08/2023 03:09:22 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 03:09:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b56f0> (4, 1)
12/08/2023 03:09:22 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 03:09:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 03:09:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 03:09:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b4370> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 03:09:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:23 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:09:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b6050> (5, 2)
12/08/2023 03:09:23 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:09:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5720> (4, 2)
12/08/2023 03:09:23 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:09:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x7f9ba39b6770> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x7f9ba39b6770> moves and attacks before: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x7f9ba39b6770> moves and attacks before: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x7f9ba39b6770> moves and attacks before: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x7f9ba39b6770> moves and attacks before: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (5, 0)], [])
12/08/2023 03:10:39 PM Launching Main.py
12/08/2023 03:15:17 PM Launching Main.py
