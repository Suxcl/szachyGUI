12/07/2023 06:27:47 PM Lanuching Main.py
12/07/2023 06:28:34 PM Lanuching Main.py
12/07/2023 06:29:44 PM Lanuching Main.py
12/07/2023 06:35:10 PM Lanuching Main.py
12/07/2023 06:55:18 PM Launching Main.py
12/07/2023 06:55:38 PM Launching Main.py
12/07/2023 06:56:21 PM Launching Main.py
12/07/2023 06:56:29 PM Launching Main.py
12/07/2023 08:17:31 PM Launching Main.py
12/07/2023 08:20:02 PM Launching Main.py
12/07/2023 09:40:38 PM Launching Main.py
12/07/2023 09:41:06 PM Launching Main.py
12/07/2023 09:42:03 PM Launching Main.py
12/07/2023 09:42:07 PM Launching Main.py
12/07/2023 09:43:35 PM Launching Main.py
12/07/2023 09:44:13 PM Launching Main.py
12/07/2023 09:45:05 PM Launching Main.py
12/07/2023 09:45:30 PM Launching Main.py
12/07/2023 11:24:03 PM Launching Main.py
12/07/2023 11:24:54 PM Launching Main.py
12/07/2023 11:25:29 PM Launching Main.py
12/07/2023 11:27:00 PM Launching Main.py
12/07/2023 11:27:38 PM Launching Main.py
12/07/2023 11:28:22 PM Launching Main.py
12/07/2023 11:30:01 PM Launching Main.py
12/07/2023 11:30:25 PM Launching Main.py
12/07/2023 11:36:54 PM Launching Main.py
12/07/2023 11:39:36 PM Launching Main.py
12/07/2023 11:40:54 PM Launching Main.py
12/07/2023 11:41:04 PM Launching Main.py
12/07/2023 11:51:31 PM Launching Main.py
12/07/2023 11:51:57 PM Launching Main.py
12/08/2023 11:00:00 AM Launching Main.py
12/08/2023 11:00:15 AM Launching Main.py
12/08/2023 11:01:57 AM Launching Main.py
12/08/2023 11:03:49 AM Launching Main.py
12/08/2023 11:05:21 AM Launching Main.py
12/08/2023 11:27:13 AM Launching Main.py
12/08/2023 11:27:36 AM Launching Main.py
12/08/2023 11:29:12 AM Launching Main.py
12/08/2023 11:40:55 AM Launching Main.py
12/08/2023 11:41:56 AM Launching Main.py
12/08/2023 11:43:32 AM Launching Main.py
12/08/2023 11:44:03 AM Launching Main.py
12/08/2023 11:44:19 AM Launching Main.py
12/08/2023 11:45:33 AM Launching Main.py
12/08/2023 11:46:32 AM Launching Main.py
12/08/2023 11:50:26 AM Launching Main.py
12/08/2023 11:51:14 AM Launching Main.py
12/08/2023 11:51:27 AM Launching Main.py
12/08/2023 11:52:32 AM Launching Main.py
12/08/2023 12:09:24 PM Launching Main.py
12/08/2023 12:12:05 PM Launching Main.py
12/08/2023 12:18:17 PM Launching Main.py
12/08/2023 12:18:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f0db5dbf3d0> moves and attacks before: ([], [])
12/08/2023 12:18:19 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:18:19 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:18:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:18:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f0db5dbe860> (5, 2)
12/08/2023 12:18:19 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:18:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:18:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f0db5dbf700> (4, 2)
12/08/2023 12:18:19 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:18:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:18:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:21:10 PM Launching Main.py
12/08/2023 12:21:12 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f40b61bb310> moves and attacks before: ([], [])
12/08/2023 12:21:12 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:21:12 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:21:12 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:21:12 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f40b61ba7d0> (5, 3)
12/08/2023 12:21:12 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:21:12 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:21:12 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f40b61bb670> (4, 3)
12/08/2023 12:21:12 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:21:12 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:21:12 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:21:14 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f40b61bb310> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:21:14 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:21:14 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:21:14 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:21:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f40b61ba7d0> (5, 3)
12/08/2023 12:21:14 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:21:14 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:21:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f40b61bb670> (4, 3)
12/08/2023 12:21:14 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:21:14 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:21:14 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:21:15 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f40b61bb310> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:21:15 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:21:15 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:21:15 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:21:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f40b61ba7d0> (5, 3)
12/08/2023 12:21:15 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:21:15 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:21:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f40b61bb670> (4, 3)
12/08/2023 12:21:15 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:21:15 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:21:15 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:29:39 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f40b61bb370> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:29:39 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:29:39 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:29:39 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:29:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f40b61ba800> (5, 4)
12/08/2023 12:29:39 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:29:39 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:29:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f40b61bb6a0> (4, 4)
12/08/2023 12:29:39 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:29:39 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:29:39 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:29:39 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f40b61bb3d0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:29:39 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:29:39 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 12:29:39 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:29:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f40b61ba860> (5, 5)
12/08/2023 12:29:39 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 12:29:39 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:29:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f40b61bb700> (4, 5)
12/08/2023 12:29:39 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 12:29:39 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 12:29:39 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 12:29:40 PM RenderPossibleMoves(): choosen figure: <classes.piece.King object at 0x7f40b61b8cd0> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 12:50:08 PM Launching Main.py
12/08/2023 12:50:10 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7ff084fc0e80> moves and attacks before: ([], [])
12/08/2023 12:50:10 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:10 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:50:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7ff084fc0310> (5, 2)
12/08/2023 12:50:10 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:50:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7ff084fc1d50> (4, 2)
12/08/2023 12:50:10 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:50:10 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:10 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:10 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7ff084fc0eb0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:10 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:10 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:50:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7ff084fc02b0> (5, 3)
12/08/2023 12:50:10 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:50:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7ff084fc1d20> (4, 3)
12/08/2023 12:50:10 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:50:10 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:10 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:11 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7ff084fc0e80> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:11 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:11 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:50:11 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7ff084fc0310> (5, 2)
12/08/2023 12:50:11 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:50:11 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7ff084fc1d50> (4, 2)
12/08/2023 12:50:11 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:50:11 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:11 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:12 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7ff084fc0eb0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:12 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:12 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:50:12 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:12 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7ff084fc02b0> (5, 3)
12/08/2023 12:50:12 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:50:12 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:12 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7ff084fc1d20> (4, 3)
12/08/2023 12:50:12 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:50:12 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:12 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:32 PM Launching Main.py
12/08/2023 12:50:33 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4dc0> moves and attacks before: ([], [])
12/08/2023 12:50:33 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:33 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 12:50:33 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb55a0> (5, 1)
12/08/2023 12:50:33 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 12:50:33 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7700> (4, 1)
12/08/2023 12:50:33 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 12:50:33 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:33 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:33 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4dc0> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:33 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:33 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 12:50:33 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb55a0> (5, 1)
12/08/2023 12:50:33 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 12:50:33 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7700> (4, 1)
12/08/2023 12:50:33 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 12:50:33 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:33 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:34 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4dc0> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:34 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:34 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 12:50:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb55a0> (5, 1)
12/08/2023 12:50:34 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 12:50:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7700> (4, 1)
12/08/2023 12:50:34 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 12:50:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:34 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4dc0> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:34 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:34 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 12:50:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb55a0> (5, 1)
12/08/2023 12:50:34 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 12:50:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7700> (4, 1)
12/08/2023 12:50:34 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 12:50:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:34 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4dc0> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:34 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:34 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 12:50:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb55a0> (5, 1)
12/08/2023 12:50:34 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 12:50:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7700> (4, 1)
12/08/2023 12:50:34 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 12:50:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:35 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4e50> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:35 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:35 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb5660> (5, 2)
12/08/2023 12:50:35 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7760> (4, 2)
12/08/2023 12:50:35 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:50:35 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:35 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:35 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4dc0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:35 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:35 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb55a0> (5, 1)
12/08/2023 12:50:35 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7700> (4, 1)
12/08/2023 12:50:35 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 12:50:35 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:35 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:35 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4e50> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:35 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:35 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb5660> (5, 2)
12/08/2023 12:50:35 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7760> (4, 2)
12/08/2023 12:50:35 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:50:35 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:35 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:35 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4e50> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:35 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:35 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb5660> (5, 2)
12/08/2023 12:50:35 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7760> (4, 2)
12/08/2023 12:50:35 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:50:35 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:35 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:36 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4dc0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:36 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:36 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb55a0> (5, 1)
12/08/2023 12:50:36 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7700> (4, 1)
12/08/2023 12:50:36 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 12:50:36 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:36 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:36 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb6500> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:36 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:36 PM Pawn Figure info: (6, 0, 'w', 'p')
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7520> (5, 0)
12/08/2023 12:50:36 PM Pawn (5, 0) is empty appended moves [(5, 0)]
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb4fa0> (4, 0)
12/08/2023 12:50:36 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
12/08/2023 12:50:36 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
12/08/2023 12:50:36 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
12/08/2023 12:50:36 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4dc0> moves and attacks before: ([(5, 0), (4, 0)], [])
12/08/2023 12:50:36 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:36 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb55a0> (5, 1)
12/08/2023 12:50:36 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7700> (4, 1)
12/08/2023 12:50:36 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 12:50:36 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:36 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:36 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4e50> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 12:50:36 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:36 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb5660> (5, 2)
12/08/2023 12:50:36 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb7760> (4, 2)
12/08/2023 12:50:36 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:50:36 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:36 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:37 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4eb0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:50:37 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:37 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb5ab0> (5, 3)
12/08/2023 12:50:37 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb77c0> (4, 3)
12/08/2023 12:50:37 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:50:37 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:37 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:37 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4eb0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:37 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:37 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb5ab0> (5, 3)
12/08/2023 12:50:37 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb77c0> (4, 3)
12/08/2023 12:50:37 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:50:37 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:37 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:37 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4eb0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:37 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:37 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb5ab0> (5, 3)
12/08/2023 12:50:37 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb77c0> (4, 3)
12/08/2023 12:50:37 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:50:37 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:37 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:37 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4eb0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:37 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:37 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb5ab0> (5, 3)
12/08/2023 12:50:37 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb77c0> (4, 3)
12/08/2023 12:50:37 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:50:37 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:37 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:37 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4ee0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:50:37 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:37 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb6980> (5, 4)
12/08/2023 12:50:37 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb46d0> (4, 4)
12/08/2023 12:50:37 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:50:37 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:50:37 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:50:38 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4460> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:50:38 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:38 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb69e0> (5, 5)
12/08/2023 12:50:38 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb54e0> (4, 5)
12/08/2023 12:50:38 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 12:50:38 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 12:50:38 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 12:50:38 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4f40> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 12:50:38 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:38 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb6a10> (5, 6)
12/08/2023 12:50:38 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb5510> (4, 6)
12/08/2023 12:50:38 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 12:50:38 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 12:50:38 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 12:50:38 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb4f40> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 12:50:38 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:38 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb6a10> (5, 6)
12/08/2023 12:50:38 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb5510> (4, 6)
12/08/2023 12:50:38 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 12:50:38 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 12:50:38 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 12:50:38 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f523cfb5690> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 12:50:38 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:50:38 PM Pawn Figure info: (6, 7, 'w', 'p')
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb6a70> (5, 7)
12/08/2023 12:50:38 PM Pawn (5, 7) is empty appended moves [(5, 7)]
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:50:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f523cfb5330> (4, 7)
12/08/2023 12:50:38 PM Pawn (4, 7) is empty appended moves [(5, 7), (4, 7)]
12/08/2023 12:50:38 PM Pawn ReturnPossibleMove(): returning values: ([(5, 7), (4, 7)], [])
12/08/2023 12:50:38 PM RenderPossibleMoves(): moves and attacks after: ([(5, 7), (4, 7)], [])
12/08/2023 12:50:39 PM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x7f523cfb7a60> moves and attacks before: ([(5, 7), (4, 7)], [])
12/08/2023 12:50:39 PM RenderPossibleMoves(): moves and attacks after: ([(5, 7), (5, 5)], [])
12/08/2023 12:50:39 PM RenderPossibleMoves(): choosen figure: <classes.piece.Bishop object at 0x7f523cfb7190> moves and attacks before: ([(5, 7), (5, 5)], [])
12/08/2023 12:50:39 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/08/2023 12:50:39 PM RenderPossibleMoves(): choosen figure: <classes.piece.King object at 0x7f523cfb7130> moves and attacks before: ([], [])
12/08/2023 12:51:17 PM Launching Main.py
12/08/2023 12:51:18 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f271d3acdc0> moves and attacks before: ([], [])
12/08/2023 12:51:18 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:18 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 12:51:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3ad5a0> (5, 1)
12/08/2023 12:51:18 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 12:51:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3af700> (4, 1)
12/08/2023 12:51:18 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 12:51:18 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 12:51:18 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 12:51:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f271d3ace50> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 12:51:19 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:19 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:51:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3ad660> (5, 2)
12/08/2023 12:51:19 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:51:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3af760> (4, 2)
12/08/2023 12:51:19 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:51:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f271d3acdc0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:19 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:19 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 12:51:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3ad5a0> (5, 1)
12/08/2023 12:51:19 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 12:51:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3af700> (4, 1)
12/08/2023 12:51:19 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 12:51:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 12:51:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 12:51:21 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f271d3ace50> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 12:51:21 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:21 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:51:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3ad660> (5, 2)
12/08/2023 12:51:21 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:51:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3af760> (4, 2)
12/08/2023 12:51:21 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:51:21 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:21 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f271d3aceb0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:22 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:22 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:51:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3adab0> (5, 3)
12/08/2023 12:51:22 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:51:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3af7c0> (4, 3)
12/08/2023 12:51:22 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:51:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f271d3ace50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:23 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:51:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3ad660> (5, 2)
12/08/2023 12:51:23 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:51:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3af760> (4, 2)
12/08/2023 12:51:23 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:51:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f271d3aceb0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:24 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:51:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3adab0> (5, 3)
12/08/2023 12:51:24 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:51:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3af7c0> (4, 3)
12/08/2023 12:51:24 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:51:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f271d3ace50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:24 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:51:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3ad660> (5, 2)
12/08/2023 12:51:24 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:51:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3af760> (4, 2)
12/08/2023 12:51:24 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:51:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f271d3aceb0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:25 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:25 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:51:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3adab0> (5, 3)
12/08/2023 12:51:25 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:51:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3af7c0> (4, 3)
12/08/2023 12:51:25 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:51:25 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f271d3ace50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:27 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:27 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:51:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3ad660> (5, 2)
12/08/2023 12:51:27 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:51:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f271d3af760> (4, 2)
12/08/2023 12:51:27 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:51:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:41 PM Launching Main.py
12/08/2023 12:51:43 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe2593c0ee0> moves and attacks before: ([], [])
12/08/2023 12:51:43 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:43 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:51:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe2593c1690> (5, 2)
12/08/2023 12:51:43 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:51:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe2593c3790> (4, 2)
12/08/2023 12:51:43 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:51:43 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:43 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:43 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe2593c0d30> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:43 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:43 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:51:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe2593c1ae0> (5, 3)
12/08/2023 12:51:43 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:51:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe2593c37f0> (4, 3)
12/08/2023 12:51:43 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:51:43 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:43 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:44 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe2593c0ee0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:44 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:44 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:51:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe2593c1690> (5, 2)
12/08/2023 12:51:44 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:51:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe2593c3790> (4, 2)
12/08/2023 12:51:44 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:51:44 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:44 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:45 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe2593c0d30> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:51:45 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:51:45 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:51:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe2593c1ae0> (5, 3)
12/08/2023 12:51:45 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:51:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:51:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe2593c37f0> (4, 3)
12/08/2023 12:51:45 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:51:45 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:51:45 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:52:36 PM Launching Main.py
12/08/2023 12:54:16 PM Launching Main.py
12/08/2023 12:54:18 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8d90> moves and attacks before: ([], [])
12/08/2023 12:54:18 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:18 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:54:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b96f0> (5, 2)
12/08/2023 12:54:18 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:54:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb7f0> (4, 2)
12/08/2023 12:54:18 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:54:18 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:54:18 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:54:18 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8fd0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:54:18 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:18 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:54:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b9b40> (5, 3)
12/08/2023 12:54:18 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:54:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb850> (4, 3)
12/08/2023 12:54:18 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:54:18 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:18 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8d90> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:19 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:19 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:54:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b96f0> (5, 2)
12/08/2023 12:54:19 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:54:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb7f0> (4, 2)
12/08/2023 12:54:19 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:54:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:54:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:54:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8fd0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 12:54:22 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:22 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:54:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b9b40> (5, 3)
12/08/2023 12:54:22 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:54:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb850> (4, 3)
12/08/2023 12:54:22 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:54:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8fd0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:23 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:54:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b9b40> (5, 3)
12/08/2023 12:54:23 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:54:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb850> (4, 3)
12/08/2023 12:54:23 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:54:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:38 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:38 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:38 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:54:38 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:54:38 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:54:38 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:54:38 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:54:38 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:38 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:39 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:39 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:39 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:54:39 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:54:39 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:54:39 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:54:39 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:54:39 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:39 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:40 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:40 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:40 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:54:40 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:54:40 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:54:40 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:54:40 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:54:40 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:40 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:41 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:41 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:41 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:54:41 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:54:41 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:54:41 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:54:41 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:54:41 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:41 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:41 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:41 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:41 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:54:41 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:54:41 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:54:41 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:54:41 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:54:41 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:41 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:43 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8fd0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:43 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:43 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:54:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b9b40> (5, 3)
12/08/2023 12:54:43 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:54:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb850> (4, 3)
12/08/2023 12:54:43 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:54:43 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:43 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:44 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:44 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:44 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:54:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:54:44 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:54:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:54:44 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:54:44 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:44 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:44 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8fd0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:44 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:44 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:54:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b9b40> (5, 3)
12/08/2023 12:54:44 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:54:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb850> (4, 3)
12/08/2023 12:54:44 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:54:44 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:44 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:47 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:54:47 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:54:47 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:54:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:54:47 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:54:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:54:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:54:47 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:54:47 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:54:47 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:26 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8fd0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:26 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:55:26 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:55:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b9b40> (5, 3)
12/08/2023 12:55:26 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:55:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb850> (4, 3)
12/08/2023 12:55:26 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:55:26 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:55:26 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:55:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:55:27 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:55:27 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:55:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:55:27 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:55:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:55:27 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:55:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:28 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:55:28 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:55:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:55:28 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:55:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:55:28 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:55:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:29 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:29 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:55:29 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:55:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:55:29 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:55:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:55:29 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:55:29 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:29 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:30 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8fd0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:30 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:55:30 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:55:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b9b40> (5, 3)
12/08/2023 12:55:30 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:55:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb850> (4, 3)
12/08/2023 12:55:30 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:55:30 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:55:30 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:55:31 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:55:31 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:55:31 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:55:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:55:31 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:55:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:55:31 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:55:31 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:31 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:37 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:37 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:55:37 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:55:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:55:37 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:55:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:55:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:55:37 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:55:37 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:55:37 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:56:52 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b9030> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:56:52 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:56:52 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 12:56:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:56:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa70> (5, 5)
12/08/2023 12:56:52 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 12:56:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:56:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b9570> (4, 5)
12/08/2023 12:56:52 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 12:56:52 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 12:56:52 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 12:56:52 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8fd0> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 12:56:52 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:56:52 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:56:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:56:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b9b40> (5, 3)
12/08/2023 12:56:52 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:56:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:56:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb850> (4, 3)
12/08/2023 12:56:52 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:56:52 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:56:52 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:56:53 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8070> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:56:53 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:56:53 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 12:56:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:56:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93baa10> (5, 4)
12/08/2023 12:56:53 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 12:56:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:56:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b8760> (4, 4)
12/08/2023 12:56:53 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 12:56:53 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 12:56:53 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 12:56:53 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8fd0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 12:56:53 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:56:53 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 12:56:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:56:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b9b40> (5, 3)
12/08/2023 12:56:53 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 12:56:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:56:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb850> (4, 3)
12/08/2023 12:56:53 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 12:56:53 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 12:56:53 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 12:58:20 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8f40> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 12:58:20 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:58:20 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 12:58:20 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:58:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b9630> (5, 1)
12/08/2023 12:58:20 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 12:58:20 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:58:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb790> (4, 1)
12/08/2023 12:58:20 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 12:58:20 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 12:58:20 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 12:58:21 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f04a93b8d90> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 12:58:21 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 12:58:21 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 12:58:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:58:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93b96f0> (5, 2)
12/08/2023 12:58:21 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 12:58:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 12:58:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f04a93bb7f0> (4, 2)
12/08/2023 12:58:21 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 12:58:21 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 12:58:21 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 12:59:02 PM Launching Main.py
12/08/2023 01:00:33 PM Launching Main.py
12/08/2023 01:00:34 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc8df0> moves and attacks before: ([], [])
12/08/2023 01:00:34 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:34 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:00:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc9750> (5, 2)
12/08/2023 01:00:34 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:00:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcb850> (4, 2)
12/08/2023 01:00:34 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:00:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:00:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:00:36 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9030> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:00:36 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:36 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 01:00:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc9ba0> (5, 3)
12/08/2023 01:00:36 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 01:00:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcb8b0> (4, 3)
12/08/2023 01:00:36 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 01:00:36 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 01:00:36 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 01:00:40 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc80d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 01:00:40 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:40 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 01:00:40 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaa70> (5, 4)
12/08/2023 01:00:40 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 01:00:40 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc87c0> (4, 4)
12/08/2023 01:00:40 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 01:00:40 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 01:00:40 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 01:00:42 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc80d0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 01:00:42 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:42 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 01:00:42 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaa70> (5, 4)
12/08/2023 01:00:42 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 01:00:42 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc87c0> (4, 4)
12/08/2023 01:00:42 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 01:00:42 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 01:00:42 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 01:00:44 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9090> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 01:00:44 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:44 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:00:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaad0> (5, 5)
12/08/2023 01:00:44 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:00:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc95d0> (4, 5)
12/08/2023 01:00:44 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:00:44 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:44 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:46 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9090> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:46 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:46 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:00:46 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:46 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaad0> (5, 5)
12/08/2023 01:00:46 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:00:46 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:46 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc95d0> (4, 5)
12/08/2023 01:00:46 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:00:46 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:46 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:47 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9090> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:47 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:47 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:00:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaad0> (5, 5)
12/08/2023 01:00:47 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:00:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc95d0> (4, 5)
12/08/2023 01:00:47 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:00:47 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:47 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:47 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9090> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:47 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:47 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:00:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaad0> (5, 5)
12/08/2023 01:00:47 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:00:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc95d0> (4, 5)
12/08/2023 01:00:47 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:00:47 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:47 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:47 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9090> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:47 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:47 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:00:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaad0> (5, 5)
12/08/2023 01:00:47 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:00:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc95d0> (4, 5)
12/08/2023 01:00:47 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:00:47 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:47 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9090> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:48 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaad0> (5, 5)
12/08/2023 01:00:48 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc95d0> (4, 5)
12/08/2023 01:00:48 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:00:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9090> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:48 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaad0> (5, 5)
12/08/2023 01:00:48 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc95d0> (4, 5)
12/08/2023 01:00:48 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:00:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9090> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:48 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaad0> (5, 5)
12/08/2023 01:00:48 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc95d0> (4, 5)
12/08/2023 01:00:48 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:00:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9090> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:48 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaad0> (5, 5)
12/08/2023 01:00:48 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc95d0> (4, 5)
12/08/2023 01:00:48 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:00:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9090> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:48 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaad0> (5, 5)
12/08/2023 01:00:48 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc95d0> (4, 5)
12/08/2023 01:00:48 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:00:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9090> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:48 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaad0> (5, 5)
12/08/2023 01:00:48 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc95d0> (4, 5)
12/08/2023 01:00:48 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:00:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc9090> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:00:48 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaad0> (5, 5)
12/08/2023 01:00:48 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:00:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc95d0> (4, 5)
12/08/2023 01:00:48 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:00:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:00:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:05:56 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc80d0> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:05:56 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:05:56 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 01:05:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:05:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaa70> (5, 4)
12/08/2023 01:05:56 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 01:05:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:05:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc87c0> (4, 4)
12/08/2023 01:05:56 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 01:05:56 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 01:05:56 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:03 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5820fc80d0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:03 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:03 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 01:06:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fcaa70> (5, 4)
12/08/2023 01:06:03 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 01:06:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5820fc87c0> (4, 4)
12/08/2023 01:06:03 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 01:06:03 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:03 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:27 PM Launching Main.py
12/08/2023 01:06:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fea2ebc4dc0> moves and attacks before: ([], [])
12/08/2023 01:06:28 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:28 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 01:06:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fea2ebc55a0> (5, 1)
12/08/2023 01:06:28 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 01:06:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fea2ebc7700> (4, 1)
12/08/2023 01:06:28 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 01:06:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 01:06:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 01:06:29 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fea2ebc4e50> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 01:06:29 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:29 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:06:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fea2ebc5660> (5, 2)
12/08/2023 01:06:29 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:06:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fea2ebc7760> (4, 2)
12/08/2023 01:06:29 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:06:29 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:06:29 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:06:31 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fea2ebc4eb0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:06:31 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:31 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 01:06:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fea2ebc5ab0> (5, 3)
12/08/2023 01:06:31 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 01:06:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fea2ebc77c0> (4, 3)
12/08/2023 01:06:31 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 01:06:31 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 01:06:31 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 01:06:44 PM Launching Main.py
12/08/2023 01:06:45 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0dc0> moves and attacks before: ([], [])
12/08/2023 01:06:45 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:45 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 01:06:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc15a0> (5, 1)
12/08/2023 01:06:45 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 01:06:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc3700> (4, 1)
12/08/2023 01:06:45 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 01:06:45 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 01:06:45 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 01:06:45 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0e50> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 01:06:45 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:45 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:06:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc1660> (5, 2)
12/08/2023 01:06:45 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:06:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc3760> (4, 2)
12/08/2023 01:06:45 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:06:45 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:06:45 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:06:46 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0eb0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:06:46 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:46 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 01:06:46 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:46 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc1ab0> (5, 3)
12/08/2023 01:06:46 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 01:06:46 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:46 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc37c0> (4, 3)
12/08/2023 01:06:46 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 01:06:46 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 01:06:46 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 01:06:46 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0ee0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 01:06:46 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:46 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 01:06:46 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:46 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc2980> (5, 4)
12/08/2023 01:06:46 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 01:06:46 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:46 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc06d0> (4, 4)
12/08/2023 01:06:46 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 01:06:46 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:46 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:47 PM RenderPossibleMoves(): choosen figure: <classes.piece.Queen object at 0x7faa60fc2ef0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:47 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/08/2023 01:06:47 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0ee0> moves and attacks before: ([], [])
12/08/2023 01:06:47 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:47 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 01:06:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc2980> (5, 4)
12/08/2023 01:06:47 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 01:06:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc06d0> (4, 4)
12/08/2023 01:06:47 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 01:06:47 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:47 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:48 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0eb0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:48 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:48 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 01:06:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc1ab0> (5, 3)
12/08/2023 01:06:48 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 01:06:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc37c0> (4, 3)
12/08/2023 01:06:48 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 01:06:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 01:06:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 01:06:48 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0e50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 01:06:48 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:48 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:06:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc1660> (5, 2)
12/08/2023 01:06:48 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:06:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc3760> (4, 2)
12/08/2023 01:06:48 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:06:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:06:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:06:49 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0dc0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:06:49 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:49 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 01:06:49 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc15a0> (5, 1)
12/08/2023 01:06:49 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 01:06:49 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc3700> (4, 1)
12/08/2023 01:06:49 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 01:06:49 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 01:06:49 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 01:06:49 PM RenderPossibleMoves(): choosen figure: <classes.piece.Rock object at 0x7faa60fc1cc0> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 01:06:49 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/08/2023 01:06:50 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc2500> moves and attacks before: ([], [])
12/08/2023 01:06:50 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:50 PM Pawn Figure info: (6, 0, 'w', 'p')
12/08/2023 01:06:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc3520> (5, 0)
12/08/2023 01:06:50 PM Pawn (5, 0) is empty appended moves [(5, 0)]
12/08/2023 01:06:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc0fa0> (4, 0)
12/08/2023 01:06:50 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
12/08/2023 01:06:50 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
12/08/2023 01:06:50 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
12/08/2023 01:06:50 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0dc0> moves and attacks before: ([(5, 0), (4, 0)], [])
12/08/2023 01:06:50 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:50 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 01:06:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc15a0> (5, 1)
12/08/2023 01:06:50 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 01:06:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc3700> (4, 1)
12/08/2023 01:06:50 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 01:06:50 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 01:06:50 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 01:06:51 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0e50> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 01:06:51 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:51 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc1660> (5, 2)
12/08/2023 01:06:51 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc3760> (4, 2)
12/08/2023 01:06:51 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:06:51 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:06:51 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:06:51 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0eb0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:06:51 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:51 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc1ab0> (5, 3)
12/08/2023 01:06:51 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc37c0> (4, 3)
12/08/2023 01:06:51 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 01:06:51 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 01:06:51 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 01:06:51 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0ee0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 01:06:51 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:51 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc2980> (5, 4)
12/08/2023 01:06:51 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc06d0> (4, 4)
12/08/2023 01:06:51 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 01:06:51 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:51 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:51 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0460> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 01:06:51 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:51 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc29e0> (5, 5)
12/08/2023 01:06:51 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc14e0> (4, 5)
12/08/2023 01:06:51 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:06:51 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:06:51 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:06:52 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc0f40> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:06:52 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:52 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 01:06:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc2a10> (5, 6)
12/08/2023 01:06:52 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 01:06:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc1510> (4, 6)
12/08/2023 01:06:52 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 01:06:52 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 01:06:52 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 01:06:52 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7faa60fc1690> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 01:06:52 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:06:52 PM Pawn Figure info: (6, 7, 'w', 'p')
12/08/2023 01:06:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc2a70> (5, 7)
12/08/2023 01:06:52 PM Pawn (5, 7) is empty appended moves [(5, 7)]
12/08/2023 01:06:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:06:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7faa60fc1330> (4, 7)
12/08/2023 01:06:52 PM Pawn (4, 7) is empty appended moves [(5, 7), (4, 7)]
12/08/2023 01:06:52 PM Pawn ReturnPossibleMove(): returning values: ([(5, 7), (4, 7)], [])
12/08/2023 01:06:52 PM RenderPossibleMoves(): moves and attacks after: ([(5, 7), (4, 7)], [])
12/08/2023 01:07:59 PM Launching Main.py
12/08/2023 01:08:01 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f29785c1960> moves and attacks before: ([], [])
12/08/2023 01:08:01 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:08:01 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:08:01 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:08:01 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f29785c2740> (5, 2)
12/08/2023 01:08:01 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:08:01 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:08:01 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f29785c1240> (4, 2)
12/08/2023 01:08:01 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:08:01 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:08:01 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:17 PM Launching Main.py
12/08/2023 01:21:18 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([], [])
12/08/2023 01:21:18 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:21:18 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:21:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:21:18 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:21:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:21:18 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:21:18 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:18 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:21 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:21 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:21:21 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:21:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:21:21 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:21:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:21:21 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:21:21 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:21 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:21:23 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:21:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:21:23 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:21:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:21:23 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:21:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:25 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:21:25 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:21:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:21:25 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:21:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:21:25 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:21:25 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:28 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:21:28 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:21:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:21:28 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:21:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:21:28 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:21:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:30 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:30 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:21:30 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:21:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:21:30 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:21:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:21:30 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:21:30 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:30 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:34 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:34 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:21:34 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:21:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:21:34 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:21:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:21:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:21:34 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:21:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:21:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:41 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb9bd0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:41 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:26:41 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 01:26:41 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb9570> (5, 1)
12/08/2023 01:26:41 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 01:26:41 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb670> (4, 1)
12/08/2023 01:26:41 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 01:26:41 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 01:26:41 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 01:26:42 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb9bd0> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 01:26:42 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:26:42 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 01:26:42 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb9570> (5, 1)
12/08/2023 01:26:42 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 01:26:42 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb670> (4, 1)
12/08/2023 01:26:42 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 01:26:42 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 01:26:42 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 01:26:42 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb9bd0> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 01:26:42 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:26:42 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 01:26:42 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb9570> (5, 1)
12/08/2023 01:26:42 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 01:26:42 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb670> (4, 1)
12/08/2023 01:26:42 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 01:26:42 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 01:26:42 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 01:26:43 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 01:26:43 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:26:43 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:26:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:26:43 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:26:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:26:43 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:26:43 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:43 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:44 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:44 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:26:44 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:26:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:26:44 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:26:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:26:44 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:26:44 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:44 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:44 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:44 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:26:44 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:26:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:26:44 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:26:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:26:44 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:26:44 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:44 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:45 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:45 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:26:45 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:26:45 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:26:45 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:26:45 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:45 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:45 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:45 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:26:45 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:26:45 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:26:45 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:26:45 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:45 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:45 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:45 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:26:45 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:26:45 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:26:45 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:26:45 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:45 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:45 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:45 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:26:45 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:26:45 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:26:45 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:26:45 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:45 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:46 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fcc58bb83d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:46 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:26:46 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:26:46 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:46 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bb99c0> (5, 2)
12/08/2023 01:26:46 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:26:46 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:26:46 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fcc58bbb6d0> (4, 2)
12/08/2023 01:26:46 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:26:46 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:26:46 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:28 PM Launching Main.py
12/08/2023 01:28:29 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([], [])
12/08/2023 01:28:29 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:29 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:29 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:29 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:29 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:29 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:30 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:30 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:30 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:30 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:30 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:30 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:30 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:31 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:31 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:31 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:31 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:31 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:31 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:31 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:34 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:34 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:34 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:34 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:34 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:34 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:34 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:34 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:34 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:34 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:35 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:35 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:35 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:35 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:35 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:35 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:35 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:36 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:36 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:36 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:36 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:36 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:36 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:36 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:37 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:37 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:37 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:37 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:37 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:37 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:37 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:42 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:42 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:42 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:42 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:42 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:42 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:42 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:42 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:42 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:43 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:43 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:43 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:43 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:43 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:43 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:43 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:45 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:45 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:45 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:45 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:45 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:45 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:45 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:52 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:52 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:52 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:52 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:52 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:52 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:52 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:53 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:53 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:53 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:53 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:53 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:53 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:53 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:53 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:53 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:53 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:53 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:53 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:53 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:53 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:54 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:28:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:28:54 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:28:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:28:54 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:28:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:55 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc4220> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:28:55 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:55 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 01:28:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d70> (5, 3)
12/08/2023 01:28:55 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 01:28:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc5870> (4, 3)
12/08/2023 01:28:55 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 01:28:55 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 01:28:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 01:28:56 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc4220> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 01:28:56 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:56 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 01:28:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d70> (5, 3)
12/08/2023 01:28:56 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 01:28:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc5870> (4, 3)
12/08/2023 01:28:56 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 01:28:56 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 01:28:56 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 01:28:57 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc4220> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 01:28:57 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:28:57 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 01:28:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d70> (5, 3)
12/08/2023 01:28:57 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 01:28:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:28:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc5870> (4, 3)
12/08/2023 01:28:57 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 01:28:57 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 01:28:57 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 01:29:02 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5090> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 01:29:02 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:29:02 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:29:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d10> (5, 2)
12/08/2023 01:29:02 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:29:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4a60> (4, 2)
12/08/2023 01:29:02 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:29:02 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:29:02 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:29:04 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc4220> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:29:04 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:29:04 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 01:29:04 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6d70> (5, 3)
12/08/2023 01:29:04 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 01:29:04 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc5870> (4, 3)
12/08/2023 01:29:04 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 01:29:04 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 01:29:04 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 01:29:05 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5a80> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 01:29:05 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:29:05 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 01:29:05 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:05 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6da0> (5, 4)
12/08/2023 01:29:05 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 01:29:05 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:05 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc58a0> (4, 4)
12/08/2023 01:29:05 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 01:29:05 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 01:29:05 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 01:29:05 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5b10> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 01:29:05 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:29:05 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:29:05 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:05 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6e00> (5, 5)
12/08/2023 01:29:05 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:29:05 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:05 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc56c0> (4, 5)
12/08/2023 01:29:05 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:29:05 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:29:05 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:29:06 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc7340> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:29:06 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:29:06 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 01:29:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc6c50> (5, 6)
12/08/2023 01:29:06 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 01:29:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4970> (4, 6)
12/08/2023 01:29:06 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 01:29:06 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 01:29:06 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 01:29:07 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5f00> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 01:29:07 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:29:07 PM Pawn Figure info: (6, 0, 'w', 'p')
12/08/2023 01:29:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4df0> (5, 0)
12/08/2023 01:29:07 PM Pawn (5, 0) is empty appended moves [(5, 0)]
12/08/2023 01:29:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc7a00> (4, 0)
12/08/2023 01:29:07 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
12/08/2023 01:29:07 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
12/08/2023 01:29:07 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
12/08/2023 01:29:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5f00> moves and attacks before: ([(5, 0), (4, 0)], [])
12/08/2023 01:29:08 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:29:08 PM Pawn Figure info: (6, 0, 'w', 'p')
12/08/2023 01:29:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4df0> (5, 0)
12/08/2023 01:29:08 PM Pawn (5, 0) is empty appended moves [(5, 0)]
12/08/2023 01:29:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc7a00> (4, 0)
12/08/2023 01:29:08 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
12/08/2023 01:29:08 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
12/08/2023 01:29:08 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
12/08/2023 01:29:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5f00> moves and attacks before: ([(5, 0), (4, 0)], [])
12/08/2023 01:29:08 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:29:08 PM Pawn Figure info: (6, 0, 'w', 'p')
12/08/2023 01:29:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4df0> (5, 0)
12/08/2023 01:29:08 PM Pawn (5, 0) is empty appended moves [(5, 0)]
12/08/2023 01:29:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc7a00> (4, 0)
12/08/2023 01:29:08 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
12/08/2023 01:29:08 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
12/08/2023 01:29:08 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
12/08/2023 01:29:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc5f00> moves and attacks before: ([(5, 0), (4, 0)], [])
12/08/2023 01:29:08 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:29:08 PM Pawn Figure info: (6, 0, 'w', 'p')
12/08/2023 01:29:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc4df0> (5, 0)
12/08/2023 01:29:08 PM Pawn (5, 0) is empty appended moves [(5, 0)]
12/08/2023 01:29:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc7a00> (4, 0)
12/08/2023 01:29:08 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
12/08/2023 01:29:08 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
12/08/2023 01:29:08 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
12/08/2023 01:29:09 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f8481bc41c0> moves and attacks before: ([(5, 0), (4, 0)], [])
12/08/2023 01:29:09 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:29:09 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 01:29:09 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc5e40> (5, 1)
12/08/2023 01:29:09 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 01:29:09 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f8481bc50c0> (4, 1)
12/08/2023 01:29:09 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 01:29:09 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 01:29:09 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 01:29:29 PM Launching Main.py
12/08/2023 01:29:31 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f07edfc4280> moves and attacks before: ([], [])
12/08/2023 01:29:31 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:29:31 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 01:29:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f07edfc5ea0> (5, 1)
12/08/2023 01:29:31 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 01:29:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:29:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f07edfc5180> (4, 1)
12/08/2023 01:29:31 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 01:29:31 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 01:29:31 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 01:30:25 PM Launching Main.py
12/08/2023 01:30:26 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f2a375c0280> moves and attacks before: ([], [])
12/08/2023 01:30:26 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:30:26 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 01:30:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:30:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f2a375c1ea0> (5, 1)
12/08/2023 01:30:26 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 01:30:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:30:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f2a375c1180> (4, 1)
12/08/2023 01:30:26 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 01:30:26 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 01:30:26 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 01:35:33 PM Launching Main.py
12/08/2023 01:35:34 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fba96dbd2d0> moves and attacks before: ([], [])
12/08/2023 01:35:34 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:35:34 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:35:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:35:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fba96dbed70> (5, 2)
12/08/2023 01:35:34 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:35:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:35:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fba96dbc070> (4, 2)
12/08/2023 01:35:34 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:35:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:35:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:35:53 PM Launching Main.py
12/08/2023 01:35:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fb9369bc280> moves and attacks before: ([], [])
12/08/2023 01:35:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:35:54 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 01:35:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:35:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fb9369bdea0> (5, 1)
12/08/2023 01:35:54 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 01:35:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:35:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fb9369bd180> (4, 1)
12/08/2023 01:35:54 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 01:35:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 01:35:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 01:39:49 PM Launching Main.py
12/08/2023 01:39:50 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f921d1c19c0> moves and attacks before: ([], [])
12/08/2023 01:39:50 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:39:50 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:39:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:39:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f921d1c2e60> (5, 5)
12/08/2023 01:39:50 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:39:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:39:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f921d1c1720> (4, 5)
12/08/2023 01:39:50 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:39:50 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:39:50 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:40:01 PM Launching Main.py
12/08/2023 01:40:02 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fee22fbb340> moves and attacks before: ([], [])
12/08/2023 01:40:02 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:40:02 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 01:40:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fee22fbac50> (5, 6)
12/08/2023 01:40:02 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 01:40:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fee22fb8970> (4, 6)
12/08/2023 01:40:02 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 01:40:02 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:02 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:03 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fee22fbb340> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:03 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:40:03 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 01:40:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fee22fbac50> (5, 6)
12/08/2023 01:40:03 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 01:40:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fee22fb8970> (4, 6)
12/08/2023 01:40:03 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 01:40:03 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:03 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:03 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fee22fbb340> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:03 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:40:03 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 01:40:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fee22fbac50> (5, 6)
12/08/2023 01:40:03 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 01:40:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fee22fb8970> (4, 6)
12/08/2023 01:40:03 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 01:40:03 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:03 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:04 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fee22fbb340> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:04 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:40:04 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 01:40:04 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fee22fbac50> (5, 6)
12/08/2023 01:40:04 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 01:40:04 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fee22fb8970> (4, 6)
12/08/2023 01:40:04 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 01:40:04 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:04 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:04 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fee22fbb340> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:04 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:40:04 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 01:40:04 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fee22fbac50> (5, 6)
12/08/2023 01:40:04 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 01:40:04 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fee22fb8970> (4, 6)
12/08/2023 01:40:04 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 01:40:04 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:04 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:04 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fee22fbb340> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:04 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:40:04 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 01:40:04 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fee22fbac50> (5, 6)
12/08/2023 01:40:04 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 01:40:04 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fee22fb8970> (4, 6)
12/08/2023 01:40:04 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 01:40:04 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:04 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 01:40:15 PM Launching Main.py
12/08/2023 01:40:16 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9a2e3b9ae0> moves and attacks before: ([], [])
12/08/2023 01:40:16 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:40:16 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 01:40:16 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:16 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9a2e3badd0> (5, 5)
12/08/2023 01:40:16 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 01:40:16 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:16 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9a2e3b98d0> (4, 5)
12/08/2023 01:40:16 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 01:40:16 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 01:40:16 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 01:40:17 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9a2e3b9a50> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 01:40:17 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:40:17 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 01:40:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9a2e3bada0> (5, 4)
12/08/2023 01:40:17 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 01:40:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9a2e3b98a0> (4, 4)
12/08/2023 01:40:17 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 01:40:17 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 01:40:17 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 01:40:17 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9a2e3b92a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 01:40:17 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:40:17 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 01:40:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9a2e3bad40> (5, 3)
12/08/2023 01:40:17 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 01:40:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9a2e3b8040> (4, 3)
12/08/2023 01:40:17 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 01:40:17 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 01:40:17 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 01:40:18 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9a2e3b8250> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 01:40:18 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:40:18 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:40:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9a2e3b9e70> (5, 2)
12/08/2023 01:40:18 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:40:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9a2e3b9150> (4, 2)
12/08/2023 01:40:18 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:40:18 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:40:18 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 01:40:20 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9a2e3b8250> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 01:40:20 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 01:40:20 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 01:40:20 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9a2e3b9e70> (5, 2)
12/08/2023 01:40:20 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 01:40:20 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 01:40:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9a2e3b9150> (4, 2)
12/08/2023 01:40:20 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 01:40:20 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 01:40:20 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:03:05 PM Launching Main.py
12/08/2023 02:03:07 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f78e1bc1a50> moves and attacks before: ([], [])
12/08/2023 02:03:07 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:03:07 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:03:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:03:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f78e1bc2da0> (5, 4)
12/08/2023 02:03:07 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:03:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:03:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f78e1bc18a0> (4, 4)
12/08/2023 02:03:07 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:03:07 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:03:07 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:03:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f78e1bc1ae0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:03:08 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:03:08 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 02:03:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:03:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f78e1bc2dd0> (5, 5)
12/08/2023 02:03:08 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 02:03:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:03:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f78e1bc18d0> (4, 5)
12/08/2023 02:03:08 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 02:03:08 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 02:03:08 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 02:03:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f78e1bc1a50> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 02:03:08 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:03:08 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:03:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:03:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f78e1bc2da0> (5, 4)
12/08/2023 02:03:08 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:03:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:03:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f78e1bc18a0> (4, 4)
12/08/2023 02:03:08 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:03:08 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:03:08 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:03:11 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f78e1bc1a50> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:03:11 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:03:11 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:03:11 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:03:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f78e1bc2da0> (5, 4)
12/08/2023 02:03:11 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:03:11 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:03:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f78e1bc18a0> (4, 4)
12/08/2023 02:03:11 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:03:11 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:03:11 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:03:12 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f78e1bc1a50> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:03:12 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:03:12 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:03:12 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:03:12 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f78e1bc2da0> (5, 4)
12/08/2023 02:03:12 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:03:12 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:03:12 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f78e1bc18a0> (4, 4)
12/08/2023 02:03:12 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:03:12 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:03:12 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:07:14 PM Launching Main.py
12/08/2023 02:11:00 PM Launching Main.py
12/08/2023 02:11:02 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f942a1c9b40> moves and attacks before: ([], [])
12/08/2023 02:11:02 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:11:02 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:11:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:11:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f942a1c9b10> (5, 2)
12/08/2023 02:11:02 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:11:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:11:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f942a1c8c10> (4, 2)
12/08/2023 02:11:02 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:11:02 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:02 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:02 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f942a1c9b40> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:02 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:11:02 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:11:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:11:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f942a1c9b10> (5, 2)
12/08/2023 02:11:02 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:11:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:11:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f942a1c8c10> (4, 2)
12/08/2023 02:11:02 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:11:02 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:02 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:13 PM Launching Main.py
12/08/2023 02:11:17 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f20ac5b5b40> moves and attacks before: ([], [])
12/08/2023 02:11:17 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:11:17 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:11:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:11:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f20ac5b5b10> (5, 2)
12/08/2023 02:11:17 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:11:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:11:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f20ac5b4c10> (4, 2)
12/08/2023 02:11:17 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:11:17 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:17 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f20ac5b5b40> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:11:24 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:11:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:11:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f20ac5b5b10> (5, 2)
12/08/2023 02:11:24 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:11:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:11:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f20ac5b4c10> (4, 2)
12/08/2023 02:11:24 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:11:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:26 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f20ac5b5b40> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:26 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:11:26 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:11:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:11:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f20ac5b5b10> (5, 2)
12/08/2023 02:11:26 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:11:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:11:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f20ac5b4c10> (4, 2)
12/08/2023 02:11:26 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:11:26 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:26 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:30 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f20ac5b5b40> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:30 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:11:30 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:11:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:11:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f20ac5b5b10> (5, 2)
12/08/2023 02:11:30 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:11:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:11:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f20ac5b4c10> (4, 2)
12/08/2023 02:11:30 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:11:30 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:30 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:11:37 PM Launching Main.py
12/08/2023 02:21:23 PM Launching Main.py
12/08/2023 02:21:47 PM Launching Main.py
12/08/2023 02:22:12 PM Launching Main.py
12/08/2023 02:24:26 PM Launching Main.py
12/08/2023 02:24:43 PM Launching Main.py
12/08/2023 02:26:14 PM Launching Main.py
12/08/2023 02:27:04 PM Launching Main.py
12/08/2023 02:27:13 PM Launching Main.py
12/08/2023 02:27:18 PM Launching Main.py
12/08/2023 02:27:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa6221beb00> moves and attacks before: ([], [])
12/08/2023 02:27:22 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:27:22 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:27:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:27:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa6221bf010> (5, 4)
12/08/2023 02:27:22 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:27:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:27:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa6221be9e0> (4, 4)
12/08/2023 02:27:22 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:27:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:27:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:27:43 PM Launching Main.py
12/08/2023 02:28:12 PM Launching Main.py
12/08/2023 02:35:43 PM Launching Main.py
12/08/2023 02:35:53 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f4cb35bb8e0> moves and attacks before: ([], [])
12/08/2023 02:35:53 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:35:53 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 02:35:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:35:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f4cb35b8760> (5, 5)
12/08/2023 02:35:53 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 02:35:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:35:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f4cb35baf20> (4, 5)
12/08/2023 02:35:53 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 02:35:53 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 02:35:53 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 02:36:32 PM Launching Main.py
12/08/2023 02:36:43 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5f417bfdf0> moves and attacks before: ([], [])
12/08/2023 02:36:43 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:36:43 PM Pawn Figure info: (6, 0, 'w', 'p')
12/08/2023 02:36:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:36:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5f417bf010> (5, 0)
12/08/2023 02:36:43 PM Pawn (5, 0) is empty appended moves [(5, 0)]
12/08/2023 02:36:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:36:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5f417be9e0> (4, 0)
12/08/2023 02:36:43 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
12/08/2023 02:36:43 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
12/08/2023 02:36:43 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
12/08/2023 02:36:43 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f5f417bedd0> moves and attacks before: ([(5, 0), (4, 0)], [])
12/08/2023 02:36:43 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:36:43 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 02:36:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:36:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5f417bc970> (5, 1)
12/08/2023 02:36:43 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 02:36:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:36:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f5f417bf070> (4, 1)
12/08/2023 02:36:43 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 02:36:43 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 02:36:43 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 02:37:04 PM Launching Main.py
12/08/2023 02:37:10 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c78e0> moves and attacks before: ([], [])
12/08/2023 02:37:10 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:10 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 02:37:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6200> (5, 3)
12/08/2023 02:37:10 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 02:37:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c7100> (4, 3)
12/08/2023 02:37:10 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 02:37:10 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 02:37:10 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 02:37:10 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c78e0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 02:37:10 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:10 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 02:37:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6200> (5, 3)
12/08/2023 02:37:10 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 02:37:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c7100> (4, 3)
12/08/2023 02:37:10 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 02:37:10 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 02:37:10 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 02:37:16 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 02:37:16 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:16 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:16 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:16 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:16 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:16 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:16 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:16 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:16 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:16 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:16 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:16 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:16 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:16 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:16 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:16 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:16 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:16 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:16 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:16 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:16 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:20 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:20 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:20 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:20 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:20 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:20 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:20 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:20 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:20 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:22 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:22 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:22 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:22 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:23 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:23 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:23 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:23 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:23 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:23 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:24 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:24 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:24 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:24 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:24 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:24 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:24 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:24 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:24 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:25 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:25 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:25 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:25 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:25 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:25 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:25 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:25 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:25 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:25 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:25 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:25 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:25 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:25 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:25 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c7910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:25 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:37:25 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c47f0> (5, 4)
12/08/2023 02:37:25 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:37:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c6f50> (4, 4)
12/08/2023 02:37:25 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:37:25 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:37:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:38:47 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc4603c6dd0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:38:47 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:38:47 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 02:38:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:38:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c4970> (5, 1)
12/08/2023 02:38:47 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 02:38:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:38:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc4603c7070> (4, 1)
12/08/2023 02:38:47 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 02:38:47 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 02:38:47 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 02:41:41 PM Launching Main.py
12/08/2023 02:41:44 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f25fd1c3b80> moves and attacks before: ([], [])
12/08/2023 02:41:44 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:41:44 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:41:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c2470> (5, 2)
12/08/2023 02:41:44 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:41:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c3250> (4, 2)
12/08/2023 02:41:44 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:41:44 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:44 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:45 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f25fd1c3b80> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:45 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:41:45 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:41:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c2470> (5, 2)
12/08/2023 02:41:45 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:41:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c3250> (4, 2)
12/08/2023 02:41:45 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:41:45 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:45 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:53 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f25fd1c0100> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:53 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:41:53 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 02:41:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c0d30> (5, 3)
12/08/2023 02:41:53 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 02:41:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c32b0> (4, 3)
12/08/2023 02:41:53 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 02:41:53 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 02:41:53 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 02:41:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f25fd1c3b80> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 02:41:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:41:54 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c2470> (5, 2)
12/08/2023 02:41:54 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c3250> (4, 2)
12/08/2023 02:41:54 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:41:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f25fd1c3b80> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:41:54 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c2470> (5, 2)
12/08/2023 02:41:54 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c3250> (4, 2)
12/08/2023 02:41:54 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:41:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f25fd1c3b80> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:41:54 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c2470> (5, 2)
12/08/2023 02:41:54 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c3250> (4, 2)
12/08/2023 02:41:54 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:41:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f25fd1c3b80> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:41:54 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c2470> (5, 2)
12/08/2023 02:41:54 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:41:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f25fd1c3250> (4, 2)
12/08/2023 02:41:54 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:41:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:41:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:44:06 PM Launching Main.py
12/08/2023 02:44:16 PM Launching Main.py
12/08/2023 02:44:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fc6bb3c0d00> moves and attacks before: ([], [])
12/08/2023 02:44:22 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:44:22 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 02:44:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:44:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc6bb3c15a0> (5, 3)
12/08/2023 02:44:22 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 02:44:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:44:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fc6bb3c0760> (4, 3)
12/08/2023 02:44:22 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 02:44:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 02:44:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 02:45:03 PM Launching Main.py
12/08/2023 02:45:54 PM Launching Main.py
12/08/2023 02:45:58 PM Launching Main.py
12/08/2023 02:47:10 PM Launching Main.py
12/08/2023 02:47:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13adfc0> moves and attacks before: ([], [])
12/08/2023 02:47:19 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:19 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:47:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13adde0> (5, 2)
12/08/2023 02:47:19 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:47:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ae470> (4, 2)
12/08/2023 02:47:19 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:47:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:47:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:47:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13adfc0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 02:47:19 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:19 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 02:47:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13adde0> (5, 2)
12/08/2023 02:47:19 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 02:47:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ae470> (4, 2)
12/08/2023 02:47:19 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 02:47:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 02:47:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 02:47:20 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae710> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 02:47:20 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:20 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 02:47:20 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ade70> (5, 3)
12/08/2023 02:47:20 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 02:47:20 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad570> (4, 3)
12/08/2023 02:47:20 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 02:47:20 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 02:47:20 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 02:47:21 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 02:47:21 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:21 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:21 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:21 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:21 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:21 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:22 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:22 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:22 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:22 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:22 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:22 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:22 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:22 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:22 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:22 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:22 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:22 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:23 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:23 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:23 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:23 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:23 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:23 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:23 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:23 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:23 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:23 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:23 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:23 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:23 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:23 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:23 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:23 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:23 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:23 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:23 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:23 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:23 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:23 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:23 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:23 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:24 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:24 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:24 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:24 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:24 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:24 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:24 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:24 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:24 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:24 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:24 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:24 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:24 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:24 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:24 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:24 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:24 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:24 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:24 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:24 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:24 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:24 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:24 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:24 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae7a0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:25 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:25 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13aded0> (5, 4)
12/08/2023 02:47:25 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad5a0> (4, 4)
12/08/2023 02:47:25 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:47:25 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae710> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:47:25 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:25 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ade70> (5, 3)
12/08/2023 02:47:25 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad570> (4, 3)
12/08/2023 02:47:25 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 02:47:25 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 02:47:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 02:47:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae710> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 02:47:25 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:25 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ade70> (5, 3)
12/08/2023 02:47:25 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad570> (4, 3)
12/08/2023 02:47:25 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 02:47:25 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 02:47:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 02:47:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f6ca13ae710> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 02:47:25 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:47:25 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ade70> (5, 3)
12/08/2023 02:47:25 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:47:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f6ca13ad570> (4, 3)
12/08/2023 02:47:25 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 02:47:25 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 02:47:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 02:56:46 PM Launching Main.py
12/08/2023 02:56:49 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([], [])
12/08/2023 02:56:49 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:49 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:49 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:49 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:49 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:49 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:49 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:49 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:50 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:50 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:50 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:50 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:50 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:50 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:50 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:50 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:50 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:50 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:50 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:50 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:50 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:50 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:51 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:51 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:51 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:51 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:51 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:51 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:51 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:52 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:52 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:52 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:52 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:52 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:52 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:52 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:54 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:54 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:54 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:54 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:54 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:54 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:54 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:54 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:54 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:55 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:55 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:55 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:55 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:55 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:55 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:55 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:55 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:55 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:55 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:55 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:55 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:55 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:55 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:55 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:55 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:55 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:55 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:55 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:55 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:55 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:55 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:55 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:55 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:56 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:56 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:56 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:56 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:56 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:56 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:56 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:56 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:56 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:56 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:56 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:56 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:56 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:56 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:56 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:56 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:56 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:56 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:56 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:56 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:56 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:57 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:57 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:57 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:57 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:57 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:57 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:57 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:57 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:57 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:57 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:57 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:57 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:57 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:57 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:57 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:57 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:57 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:57 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:57 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:57 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:57 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:57 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:57 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 02:56:57 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 02:56:57 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 02:56:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 02:56:57 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 02:56:57 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 02:56:57 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:00:59 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:00:59 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:00:59 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:00:59 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:00:59 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 03:00:59 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:00:59 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:00:59 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 03:00:59 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:00:59 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:00:59 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:01:00 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f907d5b8e20> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:01:00 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:01:00 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:01:00 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:01:00 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b9ff0> (5, 4)
12/08/2023 03:01:00 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:01:00 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:01:00 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f907d5b96f0> (4, 4)
12/08/2023 03:01:00 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:01:00 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:01:00 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:01:57 PM Launching Main.py
12/08/2023 03:02:53 PM Launching Main.py
12/08/2023 03:02:55 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db40a0> moves and attacks before: ([], [])
12/08/2023 03:02:55 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:02:55 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:02:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:02:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4fd0> (5, 2)
12/08/2023 03:02:55 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:02:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:02:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db42b0> (4, 2)
12/08/2023 03:02:55 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:02:55 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:56 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db40a0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:56 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:02:56 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:02:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:02:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4fd0> (5, 2)
12/08/2023 03:02:56 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:02:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:02:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db42b0> (4, 2)
12/08/2023 03:02:56 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:02:56 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:56 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:56 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db40a0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:56 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:02:56 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:02:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:02:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4fd0> (5, 2)
12/08/2023 03:02:56 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:02:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:02:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db42b0> (4, 2)
12/08/2023 03:02:56 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:02:56 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:56 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:57 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db40a0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:57 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:02:57 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:02:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:02:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4fd0> (5, 2)
12/08/2023 03:02:57 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:02:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:02:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db42b0> (4, 2)
12/08/2023 03:02:57 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:02:57 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:57 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:57 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db40a0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:57 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:02:57 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:02:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:02:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4fd0> (5, 2)
12/08/2023 03:02:57 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:02:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:02:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db42b0> (4, 2)
12/08/2023 03:02:57 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:02:57 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:02:57 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:03:02 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db40a0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:03:02 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:02 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:03:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4fd0> (5, 2)
12/08/2023 03:03:02 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:03:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db42b0> (4, 2)
12/08/2023 03:03:02 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:03:02 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:03:02 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:03:02 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db40a0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:03:02 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:02 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:03:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4fd0> (5, 2)
12/08/2023 03:03:02 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:03:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db42b0> (4, 2)
12/08/2023 03:03:02 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:03:02 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:03:02 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:03:03 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db40a0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:03:03 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:03 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:03:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4fd0> (5, 2)
12/08/2023 03:03:03 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:03:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db42b0> (4, 2)
12/08/2023 03:03:03 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:03:03 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:03:03 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:03:03 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:03:03 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:03 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:03 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:03 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:03 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:03 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:06 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:06 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:06 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:06 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:06 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:06 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:06 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:06 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:06 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:06 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:06 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:06 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:06 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:06 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:06 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:06 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:06 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:06 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:06 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:06 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:06 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:06 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:06 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:06 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:06 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:06 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:06 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:06 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:07 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:07 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:07 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:07 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:07 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:07 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:07 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:07 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:07 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:07 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:07 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:07 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:07 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:07 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:07 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:07 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:07 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:07 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:07 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:07 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:07 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:07 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:07 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:07 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:07 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:07 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:07 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:07 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:13 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db6890> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:13 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:13 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:03:13 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:13 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5f30> (5, 4)
12/08/2023 03:03:13 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:03:13 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:13 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5810> (4, 4)
12/08/2023 03:03:13 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:03:13 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:03:13 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:03:26 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:03:26 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:26 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:26 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:26 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:26 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:26 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:27 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:27 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:27 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:27 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:27 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:27 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:27 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:27 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:27 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:27 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:27 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:27 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:27 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:27 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:27 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:27 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:27 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:27 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:28 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:28 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:28 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:28 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:28 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:28 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:28 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:28 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:28 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:28 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:28 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:28 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:28 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:28 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:28 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:28 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:28 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:28 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:28 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:28 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:28 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:28 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:28 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:28 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:29 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db67d0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:29 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:29 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:03:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db5000> (5, 3)
12/08/2023 03:03:29 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:03:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4160> (4, 3)
12/08/2023 03:03:29 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:03:29 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:29 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:49 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fa065db40a0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:03:49 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:03:49 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:03:49 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db4fd0> (5, 2)
12/08/2023 03:03:49 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:03:49 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:03:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fa065db42b0> (4, 2)
12/08/2023 03:03:49 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:03:49 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:03:49 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:04:10 PM RenderPossibleMoves(): choosen figure: <classes.piece.Bishop object at 0x7fa065db7cd0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:04:10 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/08/2023 03:04:51 PM Launching Main.py
12/08/2023 03:04:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe216bc2d40> moves and attacks before: ([], [])
12/08/2023 03:04:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:04:54 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:04:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:04:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe216bc2170> (5, 4)
12/08/2023 03:04:54 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:04:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:04:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe216bc16c0> (4, 4)
12/08/2023 03:04:54 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:04:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:04:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:04:56 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe216bc2d40> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:04:56 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:04:56 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:04:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:04:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe216bc2170> (5, 4)
12/08/2023 03:04:56 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:04:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:04:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe216bc16c0> (4, 4)
12/08/2023 03:04:56 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:04:56 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:04:56 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:05:00 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe216bc28f0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:05:00 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:05:00 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:05:00 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:05:00 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe216bc10c0> (5, 3)
12/08/2023 03:05:00 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:05:00 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:05:00 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe216bc03a0> (4, 3)
12/08/2023 03:05:00 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:05:00 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:05:00 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:05:15 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe216bc2830> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:05:15 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:05:15 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:05:15 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:05:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe216bc0e80> (5, 2)
12/08/2023 03:05:15 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:05:15 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:05:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe216bc0370> (4, 2)
12/08/2023 03:05:15 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:05:15 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:05:15 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:07:04 PM Launching Main.py
12/08/2023 03:07:06 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe358fbc040> moves and attacks before: ([], [])
12/08/2023 03:07:06 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:06 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:07:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe358fbe290> (5, 3)
12/08/2023 03:07:06 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:07:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe358fbd960> (4, 3)
12/08/2023 03:07:06 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:07:06 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:07:06 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:07:07 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe358fbee00> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:07:07 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:07 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:07:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe358fbd1e0> (5, 2)
12/08/2023 03:07:07 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:07:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe358fbc4c0> (4, 2)
12/08/2023 03:07:07 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:07:07 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:07:07 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:07:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe358fbee00> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:07:08 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:08 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:07:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe358fbd1e0> (5, 2)
12/08/2023 03:07:08 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:07:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe358fbc4c0> (4, 2)
12/08/2023 03:07:08 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:07:08 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:07:08 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:07:12 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe358fbee00> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:07:12 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:12 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:07:12 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:12 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe358fbd1e0> (5, 2)
12/08/2023 03:07:12 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:07:12 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:12 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe358fbc4c0> (4, 2)
12/08/2023 03:07:12 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:07:12 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:07:12 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:07:17 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fe358fbee00> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:07:17 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:17 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:07:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe358fbd1e0> (5, 2)
12/08/2023 03:07:17 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:07:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fe358fbc4c0> (4, 2)
12/08/2023 03:07:17 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:07:17 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:07:17 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:07:40 PM Launching Main.py
12/08/2023 03:07:48 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7efddc3bedd0> moves and attacks before: ([], [])
12/08/2023 03:07:48 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:48 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:07:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bd1b0> (5, 3)
12/08/2023 03:07:48 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:07:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bc490> (4, 3)
12/08/2023 03:07:48 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:07:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:07:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:07:49 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7efddc3bedd0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:07:49 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:49 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:07:49 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bd1b0> (5, 3)
12/08/2023 03:07:49 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:07:49 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bc490> (4, 3)
12/08/2023 03:07:49 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:07:49 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:07:49 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:07:49 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7efddc3bedd0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:07:49 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:49 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:07:49 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bd1b0> (5, 3)
12/08/2023 03:07:49 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:07:49 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bc490> (4, 3)
12/08/2023 03:07:49 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:07:49 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:07:49 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:07:50 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7efddc3bfca0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:07:50 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:50 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:07:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3be260> (5, 4)
12/08/2023 03:07:50 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:07:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bd930> (4, 4)
12/08/2023 03:07:50 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:07:50 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:50 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:50 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7efddc3bfca0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:50 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:50 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:07:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3be260> (5, 4)
12/08/2023 03:07:50 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:07:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bd930> (4, 4)
12/08/2023 03:07:50 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:07:50 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:50 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:53 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7efddc3bfca0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:53 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:53 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:07:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3be260> (5, 4)
12/08/2023 03:07:53 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:07:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bd930> (4, 4)
12/08/2023 03:07:53 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:07:53 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:53 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7efddc3bfca0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:54 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:07:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3be260> (5, 4)
12/08/2023 03:07:54 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:07:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bd930> (4, 4)
12/08/2023 03:07:54 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:07:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7efddc3bfca0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:54 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:07:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3be260> (5, 4)
12/08/2023 03:07:54 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:07:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bd930> (4, 4)
12/08/2023 03:07:54 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:07:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:58 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7efddc3bfca0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:58 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:58 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:07:58 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:58 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3be260> (5, 4)
12/08/2023 03:07:58 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:07:58 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:58 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bd930> (4, 4)
12/08/2023 03:07:58 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:07:58 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:58 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:58 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7efddc3bfca0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:58 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:58 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:07:58 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:58 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3be260> (5, 4)
12/08/2023 03:07:58 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:07:58 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:58 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bd930> (4, 4)
12/08/2023 03:07:58 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:07:58 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:58 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:59 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7efddc3bfca0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:59 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:59 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:07:59 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:59 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3be260> (5, 4)
12/08/2023 03:07:59 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:07:59 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:59 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bd930> (4, 4)
12/08/2023 03:07:59 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:07:59 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:59 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:59 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7efddc3bfca0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:59 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:07:59 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:07:59 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:59 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3be260> (5, 4)
12/08/2023 03:07:59 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:07:59 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:07:59 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7efddc3bd930> (4, 4)
12/08/2023 03:07:59 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:07:59 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:07:59 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:08:11 PM Launching Main.py
12/08/2023 03:08:14 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fce1fbb4d60> moves and attacks before: ([], [])
12/08/2023 03:08:14 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:08:14 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:08:14 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:08:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fce1fbb4ee0> (5, 5)
12/08/2023 03:08:14 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:08:14 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:08:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fce1fbb41c0> (4, 5)
12/08/2023 03:08:14 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:08:14 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:08:14 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:08:15 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fce1fbb4d60> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:08:15 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:08:15 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:08:15 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:08:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fce1fbb4ee0> (5, 5)
12/08/2023 03:08:15 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:08:15 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:08:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fce1fbb41c0> (4, 5)
12/08/2023 03:08:15 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:08:15 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:08:15 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:08:15 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fce1fbb4d60> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:08:15 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:08:15 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:08:15 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:08:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fce1fbb4ee0> (5, 5)
12/08/2023 03:08:15 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:08:15 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:08:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fce1fbb41c0> (4, 5)
12/08/2023 03:08:15 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:08:15 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:08:15 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:08:15 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fce1fbb4d60> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:08:15 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:08:15 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:08:15 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:08:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fce1fbb4ee0> (5, 5)
12/08/2023 03:08:15 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:08:15 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:08:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fce1fbb41c0> (4, 5)
12/08/2023 03:08:15 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:08:15 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:08:15 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:08:18 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7fce1fbb6470> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:08:18 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:08:18 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:08:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:08:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fce1fbb5f60> (5, 4)
12/08/2023 03:08:18 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:08:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:08:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7fce1fbb5630> (4, 4)
12/08/2023 03:08:18 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:08:18 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:08:18 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:08:59 PM Launching Main.py
12/08/2023 03:09:02 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b4370> moves and attacks before: ([], [])
12/08/2023 03:09:02 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:02 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:09:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b6050> (5, 2)
12/08/2023 03:09:02 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:09:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5720> (4, 2)
12/08/2023 03:09:02 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:09:02 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:02 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:02 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b40d0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:02 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:02 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:09:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b60b0> (5, 3)
12/08/2023 03:09:02 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:09:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5780> (4, 3)
12/08/2023 03:09:02 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:09:02 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:09:02 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:09:03 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b65f0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:09:03 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:03 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:09:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b4e20> (5, 4)
12/08/2023 03:09:03 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:09:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b4100> (4, 4)
12/08/2023 03:09:03 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:09:03 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:09:03 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:09:04 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b6620> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:09:04 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:04 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:09:04 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5ed0> (5, 5)
12/08/2023 03:09:04 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:09:04 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b6560> (4, 5)
12/08/2023 03:09:04 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:09:04 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:09:04 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:09:04 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b65f0> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:09:04 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:04 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:09:04 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b4e20> (5, 4)
12/08/2023 03:09:04 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:09:04 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b4100> (4, 4)
12/08/2023 03:09:04 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:09:04 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:09:04 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:09:05 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b40d0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:09:05 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:05 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:09:05 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:05 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b60b0> (5, 3)
12/08/2023 03:09:05 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:09:05 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:05 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5780> (4, 3)
12/08/2023 03:09:05 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:09:05 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:09:05 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:09:05 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b4370> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:09:05 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:05 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:09:05 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:05 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b6050> (5, 2)
12/08/2023 03:09:05 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:09:05 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:05 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5720> (4, 2)
12/08/2023 03:09:05 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:09:05 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:05 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:05 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b6980> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:05 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:05 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 03:09:05 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:05 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5e10> (5, 1)
12/08/2023 03:09:05 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 03:09:05 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:05 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b56f0> (4, 1)
12/08/2023 03:09:05 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 03:09:05 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 03:09:05 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 03:09:06 PM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x7f9ba39b6770> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 03:09:06 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:07 PM RenderPossibleMoves(): choosen figure: <classes.piece.Bishop object at 0x7f9ba39b7a90> moves and attacks before: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:07 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/08/2023 03:09:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b4370> moves and attacks before: ([], [])
12/08/2023 03:09:08 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:08 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:09:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b6050> (5, 2)
12/08/2023 03:09:08 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:09:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5720> (4, 2)
12/08/2023 03:09:08 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:09:08 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:08 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b6980> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:08 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:08 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 03:09:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5e10> (5, 1)
12/08/2023 03:09:08 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 03:09:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b56f0> (4, 1)
12/08/2023 03:09:08 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 03:09:08 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 03:09:08 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 03:09:09 PM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x7f9ba39b6770> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 03:09:09 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:17 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b4370> moves and attacks before: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:17 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:17 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:09:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b6050> (5, 2)
12/08/2023 03:09:17 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:09:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5720> (4, 2)
12/08/2023 03:09:17 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:09:17 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:17 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:18 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b4370> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:18 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:18 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:09:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b6050> (5, 2)
12/08/2023 03:09:18 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:09:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5720> (4, 2)
12/08/2023 03:09:18 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:09:18 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:18 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b4370> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:19 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:19 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:09:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b6050> (5, 2)
12/08/2023 03:09:19 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:09:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5720> (4, 2)
12/08/2023 03:09:19 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:09:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:21 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b4370> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:21 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:21 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:09:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b6050> (5, 2)
12/08/2023 03:09:21 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:09:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5720> (4, 2)
12/08/2023 03:09:21 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:09:21 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:21 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x7f9ba39b6770> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b6980> moves and attacks before: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:22 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:22 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 03:09:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5e10> (5, 1)
12/08/2023 03:09:22 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 03:09:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b56f0> (4, 1)
12/08/2023 03:09:22 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 03:09:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 03:09:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 03:09:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x7f9ba39b4370> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 03:09:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:09:23 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:09:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b6050> (5, 2)
12/08/2023 03:09:23 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:09:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:09:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x7f9ba39b5720> (4, 2)
12/08/2023 03:09:23 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:09:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x7f9ba39b6770> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:09:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x7f9ba39b6770> moves and attacks before: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x7f9ba39b6770> moves and attacks before: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x7f9ba39b6770> moves and attacks before: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x7f9ba39b6770> moves and attacks before: ([(5, 2), (5, 0)], [])
12/08/2023 03:09:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (5, 0)], [])
12/08/2023 03:10:39 PM Launching Main.py
12/08/2023 03:15:17 PM Launching Main.py
12/08/2023 03:23:04 PM Launching Main.py
12/08/2023 03:23:05 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156910> moves and attacks before: ([], [])
12/08/2023 03:23:05 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:05 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:23:05 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:05 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E157C10> (5, 4)
12/08/2023 03:23:05 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:23:05 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:05 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155A10> (4, 4)
12/08/2023 03:23:05 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:23:05 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:05 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:06 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:06 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:06 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:06 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:06 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:06 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:06 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:06 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156910> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:06 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:06 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:23:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E157C10> (5, 4)
12/08/2023 03:23:06 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:23:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155A10> (4, 4)
12/08/2023 03:23:06 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:23:06 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:06 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:06 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:06 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:06 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:23:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E157C10> (5, 4)
12/08/2023 03:23:06 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:23:06 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155A10> (4, 4)
12/08/2023 03:23:06 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:23:06 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:06 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:07 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:07 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:07 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:23:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E157C10> (5, 4)
12/08/2023 03:23:07 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:23:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155A10> (4, 4)
12/08/2023 03:23:07 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:23:07 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:07 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:07 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:07 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:07 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:23:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E157C10> (5, 4)
12/08/2023 03:23:07 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:23:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155A10> (4, 4)
12/08/2023 03:23:07 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:23:07 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:07 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:07 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:07 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:07 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:23:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E157C10> (5, 4)
12/08/2023 03:23:07 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:23:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155A10> (4, 4)
12/08/2023 03:23:07 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:23:07 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:07 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:07 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:07 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:07 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:23:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E157C10> (5, 4)
12/08/2023 03:23:07 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:23:07 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155A10> (4, 4)
12/08/2023 03:23:07 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:23:07 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:07 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:08 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:08 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:08 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:08 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:08 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:08 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:08 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:08 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:08 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:08 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:08 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:08 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:08 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:08 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:08 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:08 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:08 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:08 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:09 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:09 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:09 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:09 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:09 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:09 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:09 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:09 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:09 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:09 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:09 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:09 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:09 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:09 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:09 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:09 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:09 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:09 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:09 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:09 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:09 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:09 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:09 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:09 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:09 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:09 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:09 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:09 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:09 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:09 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:09 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:09 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:09 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:09 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:09 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:09 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:09 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156910> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:09 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:09 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:23:09 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E157C10> (5, 4)
12/08/2023 03:23:09 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:23:09 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155A10> (4, 4)
12/08/2023 03:23:09 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:23:09 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:09 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:10 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:10 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:10 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:23:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E157C10> (5, 4)
12/08/2023 03:23:10 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:23:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155A10> (4, 4)
12/08/2023 03:23:10 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:23:10 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:10 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:10 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:10 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:10 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:23:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E157C10> (5, 4)
12/08/2023 03:23:10 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:23:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155A10> (4, 4)
12/08/2023 03:23:10 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:23:10 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:10 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:17 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:17 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:17 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:17 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:17 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:17 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:17 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:18 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:18 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:18 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:18 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:18 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:18 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:18 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:18 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:18 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:18 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:18 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:18 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:18 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:18 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:19 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:19 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:19 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:19 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:19 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:19 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:19 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:19 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:19 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:20 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:20 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:20 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:20 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:20 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:20 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:20 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:20 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:20 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:21 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:21 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:21 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:21 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:21 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:21 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:21 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156910> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:23 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:23:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E157C10> (5, 4)
12/08/2023 03:23:23 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:23:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155A10> (4, 4)
12/08/2023 03:23:23 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:23:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:25 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:25 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:25 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:25 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:25 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:26 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:26 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:26 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:26 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:26 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:26 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:26 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:27 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:27 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:27 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:27 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:27 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:27 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:27 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:27 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:29 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:29 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:29 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:29 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:29 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:29 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:29 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:30 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:30 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:30 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:30 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:30 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:30 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:30 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:31 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:31 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:31 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:31 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:31 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:31 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:31 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:31 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:31 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:31 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:31 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:31 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:31 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:31 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:32 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:32 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:32 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:32 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:32 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:32 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:32 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:32 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:32 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:32 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:32 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:32 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:32 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:32 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:32 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:32 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:32 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:32 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:32 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:32 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:32 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:32 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:32 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:32 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:32 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:32 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:32 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:32 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:32 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:32 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:32 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:32 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:32 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:33 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156910> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:33 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:33 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:23:33 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E157C10> (5, 4)
12/08/2023 03:23:33 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:23:33 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155A10> (4, 4)
12/08/2023 03:23:33 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:23:33 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:33 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:34 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:34 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:34 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:23:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E157C10> (5, 4)
12/08/2023 03:23:34 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:23:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155A10> (4, 4)
12/08/2023 03:23:34 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:23:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:35 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156910> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:35 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:35 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:23:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E157C10> (5, 4)
12/08/2023 03:23:35 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:23:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155A10> (4, 4)
12/08/2023 03:23:35 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:23:35 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:35 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:56 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156D50> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:23:56 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:56 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:23:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E157B50> (5, 5)
12/08/2023 03:23:56 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:23:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E1559D0> (4, 5)
12/08/2023 03:23:56 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:23:56 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:56 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:56 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156D50> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:56 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:56 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:23:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E157B50> (5, 5)
12/08/2023 03:23:56 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:23:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E1559D0> (4, 5)
12/08/2023 03:23:56 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:23:56 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:56 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:56 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156D50> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:56 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:56 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:23:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E157B50> (5, 5)
12/08/2023 03:23:56 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:23:56 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E1559D0> (4, 5)
12/08/2023 03:23:56 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:23:56 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:56 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:57 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156D50> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:57 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:57 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:23:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E157B50> (5, 5)
12/08/2023 03:23:57 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:23:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E1559D0> (4, 5)
12/08/2023 03:23:57 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:23:57 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:57 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:57 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:57 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:57 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:57 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:57 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:57 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:57 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:57 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156B50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:57 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:57 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:23:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E154B10> (5, 3)
12/08/2023 03:23:57 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:23:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E155790> (4, 3)
12/08/2023 03:23:57 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:23:57 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:57 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:58 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156D50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:23:58 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:58 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:23:58 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:58 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E157B50> (5, 5)
12/08/2023 03:23:58 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:23:58 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:58 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E1559D0> (4, 5)
12/08/2023 03:23:58 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:23:58 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:58 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:58 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156D50> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:58 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:58 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:23:58 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:58 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E157B50> (5, 5)
12/08/2023 03:23:58 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:23:58 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:58 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E1559D0> (4, 5)
12/08/2023 03:23:58 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:23:58 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:58 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:58 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156D50> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:58 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:58 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:23:58 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:58 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E157B50> (5, 5)
12/08/2023 03:23:58 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:23:58 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:58 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E1559D0> (4, 5)
12/08/2023 03:23:58 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:23:58 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:58 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:58 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156D50> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:58 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:58 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:23:58 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:58 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E157B50> (5, 5)
12/08/2023 03:23:58 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:23:58 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:58 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E1559D0> (4, 5)
12/08/2023 03:23:58 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:23:58 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:58 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:58 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156D50> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:58 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:58 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:23:58 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:58 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E157B50> (5, 5)
12/08/2023 03:23:58 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:23:58 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:58 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E1559D0> (4, 5)
12/08/2023 03:23:58 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:23:58 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:58 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:59 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A85E156D50> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:59 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:23:59 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:23:59 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:59 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E157B50> (5, 5)
12/08/2023 03:23:59 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:23:59 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:23:59 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A85E1559D0> (4, 5)
12/08/2023 03:23:59 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:23:59 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:23:59 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:24:34 PM Launching Main.py
12/08/2023 03:24:36 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001CA757E8E50> moves and attacks before: ([], [])
12/08/2023 03:24:36 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:24:36 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:24:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:24:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CA757E2A10> (5, 3)
12/08/2023 03:24:36 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:24:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:24:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CA757E2150> (4, 3)
12/08/2023 03:24:36 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:24:36 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:36 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:37 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001CA757E8E50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:37 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:24:37 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:24:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:24:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CA757E2A10> (5, 3)
12/08/2023 03:24:37 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:24:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:24:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CA757E2150> (4, 3)
12/08/2023 03:24:37 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:24:37 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:37 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:37 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001CA757E8E50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:37 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:24:37 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:24:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:24:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CA757E2A10> (5, 3)
12/08/2023 03:24:37 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:24:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:24:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CA757E2150> (4, 3)
12/08/2023 03:24:37 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:24:37 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:37 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:37 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001CA757E8E50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:37 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:24:37 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:24:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:24:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CA757E2A10> (5, 3)
12/08/2023 03:24:37 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:24:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:24:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CA757E2150> (4, 3)
12/08/2023 03:24:37 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:24:37 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:37 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:37 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001CA757E8E50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:37 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:24:37 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:24:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:24:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CA757E2A10> (5, 3)
12/08/2023 03:24:37 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:24:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:24:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CA757E2150> (4, 3)
12/08/2023 03:24:37 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:24:37 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:37 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:38 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001CA757E8E50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:38 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:24:38 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:24:38 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:24:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CA757E2A10> (5, 3)
12/08/2023 03:24:38 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:24:38 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:24:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CA757E2150> (4, 3)
12/08/2023 03:24:38 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:24:38 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:38 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:39 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001CA757E8E50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:39 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:24:39 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:24:39 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:24:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CA757E2A10> (5, 3)
12/08/2023 03:24:39 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:24:39 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:24:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CA757E2150> (4, 3)
12/08/2023 03:24:39 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:24:39 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:39 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:40 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001CA757E8E50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:40 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:24:40 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:24:40 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:24:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CA757E2A10> (5, 3)
12/08/2023 03:24:40 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:24:40 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:24:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CA757E2150> (4, 3)
12/08/2023 03:24:40 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:24:40 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:40 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:41 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001CA757E8E50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:41 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:24:41 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:24:41 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:24:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CA757E2A10> (5, 3)
12/08/2023 03:24:41 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:24:41 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:24:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CA757E2150> (4, 3)
12/08/2023 03:24:41 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:24:41 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:41 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:41 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001CA757E8E50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:41 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:24:41 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:24:41 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:24:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CA757E2A10> (5, 3)
12/08/2023 03:24:41 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:24:41 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:24:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CA757E2150> (4, 3)
12/08/2023 03:24:41 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:24:41 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:41 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:47 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001CA757E8E50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:47 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:24:47 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:24:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:24:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CA757E2A10> (5, 3)
12/08/2023 03:24:47 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:24:47 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:24:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CA757E2150> (4, 3)
12/08/2023 03:24:47 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:24:47 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:24:47 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:25:09 PM Launching Main.py
12/08/2023 03:25:10 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000022218368090> moves and attacks before: ([], [])
12/08/2023 03:25:10 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:25:10 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:25:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:25:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000222183622D0> (5, 3)
12/08/2023 03:25:10 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:25:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:25:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000022218360850> (4, 3)
12/08/2023 03:25:10 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:25:10 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:25:10 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:25:21 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000022218368090> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:25:21 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:25:21 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:25:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:25:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000222183622D0> (5, 3)
12/08/2023 03:25:21 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:25:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:25:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000022218360850> (4, 3)
12/08/2023 03:25:21 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:25:21 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:25:21 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:25:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000022218368090> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:25:22 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:25:22 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:25:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:25:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000222183622D0> (5, 3)
12/08/2023 03:25:22 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:25:22 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:25:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000022218360850> (4, 3)
12/08/2023 03:25:22 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:25:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:25:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:25:33 PM Launching Main.py
12/08/2023 03:25:35 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001CEF7558110> moves and attacks before: ([], [])
12/08/2023 03:25:35 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:25:35 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:25:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:25:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CEF7552CD0> (5, 5)
12/08/2023 03:25:35 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:25:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:25:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CEF75529D0> (4, 5)
12/08/2023 03:25:35 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:25:35 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:25:35 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:25:35 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001CEF7558110> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:25:35 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:25:35 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:25:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:25:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CEF7552CD0> (5, 5)
12/08/2023 03:25:35 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:25:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:25:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CEF75529D0> (4, 5)
12/08/2023 03:25:35 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:25:35 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:25:35 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:25:37 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001CEF7558110> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:25:37 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:25:37 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:25:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:25:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CEF7552CD0> (5, 5)
12/08/2023 03:25:37 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:25:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:25:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CEF75529D0> (4, 5)
12/08/2023 03:25:37 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:25:37 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:25:37 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:25:52 PM Launching Main.py
12/08/2023 03:25:53 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001D5A26F64D0> moves and attacks before: ([], [])
12/08/2023 03:25:53 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:25:53 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:25:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:25:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001D5A26F5350> (5, 5)
12/08/2023 03:25:53 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:25:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:25:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001D5A26F6C90> (4, 5)
12/08/2023 03:25:53 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:25:53 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:25:53 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:26:10 PM Launching Main.py
12/08/2023 03:26:11 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000024FC45F4410> moves and attacks before: ([], [])
12/08/2023 03:26:11 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:26:11 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:26:11 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:26:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000024FC45F4B10> (5, 4)
12/08/2023 03:26:11 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:26:11 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:26:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000024FC45F5A90> (4, 4)
12/08/2023 03:26:11 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:26:11 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:26:11 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:26:13 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000024FC45F4410> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:26:13 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:26:13 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:26:13 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:26:13 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000024FC45F4B10> (5, 4)
12/08/2023 03:26:13 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:26:13 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:26:13 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000024FC45F5A90> (4, 4)
12/08/2023 03:26:13 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:26:13 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:26:13 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:26:28 PM Launching Main.py
12/08/2023 03:26:29 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EEAC719CD0> moves and attacks before: ([], [])
12/08/2023 03:26:29 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:26:29 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:26:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:26:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EEAC71AD50> (5, 4)
12/08/2023 03:26:29 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:26:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:26:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EEAC718890> (4, 4)
12/08/2023 03:26:29 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:26:29 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:26:29 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:26:30 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EEAC719CD0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:26:30 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:26:30 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:26:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:26:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EEAC71AD50> (5, 4)
12/08/2023 03:26:30 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:26:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:26:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EEAC718890> (4, 4)
12/08/2023 03:26:30 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:26:30 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:26:30 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:26:31 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EEAC719C10> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:26:31 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:26:31 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:26:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:26:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EEAC71AE90> (5, 5)
12/08/2023 03:26:31 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:26:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:26:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EEAC718A90> (4, 5)
12/08/2023 03:26:31 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:26:31 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:26:31 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:26:32 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EEAC719D50> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:26:32 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:26:32 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 03:26:32 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:26:32 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EEAC718990> (5, 6)
12/08/2023 03:26:32 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 03:26:32 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:26:32 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EEAC718B10> (4, 6)
12/08/2023 03:26:32 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 03:26:32 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 03:26:32 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 03:26:36 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EEAC719D50> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 03:26:36 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:26:36 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 03:26:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:26:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EEAC718990> (5, 6)
12/08/2023 03:26:36 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 03:26:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:26:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EEAC718B10> (4, 6)
12/08/2023 03:26:36 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 03:26:36 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 03:26:36 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 03:26:37 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EEAC719D50> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 03:26:37 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:26:37 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 03:26:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:26:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EEAC718990> (5, 6)
12/08/2023 03:26:37 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 03:26:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:26:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EEAC718B10> (4, 6)
12/08/2023 03:26:37 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 03:26:37 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 03:26:37 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 03:26:38 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EEAC719CD0> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 03:26:38 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:26:38 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:26:38 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:26:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EEAC71AD50> (5, 4)
12/08/2023 03:26:38 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:26:38 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:26:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EEAC718890> (4, 4)
12/08/2023 03:26:38 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:26:38 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:26:38 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:26:39 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EEAC719C10> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:26:39 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:26:39 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:26:39 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:26:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EEAC71AE90> (5, 5)
12/08/2023 03:26:39 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:26:39 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:26:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EEAC718A90> (4, 5)
12/08/2023 03:26:39 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:26:39 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:26:39 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:26:44 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EEAC719C10> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:26:44 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:26:44 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:26:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:26:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EEAC71AE90> (5, 5)
12/08/2023 03:26:44 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:26:44 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:26:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EEAC718A90> (4, 5)
12/08/2023 03:26:44 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:26:44 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:26:44 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:27:15 PM Launching Main.py
12/08/2023 03:27:16 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000207797680D0> moves and attacks before: ([], [])
12/08/2023 03:27:16 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:27:16 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:27:16 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:27:16 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000020779769110> (5, 5)
12/08/2023 03:27:16 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:27:16 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:27:16 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002077976AA50> (4, 5)
12/08/2023 03:27:16 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:27:16 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:27:16 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:27:17 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000207797680D0> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:27:17 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:27:17 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:27:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:27:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000020779769110> (5, 5)
12/08/2023 03:27:17 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:27:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:27:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002077976AA50> (4, 5)
12/08/2023 03:27:17 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:27:17 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:27:17 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:27:18 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000207797680D0> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:27:18 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:27:18 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:27:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:27:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000020779769110> (5, 5)
12/08/2023 03:27:18 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:27:18 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:27:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002077976AA50> (4, 5)
12/08/2023 03:27:18 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:27:18 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:27:18 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:01 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000207797680D0> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:01 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:28:01 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:28:01 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:01 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000020779769110> (5, 5)
12/08/2023 03:28:01 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:28:01 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:01 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002077976AA50> (4, 5)
12/08/2023 03:28:01 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:28:01 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:01 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:01 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000207797680D0> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:01 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:28:01 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:28:01 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:01 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000020779769110> (5, 5)
12/08/2023 03:28:01 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:28:01 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:01 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002077976AA50> (4, 5)
12/08/2023 03:28:01 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:28:01 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:01 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:01 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000207797680D0> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:01 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:28:01 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:28:01 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:01 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000020779769110> (5, 5)
12/08/2023 03:28:01 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:28:01 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:01 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002077976AA50> (4, 5)
12/08/2023 03:28:01 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:28:01 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:01 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:02 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000207797680D0> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:02 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:28:02 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:28:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000020779769110> (5, 5)
12/08/2023 03:28:02 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:28:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002077976AA50> (4, 5)
12/08/2023 03:28:02 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:28:02 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:02 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:02 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002077976A5D0> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:02 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:28:02 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:28:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000020779768F10> (5, 4)
12/08/2023 03:28:02 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:28:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002077976A850> (4, 4)
12/08/2023 03:28:02 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:28:02 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:28:02 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:28:02 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002077976A190> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:28:02 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:28:02 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:28:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000020779768DD0> (5, 3)
12/08/2023 03:28:02 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:28:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002077976A710> (4, 3)
12/08/2023 03:28:02 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:28:02 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:28:02 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:28:03 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000207797680D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:28:03 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:28:03 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:28:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000020779769110> (5, 5)
12/08/2023 03:28:03 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:28:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002077976AA50> (4, 5)
12/08/2023 03:28:03 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:28:03 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:03 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:03 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000207797680D0> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:03 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:28:03 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:28:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000020779769110> (5, 5)
12/08/2023 03:28:03 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:28:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002077976AA50> (4, 5)
12/08/2023 03:28:03 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:28:03 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:03 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:03 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000207797680D0> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:03 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:28:03 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:28:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000020779769110> (5, 5)
12/08/2023 03:28:03 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:28:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002077976AA50> (4, 5)
12/08/2023 03:28:03 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:28:03 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:03 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:09 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002077976A5D0> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:09 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:28:09 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:28:09 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000020779768F10> (5, 4)
12/08/2023 03:28:09 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:28:09 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002077976A850> (4, 4)
12/08/2023 03:28:09 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:28:09 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:28:09 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:28:14 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002077976A190> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:28:14 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:28:14 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:28:14 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000020779768DD0> (5, 3)
12/08/2023 03:28:14 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:28:14 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002077976A710> (4, 3)
12/08/2023 03:28:14 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:28:14 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:28:14 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:28:24 PM Launching Main.py
12/08/2023 03:28:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E649410> moves and attacks before: ([], [])
12/08/2023 03:28:25 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:28:25 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:28:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B850> (5, 4)
12/08/2023 03:28:25 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:28:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BB50> (4, 4)
12/08/2023 03:28:25 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:28:25 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:28:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:28:26 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E6490D0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:28:26 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:28:26 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 03:28:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B990> (5, 5)
12/08/2023 03:28:26 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 03:28:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BCD0> (4, 5)
12/08/2023 03:28:26 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 03:28:26 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:26 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E649410> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 03:28:27 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:28:27 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:28:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B850> (5, 4)
12/08/2023 03:28:27 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:28:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BB50> (4, 4)
12/08/2023 03:28:27 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:28:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:28:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:28:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E649410> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:28:28 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:28:28 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:28:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B850> (5, 4)
12/08/2023 03:28:28 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:28:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:28:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BB50> (4, 4)
12/08/2023 03:28:28 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:28:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:28:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:29:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E6492D0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:29:25 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:29:25 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:29:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B750> (5, 3)
12/08/2023 03:29:25 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:29:25 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BD50> (4, 3)
12/08/2023 03:29:25 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:29:25 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:29:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:29:26 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E6480D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:29:26 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:29:26 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:29:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B6D0> (5, 2)
12/08/2023 03:29:26 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:29:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64AD90> (4, 2)
12/08/2023 03:29:26 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:29:26 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:29:26 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:29:26 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E649290> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:29:26 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:29:26 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 03:29:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E649D10> (5, 1)
12/08/2023 03:29:26 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 03:29:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64A990> (4, 1)
12/08/2023 03:29:26 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 03:29:26 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 03:29:26 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 03:29:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E649410> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 03:29:27 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:29:27 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:29:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B850> (5, 4)
12/08/2023 03:29:27 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:29:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BB50> (4, 4)
12/08/2023 03:29:27 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:29:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:29:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:29:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E6492D0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:29:27 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:29:27 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:29:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B750> (5, 3)
12/08/2023 03:29:27 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:29:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BD50> (4, 3)
12/08/2023 03:29:27 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:29:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:29:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:29:29 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E6492D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:29:29 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:29:29 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:29:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B750> (5, 3)
12/08/2023 03:29:29 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:29:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BD50> (4, 3)
12/08/2023 03:29:29 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:29:29 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:29:29 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:29:29 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E6480D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:29:29 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:29:29 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:29:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B6D0> (5, 2)
12/08/2023 03:29:29 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:29:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64AD90> (4, 2)
12/08/2023 03:29:29 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:29:29 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:29:29 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:29:30 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E6480D0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:29:30 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:29:30 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:29:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B6D0> (5, 2)
12/08/2023 03:29:30 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:29:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64AD90> (4, 2)
12/08/2023 03:29:30 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:29:30 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:29:30 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:29:31 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E6492D0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:29:31 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:29:31 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:29:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B750> (5, 3)
12/08/2023 03:29:31 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:29:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BD50> (4, 3)
12/08/2023 03:29:31 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:29:31 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:29:31 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:29:43 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E6492D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:29:43 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:29:43 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:29:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B750> (5, 3)
12/08/2023 03:29:43 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:29:43 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BD50> (4, 3)
12/08/2023 03:29:43 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:29:43 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:29:43 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:29:48 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E6492D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:29:48 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:29:48 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:29:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B750> (5, 3)
12/08/2023 03:29:48 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:29:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BD50> (4, 3)
12/08/2023 03:29:48 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:29:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:29:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:29:48 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E649410> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:29:48 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:29:48 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:29:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B850> (5, 4)
12/08/2023 03:29:48 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:29:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BB50> (4, 4)
12/08/2023 03:29:48 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:29:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:29:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:29:49 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E6492D0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:29:49 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:29:49 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:29:49 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B750> (5, 3)
12/08/2023 03:29:49 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:29:49 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BD50> (4, 3)
12/08/2023 03:29:49 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:29:49 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:29:49 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:29:50 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E6492D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:29:50 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:29:50 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:29:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B750> (5, 3)
12/08/2023 03:29:50 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:29:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BD50> (4, 3)
12/08/2023 03:29:50 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:29:50 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:29:50 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:29:51 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E649410> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:29:51 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:29:51 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:29:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B850> (5, 4)
12/08/2023 03:29:51 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:29:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BB50> (4, 4)
12/08/2023 03:29:51 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:29:51 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:29:51 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:29:51 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E649410> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:29:51 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:29:51 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:29:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B850> (5, 4)
12/08/2023 03:29:51 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:29:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BB50> (4, 4)
12/08/2023 03:29:51 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:29:51 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:29:51 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:29:57 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E649410> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:29:57 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:29:57 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:29:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B850> (5, 4)
12/08/2023 03:29:57 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:29:57 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BB50> (4, 4)
12/08/2023 03:29:57 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:29:57 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:29:57 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:29:58 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E649410> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:29:58 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:29:58 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:29:58 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:58 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B850> (5, 4)
12/08/2023 03:29:58 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:29:58 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:58 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BB50> (4, 4)
12/08/2023 03:29:58 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:29:58 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:29:58 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:29:59 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E649410> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:29:59 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:29:59 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:29:59 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:59 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B850> (5, 4)
12/08/2023 03:29:59 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:29:59 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:29:59 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BB50> (4, 4)
12/08/2023 03:29:59 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:29:59 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:29:59 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:30:01 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E6492D0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:30:01 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:30:01 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:30:01 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:30:01 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B750> (5, 3)
12/08/2023 03:30:01 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:30:01 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:30:01 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BD50> (4, 3)
12/08/2023 03:30:01 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:30:01 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:30:01 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:30:02 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E6480D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:30:02 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:30:02 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 03:30:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:30:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B6D0> (5, 2)
12/08/2023 03:30:02 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 03:30:02 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:30:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64AD90> (4, 2)
12/08/2023 03:30:02 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 03:30:02 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 03:30:02 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 03:30:03 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E649290> moves and attacks before: ([(5, 2), (4, 2)], [])
12/08/2023 03:30:03 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:30:03 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 03:30:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:30:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E649D10> (5, 1)
12/08/2023 03:30:03 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 03:30:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:30:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64A990> (4, 1)
12/08/2023 03:30:03 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 03:30:03 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 03:30:03 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 03:30:03 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E649290> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 03:30:03 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:30:03 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 03:30:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:30:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E649D10> (5, 1)
12/08/2023 03:30:03 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 03:30:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:30:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64A990> (4, 1)
12/08/2023 03:30:03 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 03:30:03 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 03:30:03 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 03:31:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E649410> moves and attacks before: ([(5, 1), (4, 1)], [])
12/08/2023 03:31:24 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:31:24 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:31:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:31:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B850> (5, 4)
12/08/2023 03:31:24 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:31:24 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:31:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BB50> (4, 4)
12/08/2023 03:31:24 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:31:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E649410> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:27 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:31:27 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:31:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:31:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B850> (5, 4)
12/08/2023 03:31:27 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:31:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:31:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BB50> (4, 4)
12/08/2023 03:31:27 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:31:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:29 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E649410> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:29 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:31:29 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:31:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:31:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B850> (5, 4)
12/08/2023 03:31:29 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:31:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:31:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BB50> (4, 4)
12/08/2023 03:31:29 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:31:29 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:29 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:30 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E649410> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:30 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:31:30 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:31:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:31:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B850> (5, 4)
12/08/2023 03:31:30 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:31:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:31:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BB50> (4, 4)
12/08/2023 03:31:30 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:31:30 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:30 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:31 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E649410> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:31 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:31:31 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:31:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:31:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B850> (5, 4)
12/08/2023 03:31:31 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:31:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:31:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BB50> (4, 4)
12/08/2023 03:31:31 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:31:31 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:31 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:31 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E649410> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:31 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:31:31 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:31:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:31:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B850> (5, 4)
12/08/2023 03:31:31 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:31:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:31:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BB50> (4, 4)
12/08/2023 03:31:31 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:31:31 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:31 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:31 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E649410> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:31 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:31:31 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:31:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:31:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B850> (5, 4)
12/08/2023 03:31:31 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:31:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:31:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BB50> (4, 4)
12/08/2023 03:31:31 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:31:31 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:31 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:32 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E649410> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:32 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:31:32 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:31:32 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:31:32 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B850> (5, 4)
12/08/2023 03:31:32 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:31:32 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:31:32 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BB50> (4, 4)
12/08/2023 03:31:32 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:31:32 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:32 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:33 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E649410> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:33 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:31:33 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:31:33 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:31:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B850> (5, 4)
12/08/2023 03:31:33 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:31:33 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:31:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BB50> (4, 4)
12/08/2023 03:31:33 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:31:33 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:33 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:33 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018A4E649410> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:33 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:31:33 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:31:33 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:31:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64B850> (5, 4)
12/08/2023 03:31:33 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:31:33 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:31:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018A4E64BB50> (4, 4)
12/08/2023 03:31:33 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:31:33 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:31:33 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:07 PM Launching Main.py
12/08/2023 03:32:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001AC36EF8290> moves and attacks before: ([], [])
12/08/2023 03:32:08 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:32:08 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:32:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFA750> (5, 4)
12/08/2023 03:32:08 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:32:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFB8D0> (4, 4)
12/08/2023 03:32:08 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:32:08 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:08 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:09 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001AC36EF8290> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:09 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:32:09 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:32:09 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFA750> (5, 4)
12/08/2023 03:32:09 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:32:09 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFB8D0> (4, 4)
12/08/2023 03:32:09 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:32:09 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:09 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:09 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001AC36EF8290> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:09 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:32:09 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:32:09 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFA750> (5, 4)
12/08/2023 03:32:09 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:32:09 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFB8D0> (4, 4)
12/08/2023 03:32:09 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:32:09 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:09 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:10 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001AC36EF8290> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:10 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:32:10 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:32:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFA750> (5, 4)
12/08/2023 03:32:10 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:32:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFB8D0> (4, 4)
12/08/2023 03:32:10 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:32:10 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:10 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:11 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001AC36EF8290> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:11 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:32:11 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:32:11 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFA750> (5, 4)
12/08/2023 03:32:11 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:32:11 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFB8D0> (4, 4)
12/08/2023 03:32:11 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:32:11 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:11 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:11 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001AC36EF8290> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:11 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:32:11 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:32:11 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFA750> (5, 4)
12/08/2023 03:32:11 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:32:11 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFB8D0> (4, 4)
12/08/2023 03:32:11 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:32:11 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:11 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:12 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001AC36EF8290> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:12 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:32:12 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:32:12 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:12 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFA750> (5, 4)
12/08/2023 03:32:12 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:32:12 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:12 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFB8D0> (4, 4)
12/08/2023 03:32:12 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:32:12 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:12 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:12 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001AC36EF8290> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:12 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:32:12 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:32:12 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:12 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFA750> (5, 4)
12/08/2023 03:32:12 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:32:12 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:12 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFB8D0> (4, 4)
12/08/2023 03:32:12 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:32:12 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:12 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:13 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001AC36EF8290> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:13 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:32:13 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:32:13 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:13 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFA750> (5, 4)
12/08/2023 03:32:13 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:32:13 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:13 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFB8D0> (4, 4)
12/08/2023 03:32:13 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:32:13 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:13 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:14 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001AC36EF8290> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:14 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:32:14 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:32:14 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFA750> (5, 4)
12/08/2023 03:32:14 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:32:14 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFB8D0> (4, 4)
12/08/2023 03:32:14 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:32:14 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:14 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:14 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001AC36EF8290> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:14 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:32:14 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:32:14 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFA750> (5, 4)
12/08/2023 03:32:14 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:32:14 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFB8D0> (4, 4)
12/08/2023 03:32:14 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:32:14 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:14 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:14 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001AC36EF8110> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:32:14 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:32:14 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:32:14 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFA610> (5, 3)
12/08/2023 03:32:14 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:32:14 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFB7D0> (4, 3)
12/08/2023 03:32:14 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:32:14 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:32:14 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:32:15 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001AC36EF8110> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:32:15 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:32:15 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:32:15 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFA610> (5, 3)
12/08/2023 03:32:15 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:32:15 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFB7D0> (4, 3)
12/08/2023 03:32:15 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:32:15 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:32:15 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:32:16 PM RenderPossibleMoves(): choosen figure: <classes.piece.Queen object at 0x000001AC36EF9B50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 03:32:16 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/08/2023 03:32:17 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001AC36EF8110> moves and attacks before: ([], [])
12/08/2023 03:32:17 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:32:17 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 03:32:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFA610> (5, 3)
12/08/2023 03:32:17 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 03:32:17 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:32:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AC36EFB7D0> (4, 3)
12/08/2023 03:32:17 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 03:32:17 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 03:32:17 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 03:33:25 PM Launching Main.py
12/08/2023 03:33:26 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EFECCE81D0> moves and attacks before: ([], [])
12/08/2023 03:33:26 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:33:26 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:33:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:33:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EFECCE9B50> (5, 4)
12/08/2023 03:33:26 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:33:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:33:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EFECCE9C10> (4, 4)
12/08/2023 03:33:26 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:33:26 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:26 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:26 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EFECCE81D0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:26 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:33:26 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:33:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:33:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EFECCE9B50> (5, 4)
12/08/2023 03:33:26 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:33:26 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:33:26 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EFECCE9C10> (4, 4)
12/08/2023 03:33:26 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:33:26 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:26 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EFECCE81D0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:27 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:33:27 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:33:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:33:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EFECCE9B50> (5, 4)
12/08/2023 03:33:27 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:33:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:33:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EFECCE9C10> (4, 4)
12/08/2023 03:33:27 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:33:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EFECCE81D0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:27 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:33:27 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:33:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:33:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EFECCE9B50> (5, 4)
12/08/2023 03:33:27 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:33:27 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:33:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EFECCE9C10> (4, 4)
12/08/2023 03:33:27 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:33:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EFECCE81D0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:28 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:33:28 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:33:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:33:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EFECCE9B50> (5, 4)
12/08/2023 03:33:28 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:33:28 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:33:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EFECCE9C10> (4, 4)
12/08/2023 03:33:28 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:33:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:38 PM Launching Main.py
12/08/2023 03:33:39 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000212BD648150> moves and attacks before: ([], [])
12/08/2023 03:33:39 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:33:39 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:33:39 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:33:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642090> (5, 4)
12/08/2023 03:33:39 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:33:39 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:33:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD641150> (4, 4)
12/08/2023 03:33:39 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:33:39 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:39 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:40 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000212BD648150> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:40 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:33:40 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:33:40 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:33:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642090> (5, 4)
12/08/2023 03:33:40 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:33:40 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:33:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD641150> (4, 4)
12/08/2023 03:33:40 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:33:40 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:40 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:40 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000212BD648150> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:40 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:33:40 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:33:40 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:33:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642090> (5, 4)
12/08/2023 03:33:40 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:33:40 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:33:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD641150> (4, 4)
12/08/2023 03:33:40 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:33:40 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:40 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:41 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000212BD648150> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:41 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:33:41 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:33:41 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:33:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642090> (5, 4)
12/08/2023 03:33:41 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:33:41 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:33:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD641150> (4, 4)
12/08/2023 03:33:41 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:33:41 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:41 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:42 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000212BD648150> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:42 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:33:42 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:33:42 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:33:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642090> (5, 4)
12/08/2023 03:33:42 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:33:42 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:33:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD641150> (4, 4)
12/08/2023 03:33:42 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:33:42 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:42 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:42 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000212BD648150> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:42 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 03:33:42 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 03:33:42 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:33:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642090> (5, 4)
12/08/2023 03:33:42 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 03:33:42 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 03:33:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD641150> (4, 4)
12/08/2023 03:33:42 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 03:33:42 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 03:33:42 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 04:13:32 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000212BD648150> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 04:13:32 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:13:32 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 04:13:32 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:13:32 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642090> (5, 4)
12/08/2023 04:13:32 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 04:13:32 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:13:32 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD641150> (4, 4)
12/08/2023 04:13:32 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 04:13:32 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 04:13:32 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 04:13:33 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000212BD648110> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 04:13:33 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:13:33 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 04:13:33 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:13:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642CD0> (5, 5)
12/08/2023 04:13:33 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 04:13:33 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:13:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD6429D0> (4, 5)
12/08/2023 04:13:33 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 04:13:33 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 04:13:33 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 04:13:33 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000212BD648110> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 04:13:33 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:13:33 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 04:13:33 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:13:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642CD0> (5, 5)
12/08/2023 04:13:33 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 04:13:33 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:13:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD6429D0> (4, 5)
12/08/2023 04:13:33 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 04:13:33 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 04:13:33 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 04:13:33 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000212BD648110> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 04:13:33 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:13:33 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 04:13:33 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:13:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642CD0> (5, 5)
12/08/2023 04:13:33 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 04:13:33 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:13:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD6429D0> (4, 5)
12/08/2023 04:13:33 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 04:13:33 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 04:13:33 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 04:13:33 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000212BD648310> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 04:13:33 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:13:33 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 04:13:33 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:13:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642C10> (5, 6)
12/08/2023 04:13:33 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 04:13:33 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:13:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642910> (4, 6)
12/08/2023 04:13:33 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 04:13:33 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 04:13:33 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 04:13:34 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000212BD648310> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 04:13:34 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:13:34 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 04:13:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:13:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642C10> (5, 6)
12/08/2023 04:13:34 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 04:13:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:13:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642910> (4, 6)
12/08/2023 04:13:34 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 04:13:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 04:13:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 04:13:34 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000212BD648310> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 04:13:34 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:13:34 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 04:13:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:13:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642C10> (5, 6)
12/08/2023 04:13:34 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 04:13:34 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:13:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642910> (4, 6)
12/08/2023 04:13:34 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 04:13:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 04:13:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 04:13:35 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000212BD648310> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 04:13:35 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:13:35 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 04:13:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:13:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642C10> (5, 6)
12/08/2023 04:13:35 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 04:13:35 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:13:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642910> (4, 6)
12/08/2023 04:13:35 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 04:13:35 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 04:13:35 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 04:13:36 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000212BD648310> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 04:13:36 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:13:36 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 04:13:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:13:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642C10> (5, 6)
12/08/2023 04:13:36 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 04:13:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:13:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642910> (4, 6)
12/08/2023 04:13:36 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 04:13:36 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 04:13:36 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 04:13:36 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000212BD648310> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 04:13:36 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:13:36 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 04:13:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:13:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642C10> (5, 6)
12/08/2023 04:13:36 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 04:13:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:13:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642910> (4, 6)
12/08/2023 04:13:36 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 04:13:36 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 04:13:36 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 04:13:36 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000212BD648310> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 04:13:36 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:13:36 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 04:13:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:13:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642C10> (5, 6)
12/08/2023 04:13:36 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 04:13:36 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:13:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642910> (4, 6)
12/08/2023 04:13:36 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 04:13:36 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 04:13:36 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 04:13:37 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000212BD648310> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 04:13:37 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:13:37 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 04:13:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:13:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642C10> (5, 6)
12/08/2023 04:13:37 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 04:13:37 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:13:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000212BD642910> (4, 6)
12/08/2023 04:13:37 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 04:13:37 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 04:13:37 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 04:22:30 PM Launching Main.py
12/08/2023 04:22:31 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002EF0B376210> moves and attacks before: ([], [])
12/08/2023 04:22:31 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:22:31 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 04:22:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:22:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002EF0B376490> (5, 5)
12/08/2023 04:22:31 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 04:22:31 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:22:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002EF0B374A50> (4, 5)
12/08/2023 04:22:31 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 04:22:31 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 04:22:31 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 04:22:32 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002EF0B376210> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 04:22:32 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:22:32 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 04:22:32 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:22:32 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002EF0B376490> (5, 5)
12/08/2023 04:22:32 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 04:22:32 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:22:32 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002EF0B374A50> (4, 5)
12/08/2023 04:22:32 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 04:22:32 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 04:22:32 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 04:22:33 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002EF0B376210> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 04:22:33 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:22:33 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 04:22:33 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:22:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002EF0B376490> (5, 5)
12/08/2023 04:22:33 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 04:22:33 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:22:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002EF0B374A50> (4, 5)
12/08/2023 04:22:33 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 04:22:33 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 04:22:33 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 04:22:44 PM Launching Main.py
12/08/2023 04:22:45 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000220833CA050> moves and attacks before: ([], [])
12/08/2023 04:22:45 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:22:45 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 04:22:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:22:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000220833CABD0> (5, 3)
12/08/2023 04:22:45 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 04:22:45 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:22:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000220833C8750> (4, 3)
12/08/2023 04:22:45 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 04:22:45 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 04:22:45 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 04:22:48 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000220833C80D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 04:22:48 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:22:48 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 04:22:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:22:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000220833CAF90> (5, 4)
12/08/2023 04:22:48 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 04:22:48 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:22:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000220833C8B90> (4, 4)
12/08/2023 04:22:48 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 04:22:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 04:22:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 04:22:49 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000220833C8090> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 04:22:49 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:22:49 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 04:22:49 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:22:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000220833C89D0> (5, 5)
12/08/2023 04:22:49 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 04:22:49 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:22:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000220833C8B50> (4, 5)
12/08/2023 04:22:49 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 04:22:49 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 04:22:49 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 04:22:50 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000220833C8290> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 04:22:50 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:22:50 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 04:22:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:22:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000220833C8B10> (5, 6)
12/08/2023 04:22:50 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 04:22:50 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:22:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000220833C8C90> (4, 6)
12/08/2023 04:22:50 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 04:22:50 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 04:22:50 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 04:22:51 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000220833CAB10> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 04:22:51 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:22:51 PM Pawn Figure info: (6, 7, 'w', 'p')
12/08/2023 04:22:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:22:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000220833C88D0> (5, 7)
12/08/2023 04:22:51 PM Pawn (5, 7) is empty appended moves [(5, 7)]
12/08/2023 04:22:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:22:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000220833C8A50> (4, 7)
12/08/2023 04:22:51 PM Pawn (4, 7) is empty appended moves [(5, 7), (4, 7)]
12/08/2023 04:22:51 PM Pawn ReturnPossibleMove(): returning values: ([(5, 7), (4, 7)], [])
12/08/2023 04:22:51 PM RenderPossibleMoves(): moves and attacks after: ([(5, 7), (4, 7)], [])
12/08/2023 04:25:20 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000220833C80D0> moves and attacks before: ([(5, 7), (4, 7)], [])
12/08/2023 04:25:20 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:25:20 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 04:25:20 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:25:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000220833CAF90> (5, 4)
12/08/2023 04:25:20 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 04:25:20 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:25:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000220833C8B90> (4, 4)
12/08/2023 04:25:20 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 04:25:20 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 04:25:20 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 04:25:20 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000220833C8090> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 04:25:20 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:25:20 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 04:25:20 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:25:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000220833C89D0> (5, 5)
12/08/2023 04:25:20 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 04:25:20 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:25:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000220833C8B50> (4, 5)
12/08/2023 04:25:20 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 04:25:20 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 04:25:20 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 04:25:21 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000220833C8290> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 04:25:21 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:25:21 PM Pawn Figure info: (6, 6, 'w', 'p')
12/08/2023 04:25:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:25:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000220833C8B10> (5, 6)
12/08/2023 04:25:21 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/08/2023 04:25:21 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:25:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000220833C8C90> (4, 6)
12/08/2023 04:25:21 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/08/2023 04:25:21 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/08/2023 04:25:21 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/08/2023 04:25:21 PM RenderPossibleMoves(): choosen figure: <classes.piece.Bishop object at 0x00000220833C8590> moves and attacks before: ([(5, 6), (4, 6)], [])
12/08/2023 04:25:21 PM RenderPossibleMoves(): moves and attacks after: ([(6, 4), (5, 3), (4, 2), (3, 1), (2, 0)], [])
12/08/2023 04:25:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Bishop object at 0x00000220833C8590> moves and attacks before: ([(6, 4), (5, 3), (4, 2), (3, 1), (2, 0)], [])
12/08/2023 04:25:23 PM RenderPossibleMoves(): moves and attacks after: ([(3, 1), (4, 2), (5, 3), (6, 4), (7, 5)], [(1, 1)])
12/08/2023 04:44:49 PM Launching Main.py
12/08/2023 04:44:51 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000021E323E5610> moves and attacks before: ([], [])
12/08/2023 04:44:51 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:44:51 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 04:44:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:44:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000021E323E5AD0> (5, 4)
12/08/2023 04:44:51 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 04:44:51 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:44:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000021E323E26D0> (4, 4)
12/08/2023 04:44:51 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 04:44:51 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 04:44:51 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 04:44:52 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000021E323E5690> moves and attacks before: ([], [])
12/08/2023 04:44:52 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:44:52 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 04:44:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:44:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000021E323E5BD0> (5, 5)
12/08/2023 04:44:52 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 04:44:52 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:44:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000021E323E3DD0> (4, 5)
12/08/2023 04:44:52 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 04:44:52 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 04:44:52 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 04:44:53 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000021E323E5D10> moves and attacks before: ([], [])
12/08/2023 04:44:53 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:44:53 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 04:44:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:44:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000021E323E5E90> (5, 3)
12/08/2023 04:44:53 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 04:44:53 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:44:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000021E323E2790> (4, 3)
12/08/2023 04:44:53 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 04:44:53 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 04:44:53 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 04:44:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000021E323E57D0> moves and attacks before: ([], [])
12/08/2023 04:44:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:44:54 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 04:44:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:44:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000021E323E7210> (5, 2)
12/08/2023 04:44:54 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 04:44:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:44:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000021E323E3E50> (4, 2)
12/08/2023 04:44:54 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 04:44:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 04:44:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 04:44:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000021E323E5B10> moves and attacks before: ([], [])
12/08/2023 04:44:54 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:44:54 PM Pawn Figure info: (6, 1, 'w', 'p')
12/08/2023 04:44:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:44:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000021E323E6E10> (5, 1)
12/08/2023 04:44:54 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/08/2023 04:44:54 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:44:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000021E323E3D10> (4, 1)
12/08/2023 04:44:54 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/08/2023 04:44:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/08/2023 04:44:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/08/2023 04:44:55 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000021E323E5450> moves and attacks before: ([], [])
12/08/2023 04:44:55 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:44:55 PM Pawn Figure info: (6, 0, 'w', 'p')
12/08/2023 04:44:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:44:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000021E323E6F50> (5, 0)
12/08/2023 04:44:55 PM Pawn (5, 0) is empty appended moves [(5, 0)]
12/08/2023 04:44:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:44:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000021E323E35D0> (4, 0)
12/08/2023 04:44:55 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
12/08/2023 04:44:55 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
12/08/2023 04:44:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
12/08/2023 04:44:56 PM RenderPossibleMoves(): choosen figure: <classes.piece.King object at 0x0000021E323E5C10> moves and attacks before: ([], [])
12/08/2023 04:45:07 PM Launching Main.py
12/08/2023 04:45:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000014F8A0984D0> moves and attacks before: ([], [])
12/08/2023 04:45:08 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:45:08 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 04:45:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:45:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000014F8A09A5D0> (5, 2)
12/08/2023 04:45:08 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 04:45:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:45:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000014F8A091D50> (4, 2)
12/08/2023 04:45:08 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 04:45:08 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 04:45:08 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 04:45:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000014FFFDF95D0> moves and attacks before: ([], [])
12/08/2023 04:45:08 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:45:08 PM Pawn Figure info: (1, 2, 'b', 'p')
12/08/2023 04:45:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:45:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000014F8A090B50> (2, 2)
12/08/2023 04:45:08 PM Pawn (2, 2) is empty appended moves [(2, 2)]
12/08/2023 04:45:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:45:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000014F8A0928D0> (3, 2)
12/08/2023 04:45:08 PM Pawn (3, 2) is empty appended moves [(2, 2), (3, 2)]
12/08/2023 04:45:08 PM Pawn ReturnPossibleMove(): returning values: ([(2, 2), (3, 2)], [])
12/08/2023 04:45:08 PM RenderPossibleMoves(): moves and attacks after: ([(2, 2), (3, 2)], [])
12/08/2023 04:45:10 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000014F8A098910> moves and attacks before: ([(2, 2), (3, 2)], [])
12/08/2023 04:45:10 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:45:10 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 04:45:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:45:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000014F8A09A310> (5, 3)
12/08/2023 04:45:10 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 04:45:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:45:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000014F8A091BD0> (4, 3)
12/08/2023 04:45:10 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 04:45:10 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 04:45:10 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 04:45:12 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000014FFFDF95D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/08/2023 04:45:12 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:45:12 PM Pawn Figure info: (1, 2, 'b', 'p')
12/08/2023 04:45:12 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:45:12 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000014F8A090B50> (2, 2)
12/08/2023 04:45:12 PM Pawn (2, 2) is empty appended moves [(2, 2)]
12/08/2023 04:45:12 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:45:12 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000014F8A0928D0> (3, 2)
12/08/2023 04:45:12 PM Pawn (3, 2) is empty appended moves [(2, 2), (3, 2)]
12/08/2023 04:45:12 PM Pawn ReturnPossibleMove(): returning values: ([(2, 2), (3, 2)], [])
12/08/2023 04:45:12 PM RenderPossibleMoves(): moves and attacks after: ([(2, 2), (3, 2)], [])
12/08/2023 04:45:14 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000014F8A098910> moves and attacks before: ([], [])
12/08/2023 04:45:14 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:45:14 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 04:45:14 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:45:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000014F8A09A310> (5, 3)
12/08/2023 04:45:14 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 04:45:14 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:45:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000014F8A091BD0> (4, 3)
12/08/2023 04:45:14 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 04:45:14 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 04:45:14 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 04:45:15 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000014FFFDF95D0> moves and attacks before: ([], [])
12/08/2023 04:45:15 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:45:15 PM Pawn Figure info: (3, 2, 'b', 'p')
12/08/2023 04:45:15 PM Pawn attempting check on board[x-a][y]: False
12/08/2023 04:45:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000014F8A091D50> (4, 2)
12/08/2023 04:45:15 PM Pawn ReturnPossibleMove(): returning values: ([], [(4, 3)])
12/08/2023 04:45:15 PM RenderPossibleMoves(): moves and attacks after: ([], [(4, 3)])
12/08/2023 04:49:09 PM Launching Main.py
12/08/2023 04:49:10 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001C93E264990> moves and attacks before: ([], [])
12/08/2023 04:49:10 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:49:10 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 04:49:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:49:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001C93E264DD0> (5, 4)
12/08/2023 04:49:10 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 04:49:10 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:49:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001C93E265DD0> (4, 4)
12/08/2023 04:49:10 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 04:49:10 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 04:49:10 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 04:49:13 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001C93E264990> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 04:49:13 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:49:13 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 04:49:13 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:49:13 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001C93E264DD0> (5, 4)
12/08/2023 04:49:13 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 04:49:13 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:49:13 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001C93E265DD0> (4, 4)
12/08/2023 04:49:13 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 04:49:13 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 04:49:13 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 04:49:14 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001C93E265750> moves and attacks before: ([], [])
12/08/2023 04:49:14 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:49:14 PM Pawn Figure info: (1, 3, 'b', 'p')
12/08/2023 04:49:14 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:49:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001C92474F450> (2, 3)
12/08/2023 04:49:14 PM Pawn (2, 3) is empty appended moves [(2, 3)]
12/08/2023 04:49:14 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:49:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001C93E267210> (3, 3)
12/08/2023 04:49:14 PM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/08/2023 04:49:14 PM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/08/2023 04:49:14 PM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/08/2023 04:49:15 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001C93E2645D0> moves and attacks before: ([(2, 3), (3, 3)], [])
12/08/2023 04:49:15 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:49:15 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 04:49:15 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:49:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001C93E264E90> (5, 3)
12/08/2023 04:49:15 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 04:49:15 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:49:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001C93E265C90> (4, 3)
12/08/2023 04:49:15 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 04:49:15 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 04:49:15 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 04:50:22 PM Launching Main.py
12/08/2023 04:50:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000025D9343A290> moves and attacks before: ([], [])
12/08/2023 04:50:23 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:50:23 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 04:50:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:50:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000025D93439650> (5, 5)
12/08/2023 04:50:23 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 04:50:23 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:50:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000025D9343A790> (4, 5)
12/08/2023 04:50:23 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 04:50:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 04:50:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 04:50:29 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000025D93439E50> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 04:50:29 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:50:29 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 04:50:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:50:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000025D93439550> (5, 4)
12/08/2023 04:50:29 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 04:50:29 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:50:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000025D9343A610> (4, 4)
12/08/2023 04:50:29 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 04:50:29 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 04:50:29 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 04:50:30 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000025D93439E50> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 04:50:30 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:50:30 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 04:50:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:50:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000025D93439550> (5, 4)
12/08/2023 04:50:30 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 04:50:30 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:50:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000025D9343A610> (4, 4)
12/08/2023 04:50:30 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 04:50:30 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 04:50:30 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 04:50:53 PM Launching Main.py
12/08/2023 04:50:55 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000017BA0E86390> moves and attacks before: ([], [])
12/08/2023 04:50:55 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:50:55 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 04:50:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:50:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000017BA0E85190> (5, 5)
12/08/2023 04:50:55 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 04:50:55 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:50:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000017BA0E85310> (4, 5)
12/08/2023 04:50:55 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 04:50:55 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 04:50:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 04:51:01 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000017BA0E86390> moves and attacks before: ([(5, 5), (4, 5)], [])
12/08/2023 04:51:01 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:51:01 PM Pawn Figure info: (6, 5, 'w', 'p')
12/08/2023 04:51:01 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:51:01 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000017BA0E85190> (5, 5)
12/08/2023 04:51:01 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/08/2023 04:51:01 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:51:01 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000017BA0E85310> (4, 5)
12/08/2023 04:51:01 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/08/2023 04:51:01 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/08/2023 04:51:01 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/08/2023 04:51:03 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000017BA0E86590> moves and attacks before: ([], [])
12/08/2023 04:51:03 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:51:03 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 04:51:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:51:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000017BA0E85290> (5, 4)
12/08/2023 04:51:03 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 04:51:03 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:51:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000017BA0E85410> (4, 4)
12/08/2023 04:51:03 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 04:51:03 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 04:51:03 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 04:51:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000017BA0E87950> moves and attacks before: ([(5, 4), (4, 4)], [])
12/08/2023 04:51:08 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 04:51:08 PM Pawn Figure info: (1, 5, 'b', 'p')
12/08/2023 04:51:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:51:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000017BA0D05190> (2, 5)
12/08/2023 04:51:08 PM Pawn (2, 5) is empty appended moves [(2, 5)]
12/08/2023 04:51:08 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 04:51:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000017BA0E87090> (3, 5)
12/08/2023 04:51:08 PM Pawn (3, 5) is empty appended moves [(2, 5), (3, 5)]
12/08/2023 04:51:08 PM Pawn ReturnPossibleMove(): returning values: ([(2, 5), (3, 5)], [])
12/08/2023 04:51:08 PM RenderPossibleMoves(): moves and attacks after: ([(2, 5), (3, 5)], [])
12/08/2023 06:39:11 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000017BA0E86590> moves and attacks before: ([(2, 5), (3, 5)], [])
12/08/2023 06:39:11 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 06:39:11 PM Pawn Figure info: (6, 4, 'w', 'p')
12/08/2023 06:39:11 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 06:39:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000017BA0E85290> (5, 4)
12/08/2023 06:39:11 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/08/2023 06:39:11 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 06:39:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000017BA0E85410> (4, 4)
12/08/2023 06:39:11 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/08/2023 06:39:11 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/08/2023 06:39:11 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/08/2023 06:39:12 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000017BA0E86290> moves and attacks before: ([], [])
12/08/2023 06:39:12 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 06:39:12 PM Pawn Figure info: (6, 3, 'w', 'p')
12/08/2023 06:39:12 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 06:39:12 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000017BA0E85350> (5, 3)
12/08/2023 06:39:12 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/08/2023 06:39:12 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 06:39:12 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000017BA0E854D0> (4, 3)
12/08/2023 06:39:12 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/08/2023 06:39:12 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/08/2023 06:39:12 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/08/2023 06:39:13 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000017BA0E86450> moves and attacks before: ([], [])
12/08/2023 06:39:13 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 06:39:13 PM Pawn Figure info: (6, 2, 'w', 'p')
12/08/2023 06:39:13 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 06:39:13 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000017BA0E87850> (5, 2)
12/08/2023 06:39:13 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/08/2023 06:39:13 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 06:39:13 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000017BA0E85450> (4, 2)
12/08/2023 06:39:13 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/08/2023 06:39:13 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/08/2023 06:39:13 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/08/2023 06:39:14 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000017BA0E86450> moves and attacks before: ([], [])
12/08/2023 06:39:14 PM Pawn attemping ReturnPossibleMoves() Method
12/08/2023 06:39:14 PM Pawn Figure info: (4, 2, 'w', 'p')
12/08/2023 06:39:14 PM Pawn attempting check on board[x-a][y]: True
12/08/2023 06:39:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000017BA0E86E10> (3, 2)
12/08/2023 06:39:14 PM Pawn (3, 2) is empty appended moves [(3, 2)]
12/08/2023 06:39:14 PM Pawn ReturnPossibleMove(): returning values: ([(3, 2)], [])
12/08/2023 06:39:14 PM RenderPossibleMoves(): moves and attacks after: ([(3, 2)], [])
12/09/2023 11:06:51 AM Launching Main.py
12/09/2023 11:06:52 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001BA9FDC0BD0> moves and attacks before: ([], [])
12/09/2023 11:06:52 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:06:52 AM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 11:06:52 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:06:52 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001BA9FDC1E50> (5, 4)
12/09/2023 11:06:52 AM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 11:06:52 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:06:52 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001BA9FDC0350> (4, 4)
12/09/2023 11:06:52 AM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 11:06:52 AM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 11:06:52 AM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 11:06:53 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001BA9FC49A90> moves and attacks before: ([], [])
12/09/2023 11:06:53 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:06:53 AM Pawn Figure info: (1, 2, 'b', 'p')
12/09/2023 11:06:53 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:06:53 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001BA9FDC1BD0> (2, 2)
12/09/2023 11:06:53 AM Pawn (2, 2) is empty appended moves [(2, 2)]
12/09/2023 11:06:53 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:06:53 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001BA9FDC0690> (3, 2)
12/09/2023 11:06:53 AM Pawn (3, 2) is empty appended moves [(2, 2), (3, 2)]
12/09/2023 11:06:53 AM Pawn ReturnPossibleMove(): returning values: ([(2, 2), (3, 2)], [])
12/09/2023 11:06:53 AM RenderPossibleMoves(): moves and attacks after: ([(2, 2), (3, 2)], [])
12/09/2023 11:06:53 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001BA9FDC21D0> moves and attacks before: ([(2, 2), (3, 2)], [])
12/09/2023 11:06:53 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:06:53 AM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 11:06:53 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:06:53 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001BA9FDC0890> (2, 3)
12/09/2023 11:06:53 AM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 11:06:53 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:06:53 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001BA9FDC1350> (3, 3)
12/09/2023 11:06:53 AM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 11:06:53 AM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 11:06:53 AM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 11:06:54 AM RenderPossibleMoves(): choosen figure: <classes.piece.Queen object at 0x000001BA9FDC2610> moves and attacks before: ([], [])
12/09/2023 11:06:54 AM RenderPossibleMoves(): moves and attacks after: ([(6, 4), (5, 5), (4, 6), (3, 7)], [])
12/09/2023 11:06:56 AM RenderPossibleMoves(): choosen figure: <classes.piece.Bishop object at 0x000001BA9FC49910> moves and attacks before: ([], [])
12/09/2023 11:06:56 AM RenderPossibleMoves(): moves and attacks after: ([(1, 3), (2, 4), (3, 5)], [(4, 6)])
12/09/2023 11:07:34 AM Launching Main.py
12/09/2023 11:07:35 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000116642C4590> moves and attacks before: ([], [])
12/09/2023 11:07:35 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:07:35 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:07:35 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:07:35 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000116642C4690> (5, 3)
12/09/2023 11:07:35 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:07:35 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:07:35 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000116642C6CD0> (4, 3)
12/09/2023 11:07:35 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:07:35 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:07:35 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:07:35 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000116642C6B10> moves and attacks before: ([], [])
12/09/2023 11:07:35 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:07:35 AM Pawn Figure info: (1, 4, 'b', 'p')
12/09/2023 11:07:35 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:07:35 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000116642C5610> (2, 4)
12/09/2023 11:07:35 AM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 11:07:35 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:07:35 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000116642C5550> (3, 4)
12/09/2023 11:07:35 AM Pawn (3, 4) is empty appended moves [(2, 4), (3, 4)]
12/09/2023 11:07:35 AM Pawn ReturnPossibleMove(): returning values: ([(2, 4), (3, 4)], [])
12/09/2023 11:07:35 AM RenderPossibleMoves(): moves and attacks after: ([(2, 4), (3, 4)], [])
12/09/2023 11:07:36 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000116642C4590> moves and attacks before: ([], [])
12/09/2023 11:07:36 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:07:36 AM Pawn Figure info: (4, 3, 'w', 'p')
12/09/2023 11:07:36 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:07:36 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000116642C7A50> (3, 3)
12/09/2023 11:07:36 AM Pawn (3, 3) is empty appended moves [(3, 3)]
12/09/2023 11:07:36 AM Pawn ReturnPossibleMove(): returning values: ([(3, 3)], [(3, 4)])
12/09/2023 11:07:36 AM RenderPossibleMoves(): moves and attacks after: ([(3, 3)], [(3, 4)])
12/09/2023 11:07:49 AM Launching Main.py
12/09/2023 11:07:50 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000022B08C988D0> moves and attacks before: ([], [])
12/09/2023 11:07:50 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:07:50 AM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 11:07:50 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:07:50 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000022B08C92790> (5, 2)
12/09/2023 11:07:50 AM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 11:07:50 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:07:50 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000022B08C91ED0> (4, 2)
12/09/2023 11:07:50 AM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 11:07:50 AM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 11:07:50 AM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 11:07:51 AM RenderPossibleMoves(): choosen figure: None moves and attacks before: ([], [])
12/09/2023 11:10:26 AM Launching Main.py
12/09/2023 11:10:31 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000161CA0F6190> moves and attacks before: ([], [])
12/09/2023 11:10:31 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:10:31 AM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 11:10:31 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:10:31 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000161CA0F7E10> (5, 4)
12/09/2023 11:10:31 AM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 11:10:31 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:10:31 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000161CA0F6D90> (4, 4)
12/09/2023 11:10:31 AM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 11:10:31 AM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 11:10:31 AM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 11:10:32 AM RenderPossibleMoves(): choosen figure: None moves and attacks before: ([], [])
12/09/2023 11:12:27 AM Launching Main.py
12/09/2023 11:12:28 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002023DAC5B50> moves and attacks before: ([], [])
12/09/2023 11:12:28 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:12:28 AM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 11:12:28 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:12:28 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002023DAC7910> (5, 4)
12/09/2023 11:12:28 AM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 11:12:28 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:12:28 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002023DAC6A50> (4, 4)
12/09/2023 11:12:28 AM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 11:12:28 AM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 11:12:28 AM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 11:13:30 AM Launching Main.py
12/09/2023 11:13:31 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001E843E88350> moves and attacks before: ([], [])
12/09/2023 11:13:31 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:13:31 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:13:31 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:13:31 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001E843E8A2D0> (5, 3)
12/09/2023 11:13:31 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:13:31 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:13:31 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001E843E8AB10> (4, 3)
12/09/2023 11:13:31 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:13:31 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:13:31 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:13:41 AM Launching Main.py
12/09/2023 11:13:43 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000208998B8350> moves and attacks before: ([], [])
12/09/2023 11:13:43 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:13:43 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:13:43 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:13:43 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000208998BA2D0> (5, 3)
12/09/2023 11:13:43 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:13:43 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:13:43 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000208998BAB10> (4, 3)
12/09/2023 11:13:43 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:13:43 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:13:43 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:13:46 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000208997527D0> moves and attacks before: ([], [])
12/09/2023 11:13:46 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:13:46 AM Pawn Figure info: (1, 2, 'b', 'p')
12/09/2023 11:13:46 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:13:46 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000208998B9750> (2, 2)
12/09/2023 11:13:46 AM Pawn (2, 2) is empty appended moves [(2, 2)]
12/09/2023 11:13:46 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:13:46 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000208998B8810> (3, 2)
12/09/2023 11:13:46 AM Pawn (3, 2) is empty appended moves [(2, 2), (3, 2)]
12/09/2023 11:13:46 AM Pawn ReturnPossibleMove(): returning values: ([(2, 2), (3, 2)], [])
12/09/2023 11:13:46 AM RenderPossibleMoves(): moves and attacks after: ([(2, 2), (3, 2)], [])
12/09/2023 11:13:47 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000208998B8350> moves and attacks before: ([], [])
12/09/2023 11:13:47 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:13:47 AM Pawn Figure info: (4, 3, 'w', 'p')
12/09/2023 11:13:47 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:13:47 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000208998B8750> (3, 3)
12/09/2023 11:13:47 AM Pawn (3, 3) is empty appended moves [(3, 3)]
12/09/2023 11:13:47 AM Pawn ReturnPossibleMove(): returning values: ([(3, 3)], [])
12/09/2023 11:13:47 AM RenderPossibleMoves(): moves and attacks after: ([(3, 3)], [])
12/09/2023 11:13:48 AM Launching Main.py
12/09/2023 11:13:49 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000251278B8350> moves and attacks before: ([], [])
12/09/2023 11:13:49 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:13:49 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:13:49 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:13:49 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000251278BA2D0> (5, 3)
12/09/2023 11:13:49 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:13:49 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:13:49 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000251278BAB10> (4, 3)
12/09/2023 11:13:49 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:13:49 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:13:49 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:13:50 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000251277527D0> moves and attacks before: ([], [])
12/09/2023 11:13:50 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:13:50 AM Pawn Figure info: (1, 2, 'b', 'p')
12/09/2023 11:13:50 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:13:50 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000251278B9750> (2, 2)
12/09/2023 11:13:50 AM Pawn (2, 2) is empty appended moves [(2, 2)]
12/09/2023 11:13:50 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:13:50 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000251278B8810> (3, 2)
12/09/2023 11:13:50 AM Pawn (3, 2) is empty appended moves [(2, 2), (3, 2)]
12/09/2023 11:13:50 AM Pawn ReturnPossibleMove(): returning values: ([(2, 2), (3, 2)], [])
12/09/2023 11:13:50 AM RenderPossibleMoves(): moves and attacks after: ([(2, 2), (3, 2)], [])
12/09/2023 11:15:06 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000251278BACD0> moves and attacks before: ([], [])
12/09/2023 11:15:06 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:15:06 AM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 11:15:06 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:15:06 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000251278B8C10> (5, 2)
12/09/2023 11:15:06 AM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 11:15:06 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:15:06 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000251278B8D90> (4, 2)
12/09/2023 11:15:06 AM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 11:15:06 AM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 11:15:06 AM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 11:15:07 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000251278B9DD0> moves and attacks before: ([], [])
12/09/2023 11:15:07 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:15:07 AM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 11:15:07 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:15:07 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000251278B9850> (2, 3)
12/09/2023 11:15:07 AM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 11:15:07 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:15:07 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000251278B8750> (3, 3)
12/09/2023 11:15:07 AM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 11:15:07 AM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 11:15:07 AM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 11:15:08 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000251278B8490> moves and attacks before: ([], [])
12/09/2023 11:15:08 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:15:08 AM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 11:15:08 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:15:08 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000251278BA210> (5, 4)
12/09/2023 11:15:08 AM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 11:15:08 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:15:08 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000251278BAC50> (4, 4)
12/09/2023 11:15:08 AM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 11:15:08 AM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 11:15:08 AM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 11:15:09 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000251278B9DD0> moves and attacks before: ([], [])
12/09/2023 11:15:09 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:15:09 AM Pawn Figure info: (3, 3, 'b', 'p')
12/09/2023 11:15:09 AM Pawn attempting check on board[x-a][y]: False
12/09/2023 11:15:09 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000251278BAB10> (4, 3)
12/09/2023 11:15:09 AM Pawn ReturnPossibleMove(): returning values: ([], [(4, 4), (4, 2)])
12/09/2023 11:15:09 AM RenderPossibleMoves(): moves and attacks after: ([], [(4, 4), (4, 2)])
12/09/2023 11:16:08 AM Launching Main.py
12/09/2023 11:16:09 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000202855782D0> moves and attacks before: ([], [])
12/09/2023 11:16:09 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:16:09 AM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 11:16:09 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:16:09 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002028557A110> (5, 5)
12/09/2023 11:16:09 AM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 11:16:09 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:16:09 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002028557AAD0> (4, 5)
12/09/2023 11:16:09 AM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 11:16:09 AM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 11:16:09 AM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 11:16:10 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000020285579F50> moves and attacks before: ([], [])
12/09/2023 11:16:10 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:16:10 AM Pawn Figure info: (1, 4, 'b', 'p')
12/09/2023 11:16:10 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:16:10 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000202855795D0> (2, 4)
12/09/2023 11:16:10 AM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 11:16:10 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:16:10 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000020285578890> (3, 4)
12/09/2023 11:16:10 AM Pawn (3, 4) is empty appended moves [(2, 4), (3, 4)]
12/09/2023 11:16:10 AM Pawn ReturnPossibleMove(): returning values: ([(2, 4), (3, 4)], [])
12/09/2023 11:16:10 AM RenderPossibleMoves(): moves and attacks after: ([(2, 4), (3, 4)], [])
12/09/2023 11:16:11 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000202855782D0> moves and attacks before: ([], [])
12/09/2023 11:16:11 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:16:11 AM Pawn Figure info: (4, 5, 'w', 'p')
12/09/2023 11:16:11 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:16:11 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000020285578A90> (3, 5)
12/09/2023 11:16:11 AM Pawn (3, 5) is empty appended moves [(3, 5)]
12/09/2023 11:16:11 AM Pawn ReturnPossibleMove(): returning values: ([(3, 5)], [(3, 4)])
12/09/2023 11:16:11 AM RenderPossibleMoves(): moves and attacks after: ([(3, 5)], [(3, 4)])
12/09/2023 11:16:14 AM Launching Main.py
12/09/2023 11:16:16 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000201E61A8490> moves and attacks before: ([], [])
12/09/2023 11:16:16 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:16:16 AM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 11:16:16 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:16:16 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000201E61AA210> (5, 4)
12/09/2023 11:16:16 AM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 11:16:16 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:16:16 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000201E61AAC50> (4, 4)
12/09/2023 11:16:16 AM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 11:16:16 AM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 11:16:16 AM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 11:16:58 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000201E61A8190> moves and attacks before: ([], [])
12/09/2023 11:16:58 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:16:58 AM Pawn Figure info: (1, 5, 'b', 'p')
12/09/2023 11:16:58 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:16:58 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000201E61AA450> (2, 5)
12/09/2023 11:16:58 AM Pawn (2, 5) is empty appended moves [(2, 5)]
12/09/2023 11:16:58 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:16:58 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000201E61A8A90> (3, 5)
12/09/2023 11:16:58 AM Pawn (3, 5) is empty appended moves [(2, 5), (3, 5)]
12/09/2023 11:16:58 AM Pawn ReturnPossibleMove(): returning values: ([(2, 5), (3, 5)], [])
12/09/2023 11:16:58 AM RenderPossibleMoves(): moves and attacks after: ([(2, 5), (3, 5)], [])
12/09/2023 11:16:59 AM RenderPossibleMoves(): choosen figure: <classes.piece.Queen object at 0x00000201E61AA9D0> moves and attacks before: ([], [])
12/09/2023 11:16:59 AM RenderPossibleMoves(): moves and attacks after: ([(6, 4), (5, 5), (4, 6), (3, 7)], [])
12/09/2023 11:17:02 AM RenderPossibleMoves(): choosen figure: <classes.piece.King object at 0x00000201E60283D0> moves and attacks before: ([], [])
12/09/2023 11:20:47 AM Launching Main.py
12/09/2023 11:20:48 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000025E758F8210> moves and attacks before: ([], [])
12/09/2023 11:20:48 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:20:48 AM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 11:20:48 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:20:48 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000025E758FB910> (5, 4)
12/09/2023 11:20:48 AM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 11:20:48 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:20:48 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000025E758FBC50> (4, 4)
12/09/2023 11:20:48 AM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 11:20:48 AM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 11:20:48 AM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 11:20:48 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000025E758F9010> moves and attacks before: ([], [])
12/09/2023 11:20:48 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:20:48 AM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 11:20:48 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:20:48 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000025E758F3B50> (2, 3)
12/09/2023 11:20:48 AM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 11:20:48 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:20:48 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000025E758F2110> (3, 3)
12/09/2023 11:20:48 AM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 11:20:48 AM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 11:20:48 AM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 11:20:49 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000025E758F8210> moves and attacks before: ([], [])
12/09/2023 11:20:49 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:20:49 AM Pawn Figure info: (4, 4, 'w', 'p')
12/09/2023 11:20:49 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:20:49 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000025E758F24D0> (3, 4)
12/09/2023 11:20:49 AM Pawn (3, 4) is empty appended moves [(3, 4)]
12/09/2023 11:20:49 AM Pawn ReturnPossibleMove(): returning values: ([(3, 4)], [(3, 3)])
12/09/2023 11:20:49 AM RenderPossibleMoves(): moves and attacks after: ([(3, 4)], [(3, 3)])
12/09/2023 11:21:20 AM Launching Main.py
12/09/2023 11:21:22 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000023AB5AD8290> moves and attacks before: ([], [])
12/09/2023 11:21:22 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:21:22 AM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 11:21:22 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:21:22 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000023AB5AD8B10> (5, 4)
12/09/2023 11:21:22 AM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 11:21:22 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:21:22 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000023AB5AD9AD0> (4, 4)
12/09/2023 11:21:22 AM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 11:21:22 AM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 11:21:22 AM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 11:21:25 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000023AB5AD8390> moves and attacks before: ([], [])
12/09/2023 11:21:25 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:21:25 AM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 11:21:25 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:21:25 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000023AB5ADACD0> (2, 3)
12/09/2023 11:21:25 AM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 11:21:25 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:21:25 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000023AB5AD9B90> (3, 3)
12/09/2023 11:21:25 AM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 11:21:25 AM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 11:21:25 AM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 11:22:34 AM Launching Main.py
12/09/2023 11:22:34 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EC14B98110> moves and attacks before: ([], [])
12/09/2023 11:22:34 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:22:34 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:22:34 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:22:34 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EC14B989D0> (5, 3)
12/09/2023 11:22:34 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:22:34 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:22:34 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EC14B999D0> (4, 3)
12/09/2023 11:22:34 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:22:34 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:22:34 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:22:35 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EC14B98110> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 11:22:35 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:22:35 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:22:35 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:22:35 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EC14B989D0> (5, 3)
12/09/2023 11:22:35 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:22:35 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:22:35 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EC14B999D0> (4, 3)
12/09/2023 11:22:35 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:22:35 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:22:35 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:22:35 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EC14B98110> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 11:22:35 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:22:35 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:22:35 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:22:35 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EC14B989D0> (5, 3)
12/09/2023 11:22:35 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:22:35 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:22:35 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EC14B999D0> (4, 3)
12/09/2023 11:22:35 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:22:35 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:22:35 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:22:36 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EC14B98110> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 11:22:36 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:22:36 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:22:36 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:22:36 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EC14B989D0> (5, 3)
12/09/2023 11:22:36 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:22:36 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:22:36 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EC14B999D0> (4, 3)
12/09/2023 11:22:36 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:22:36 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:22:36 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:23:30 AM Launching Main.py
12/09/2023 11:23:31 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001B0944D81D0> moves and attacks before: ([], [])
12/09/2023 11:23:31 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:23:31 AM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 11:23:31 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:23:31 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001B0944D9990> (5, 5)
12/09/2023 11:23:31 AM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 11:23:31 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:23:31 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001B0944D9A50> (4, 5)
12/09/2023 11:23:31 AM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 11:23:31 AM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 11:23:31 AM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 11:23:33 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001B0944D8E90> moves and attacks before: ([], [])
12/09/2023 11:23:33 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:23:33 AM Pawn Figure info: (1, 4, 'b', 'p')
12/09/2023 11:23:33 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:23:33 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001B0944D2250> (2, 4)
12/09/2023 11:23:33 AM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 11:23:33 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:23:33 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001B0944DAA90> (3, 4)
12/09/2023 11:23:33 AM Pawn (3, 4) is empty appended moves [(2, 4), (3, 4)]
12/09/2023 11:23:33 AM Pawn ReturnPossibleMove(): returning values: ([(2, 4), (3, 4)], [])
12/09/2023 11:23:33 AM RenderPossibleMoves(): moves and attacks after: ([(2, 4), (3, 4)], [])
12/09/2023 11:26:02 AM Launching Main.py
12/09/2023 11:26:03 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000254FFB5A310> moves and attacks before: ([], [])
12/09/2023 11:26:03 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:26:03 AM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 11:26:03 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:26:03 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000254FFB5A790> (5, 4)
12/09/2023 11:26:03 AM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 11:26:03 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:26:03 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000254FFB5B910> (4, 4)
12/09/2023 11:26:03 AM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 11:26:03 AM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 11:26:03 AM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 11:36:59 AM Launching Main.py
12/09/2023 11:37:00 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001F24316DF50> moves and attacks before: ([], [])
12/09/2023 11:37:00 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:37:00 AM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 11:37:00 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:37:00 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001F24316EE90> (5, 4)
12/09/2023 11:37:00 AM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 11:37:00 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:37:00 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001F24316CB90> (4, 4)
12/09/2023 11:37:00 AM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 11:37:00 AM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 11:37:00 AM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 11:37:01 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001F24316C210> moves and attacks before: ([], [])
12/09/2023 11:37:01 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:37:01 AM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 11:37:01 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:37:01 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001F24316D7D0> (2, 3)
12/09/2023 11:37:01 AM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 11:37:01 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:37:01 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001F24316D990> (3, 3)
12/09/2023 11:37:01 AM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 11:37:01 AM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 11:37:01 AM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 11:37:01 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001F24316DF50> moves and attacks before: ([], [])
12/09/2023 11:37:01 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:37:01 AM Pawn Figure info: (4, 4, 'w', 'p')
12/09/2023 11:37:01 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:37:01 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001F24316DAD0> (3, 4)
12/09/2023 11:37:01 AM Pawn (3, 4) is empty appended moves [(3, 4)]
12/09/2023 11:37:01 AM Pawn ReturnPossibleMove(): returning values: ([(3, 4)], [(3, 3)])
12/09/2023 11:37:01 AM RenderPossibleMoves(): moves and attacks after: ([(3, 4)], [(3, 3)])
12/09/2023 11:37:03 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001F24316F310> moves and attacks before: ([], [])
12/09/2023 11:37:03 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:37:03 AM Pawn Figure info: (1, 5, 'b', 'p')
12/09/2023 11:37:03 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:37:03 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001F24316DE90> (2, 5)
12/09/2023 11:37:03 AM Pawn (2, 5) is empty appended moves [(2, 5)]
12/09/2023 11:37:03 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:37:03 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001F24316D950> (3, 5)
12/09/2023 11:37:03 AM Pawn (3, 5) is empty appended moves [(2, 5), (3, 5)]
12/09/2023 11:37:03 AM Pawn ReturnPossibleMove(): returning values: ([(2, 5), (3, 5)], [])
12/09/2023 11:37:03 AM RenderPossibleMoves(): moves and attacks after: ([(2, 5), (3, 5)], [])
12/09/2023 11:37:04 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001F24316DF50> moves and attacks before: ([], [])
12/09/2023 11:37:04 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:37:04 AM Pawn Figure info: (3, 4, 'w', 'p')
12/09/2023 11:37:04 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:37:04 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001F24316DC90> (2, 4)
12/09/2023 11:37:04 AM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 11:37:04 AM Pawn ReturnPossibleMove(): returning values: ([(2, 4)], [(2, 5)])
12/09/2023 11:37:04 AM RenderPossibleMoves(): moves and attacks after: ([(2, 4)], [(2, 5)])
12/09/2023 11:37:07 AM Launching Main.py
12/09/2023 11:37:08 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001B023F0C210> moves and attacks before: ([], [])
12/09/2023 11:37:08 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:37:08 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:37:08 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:37:08 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001B023F0D750> (5, 3)
12/09/2023 11:37:08 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:37:08 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:37:08 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001B023F0D6D0> (4, 3)
12/09/2023 11:37:08 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:37:08 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:37:08 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:37:08 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001B023F0D210> moves and attacks before: ([], [])
12/09/2023 11:37:08 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:37:08 AM Pawn Figure info: (1, 4, 'b', 'p')
12/09/2023 11:37:08 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:37:08 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001B023F06290> (2, 4)
12/09/2023 11:37:08 AM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 11:37:08 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:37:08 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001B023F0ED10> (3, 4)
12/09/2023 11:37:08 AM Pawn (3, 4) is empty appended moves [(2, 4), (3, 4)]
12/09/2023 11:37:08 AM Pawn ReturnPossibleMove(): returning values: ([(2, 4), (3, 4)], [])
12/09/2023 11:37:08 AM RenderPossibleMoves(): moves and attacks after: ([(2, 4), (3, 4)], [])
12/09/2023 11:37:09 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001B023F0C210> moves and attacks before: ([], [])
12/09/2023 11:37:09 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:37:09 AM Pawn Figure info: (4, 3, 'w', 'p')
12/09/2023 11:37:09 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:37:09 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001B023F0E910> (3, 3)
12/09/2023 11:37:09 AM Pawn (3, 3) is empty appended moves [(3, 3)]
12/09/2023 11:37:09 AM Pawn ReturnPossibleMove(): returning values: ([(3, 3)], [(3, 4)])
12/09/2023 11:37:09 AM RenderPossibleMoves(): moves and attacks after: ([(3, 3)], [(3, 4)])
12/09/2023 11:37:11 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001B023F0C210> moves and attacks before: ([(3, 3)], [(3, 4)])
12/09/2023 11:37:11 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:37:11 AM Pawn Figure info: (4, 3, 'w', 'p')
12/09/2023 11:37:11 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:37:11 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001B023F0E910> (3, 3)
12/09/2023 11:37:11 AM Pawn (3, 3) is empty appended moves [(3, 3)]
12/09/2023 11:37:11 AM Pawn ReturnPossibleMove(): returning values: ([(3, 3)], [(3, 4)])
12/09/2023 11:37:11 AM RenderPossibleMoves(): moves and attacks after: ([(3, 3)], [(3, 4)])
12/09/2023 11:37:12 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001B023F0C210> moves and attacks before: ([(3, 3)], [(3, 4)])
12/09/2023 11:37:12 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:37:12 AM Pawn Figure info: (4, 3, 'w', 'p')
12/09/2023 11:37:12 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:37:12 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001B023F0E910> (3, 3)
12/09/2023 11:37:12 AM Pawn (3, 3) is empty appended moves [(3, 3)]
12/09/2023 11:37:12 AM Pawn ReturnPossibleMove(): returning values: ([(3, 3)], [(3, 4)])
12/09/2023 11:37:12 AM RenderPossibleMoves(): moves and attacks after: ([(3, 3)], [(3, 4)])
12/09/2023 11:37:13 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001B023F0C210> moves and attacks before: ([(3, 3)], [(3, 4)])
12/09/2023 11:37:13 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:37:13 AM Pawn Figure info: (4, 3, 'w', 'p')
12/09/2023 11:37:13 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:37:13 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001B023F0E910> (3, 3)
12/09/2023 11:37:13 AM Pawn (3, 3) is empty appended moves [(3, 3)]
12/09/2023 11:37:13 AM Pawn ReturnPossibleMove(): returning values: ([(3, 3)], [(3, 4)])
12/09/2023 11:37:13 AM RenderPossibleMoves(): moves and attacks after: ([(3, 3)], [(3, 4)])
12/09/2023 11:37:23 AM Launching Main.py
12/09/2023 11:37:24 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EB9B22C210> moves and attacks before: ([], [])
12/09/2023 11:37:24 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:37:24 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:37:24 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:37:24 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22D750> (5, 3)
12/09/2023 11:37:24 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:37:24 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:37:24 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22D6D0> (4, 3)
12/09/2023 11:37:24 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:37:24 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:37:24 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:37:24 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EB9B22D210> moves and attacks before: ([], [])
12/09/2023 11:37:24 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:37:24 AM Pawn Figure info: (1, 4, 'b', 'p')
12/09/2023 11:37:24 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:37:24 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B226290> (2, 4)
12/09/2023 11:37:24 AM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 11:37:24 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:37:24 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22ED10> (3, 4)
12/09/2023 11:37:24 AM Pawn (3, 4) is empty appended moves [(2, 4), (3, 4)]
12/09/2023 11:37:24 AM Pawn ReturnPossibleMove(): returning values: ([(2, 4), (3, 4)], [])
12/09/2023 11:37:24 AM RenderPossibleMoves(): moves and attacks after: ([(2, 4), (3, 4)], [])
12/09/2023 11:37:26 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EB9B22C2D0> moves and attacks before: ([], [])
12/09/2023 11:37:26 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:37:26 AM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 11:37:26 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:37:26 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22DB10> (5, 4)
12/09/2023 11:37:26 AM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 11:37:26 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:37:26 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22DC90> (4, 4)
12/09/2023 11:37:26 AM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 11:37:26 AM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 11:37:26 AM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 11:37:31 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EB9B22D210> moves and attacks before: ([], [])
12/09/2023 11:37:31 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:37:31 AM Pawn Figure info: (3, 4, 'b', 'p')
12/09/2023 11:37:31 AM Pawn attempting check on board[x-a][y]: False
12/09/2023 11:37:31 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22DC90> (4, 4)
12/09/2023 11:37:31 AM Pawn ReturnPossibleMove(): returning values: ([], [(4, 3)])
12/09/2023 11:37:31 AM RenderPossibleMoves(): moves and attacks after: ([], [(4, 3)])
12/09/2023 11:37:34 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EB9B22D210> moves and attacks before: ([], [(4, 3)])
12/09/2023 11:37:34 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:37:34 AM Pawn Figure info: (3, 4, 'b', 'p')
12/09/2023 11:37:34 AM Pawn attempting check on board[x-a][y]: False
12/09/2023 11:37:34 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22DC90> (4, 4)
12/09/2023 11:37:34 AM Pawn ReturnPossibleMove(): returning values: ([], [(4, 3)])
12/09/2023 11:37:34 AM RenderPossibleMoves(): moves and attacks after: ([], [(4, 3)])
12/09/2023 11:37:35 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EB9B22D210> moves and attacks before: ([], [(4, 3)])
12/09/2023 11:37:35 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:37:35 AM Pawn Figure info: (3, 4, 'b', 'p')
12/09/2023 11:37:35 AM Pawn attempting check on board[x-a][y]: False
12/09/2023 11:37:35 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22DC90> (4, 4)
12/09/2023 11:37:35 AM Pawn ReturnPossibleMove(): returning values: ([], [(4, 3)])
12/09/2023 11:37:35 AM RenderPossibleMoves(): moves and attacks after: ([], [(4, 3)])
12/09/2023 11:37:35 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EB9B22D210> moves and attacks before: ([], [(4, 3)])
12/09/2023 11:37:35 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:37:35 AM Pawn Figure info: (3, 4, 'b', 'p')
12/09/2023 11:37:35 AM Pawn attempting check on board[x-a][y]: False
12/09/2023 11:37:35 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22DC90> (4, 4)
12/09/2023 11:37:35 AM Pawn ReturnPossibleMove(): returning values: ([], [(4, 3)])
12/09/2023 11:37:35 AM RenderPossibleMoves(): moves and attacks after: ([], [(4, 3)])
12/09/2023 11:37:37 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EB9B22CDD0> moves and attacks before: ([], [(4, 3)])
12/09/2023 11:37:37 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:37:37 AM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 11:37:37 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:37:37 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B227B50> (2, 3)
12/09/2023 11:37:37 AM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 11:37:37 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:37:37 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22E910> (3, 3)
12/09/2023 11:37:37 AM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 11:37:37 AM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 11:37:37 AM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 11:37:38 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EB9B22C2D0> moves and attacks before: ([], [])
12/09/2023 11:37:38 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:37:38 AM Pawn Figure info: (4, 4, 'w', 'p')
12/09/2023 11:37:38 AM Pawn attempting check on board[x-a][y]: False
12/09/2023 11:37:38 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22ED10> (3, 4)
12/09/2023 11:37:38 AM Pawn ReturnPossibleMove(): returning values: ([], [(3, 3)])
12/09/2023 11:37:38 AM RenderPossibleMoves(): moves and attacks after: ([], [(3, 3)])
12/09/2023 11:37:42 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EB9B22C2D0> moves and attacks before: ([], [(3, 3)])
12/09/2023 11:37:42 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:37:42 AM Pawn Figure info: (4, 4, 'w', 'p')
12/09/2023 11:37:42 AM Pawn attempting check on board[x-a][y]: False
12/09/2023 11:37:42 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22ED10> (3, 4)
12/09/2023 11:37:42 AM Pawn ReturnPossibleMove(): returning values: ([], [(3, 3)])
12/09/2023 11:37:42 AM RenderPossibleMoves(): moves and attacks after: ([], [(3, 3)])
12/09/2023 11:39:00 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EB9B22C210> moves and attacks before: ([], [(3, 3)])
12/09/2023 11:39:00 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:39:00 AM Pawn Figure info: (4, 3, 'w', 'p')
12/09/2023 11:39:00 AM Pawn attempting check on board[x-a][y]: False
12/09/2023 11:39:00 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22E910> (3, 3)
12/09/2023 11:39:00 AM Pawn ReturnPossibleMove(): returning values: ([], [(3, 4)])
12/09/2023 11:39:00 AM RenderPossibleMoves(): moves and attacks after: ([], [(3, 4)])
12/09/2023 11:39:01 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EB9B22C210> moves and attacks before: ([], [(3, 4)])
12/09/2023 11:39:01 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:39:01 AM Pawn Figure info: (4, 3, 'w', 'p')
12/09/2023 11:39:01 AM Pawn attempting check on board[x-a][y]: False
12/09/2023 11:39:01 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22E910> (3, 3)
12/09/2023 11:39:01 AM Pawn ReturnPossibleMove(): returning values: ([], [(3, 4)])
12/09/2023 11:39:01 AM RenderPossibleMoves(): moves and attacks after: ([], [(3, 4)])
12/09/2023 11:39:02 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EB9B22C210> moves and attacks before: ([], [(3, 4)])
12/09/2023 11:39:02 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:39:02 AM Pawn Figure info: (4, 3, 'w', 'p')
12/09/2023 11:39:02 AM Pawn attempting check on board[x-a][y]: False
12/09/2023 11:39:02 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22E910> (3, 3)
12/09/2023 11:39:02 AM Pawn ReturnPossibleMove(): returning values: ([], [(3, 4)])
12/09/2023 11:39:02 AM RenderPossibleMoves(): moves and attacks after: ([], [(3, 4)])
12/09/2023 11:39:02 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EB9B22C210> moves and attacks before: ([], [(3, 4)])
12/09/2023 11:39:02 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:39:02 AM Pawn Figure info: (4, 3, 'w', 'p')
12/09/2023 11:39:02 AM Pawn attempting check on board[x-a][y]: False
12/09/2023 11:39:02 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22E910> (3, 3)
12/09/2023 11:39:02 AM Pawn ReturnPossibleMove(): returning values: ([], [(3, 4)])
12/09/2023 11:39:02 AM RenderPossibleMoves(): moves and attacks after: ([], [(3, 4)])
12/09/2023 11:39:02 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EB9B22C210> moves and attacks before: ([], [(3, 4)])
12/09/2023 11:39:02 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:39:02 AM Pawn Figure info: (4, 3, 'w', 'p')
12/09/2023 11:39:02 AM Pawn attempting check on board[x-a][y]: False
12/09/2023 11:39:02 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22E910> (3, 3)
12/09/2023 11:39:02 AM Pawn ReturnPossibleMove(): returning values: ([], [(3, 4)])
12/09/2023 11:39:02 AM RenderPossibleMoves(): moves and attacks after: ([], [(3, 4)])
12/09/2023 11:39:02 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EB9B22C210> moves and attacks before: ([], [(3, 4)])
12/09/2023 11:39:02 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:39:02 AM Pawn Figure info: (4, 3, 'w', 'p')
12/09/2023 11:39:02 AM Pawn attempting check on board[x-a][y]: False
12/09/2023 11:39:02 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22E910> (3, 3)
12/09/2023 11:39:02 AM Pawn ReturnPossibleMove(): returning values: ([], [(3, 4)])
12/09/2023 11:39:02 AM RenderPossibleMoves(): moves and attacks after: ([], [(3, 4)])
12/09/2023 11:39:37 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EB9B22D0D0> moves and attacks before: ([], [(3, 4)])
12/09/2023 11:39:37 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:39:37 AM Pawn Figure info: (6, 1, 'w', 'p')
12/09/2023 11:39:37 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:39:37 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22D8D0> (5, 1)
12/09/2023 11:39:37 AM Pawn (5, 1) is empty appended moves [(5, 1)]
12/09/2023 11:39:37 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:39:37 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22D5D0> (4, 1)
12/09/2023 11:39:37 AM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/09/2023 11:39:37 AM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/09/2023 11:39:37 AM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/09/2023 11:39:37 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EB9B22D0D0> moves and attacks before: ([(5, 1), (4, 1)], [])
12/09/2023 11:39:37 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:39:37 AM Pawn Figure info: (6, 1, 'w', 'p')
12/09/2023 11:39:37 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:39:37 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22D8D0> (5, 1)
12/09/2023 11:39:37 AM Pawn (5, 1) is empty appended moves [(5, 1)]
12/09/2023 11:39:37 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:39:37 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22D5D0> (4, 1)
12/09/2023 11:39:37 AM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/09/2023 11:39:37 AM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/09/2023 11:39:37 AM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/09/2023 11:39:39 AM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x000001EB9B22E1D0> moves and attacks before: ([(5, 1), (4, 1)], [])
12/09/2023 11:39:39 AM RenderPossibleMoves(): moves and attacks after: ([(6, 3), (5, 2), (5, 0)], [])
12/09/2023 11:39:46 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EB9B09B010> moves and attacks before: ([], [])
12/09/2023 11:39:46 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:39:46 AM Pawn Figure info: (1, 1, 'b', 'p')
12/09/2023 11:39:46 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:39:46 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B225910> (2, 1)
12/09/2023 11:39:46 AM Pawn (2, 1) is empty appended moves [(2, 1)]
12/09/2023 11:39:46 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:39:46 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22EAD0> (3, 1)
12/09/2023 11:39:46 AM Pawn (3, 1) is empty appended moves [(2, 1), (3, 1)]
12/09/2023 11:39:46 AM Pawn ReturnPossibleMove(): returning values: ([(2, 1), (3, 1)], [])
12/09/2023 11:39:46 AM RenderPossibleMoves(): moves and attacks after: ([(2, 1), (3, 1)], [])
12/09/2023 11:39:49 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EB9B22D0D0> moves and attacks before: ([], [])
12/09/2023 11:39:49 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:39:49 AM Pawn Figure info: (6, 1, 'w', 'p')
12/09/2023 11:39:49 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:39:49 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22D8D0> (5, 1)
12/09/2023 11:39:49 AM Pawn (5, 1) is empty appended moves [(5, 1)]
12/09/2023 11:39:49 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:39:49 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22D5D0> (4, 1)
12/09/2023 11:39:49 AM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/09/2023 11:39:49 AM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/09/2023 11:39:49 AM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/09/2023 11:40:10 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EB9B22CDD0> moves and attacks before: ([], [])
12/09/2023 11:40:10 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:40:10 AM Pawn Figure info: (3, 3, 'b', 'p')
12/09/2023 11:40:10 AM Pawn attempting check on board[x-a][y]: False
12/09/2023 11:40:10 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22D6D0> (4, 3)
12/09/2023 11:40:10 AM Pawn ReturnPossibleMove(): returning values: ([], [(4, 4)])
12/09/2023 11:40:10 AM RenderPossibleMoves(): moves and attacks after: ([], [(4, 4)])
12/09/2023 11:40:11 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EB9B22CDD0> moves and attacks before: ([], [(4, 4)])
12/09/2023 11:40:11 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:40:11 AM Pawn Figure info: (3, 3, 'b', 'p')
12/09/2023 11:40:11 AM Pawn attempting check on board[x-a][y]: False
12/09/2023 11:40:11 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22D6D0> (4, 3)
12/09/2023 11:40:11 AM Pawn ReturnPossibleMove(): returning values: ([], [(4, 4)])
12/09/2023 11:40:11 AM RenderPossibleMoves(): moves and attacks after: ([], [(4, 4)])
12/09/2023 11:40:12 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EB9B22C050> moves and attacks before: ([], [(4, 4)])
12/09/2023 11:40:12 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:40:12 AM Pawn Figure info: (1, 5, 'b', 'p')
12/09/2023 11:40:12 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:40:12 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B2261D0> (2, 5)
12/09/2023 11:40:12 AM Pawn (2, 5) is empty appended moves [(2, 5)]
12/09/2023 11:40:12 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:40:12 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EB9B22FAD0> (3, 5)
12/09/2023 11:40:12 AM Pawn (3, 5) is empty appended moves [(2, 5), (3, 5)]
12/09/2023 11:40:12 AM Pawn ReturnPossibleMove(): returning values: ([(2, 5), (3, 5)], [])
12/09/2023 11:40:12 AM RenderPossibleMoves(): moves and attacks after: ([(2, 5), (3, 5)], [])
12/09/2023 11:40:13 AM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x000001EB9B22E1D0> moves and attacks before: ([], [])
12/09/2023 11:40:13 AM RenderPossibleMoves(): moves and attacks after: ([(4, 0), (6, 4), (7, 1)], [(3, 3), (3, 1)])
12/09/2023 11:40:14 AM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x000001EB9B22E1D0> moves and attacks before: ([(4, 0), (6, 4), (7, 1)], [(3, 3), (3, 1)])
12/09/2023 11:40:14 AM RenderPossibleMoves(): moves and attacks after: ([(4, 0), (6, 4), (7, 1)], [(3, 3), (3, 1)])
12/09/2023 11:40:14 AM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x000001EB9B22E1D0> moves and attacks before: ([(4, 0), (6, 4), (7, 1)], [(3, 3), (3, 1)])
12/09/2023 11:40:14 AM RenderPossibleMoves(): moves and attacks after: ([(4, 0), (6, 4), (7, 1)], [(3, 3), (3, 1)])
12/09/2023 11:40:15 AM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x000001EB9B22E1D0> moves and attacks before: ([(4, 0), (6, 4), (7, 1)], [(3, 3), (3, 1)])
12/09/2023 11:40:15 AM RenderPossibleMoves(): moves and attacks after: ([(4, 0), (6, 4), (7, 1)], [(3, 3), (3, 1)])
12/09/2023 11:40:15 AM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x000001EB9B22E1D0> moves and attacks before: ([(4, 0), (6, 4), (7, 1)], [(3, 3), (3, 1)])
12/09/2023 11:40:15 AM RenderPossibleMoves(): moves and attacks after: ([(4, 0), (6, 4), (7, 1)], [(3, 3), (3, 1)])
12/09/2023 11:41:32 AM RenderPossibleMoves(): choosen figure: <classes.piece.Knight object at 0x000001EB9B22E1D0> moves and attacks before: ([(4, 0), (6, 4), (7, 1)], [(3, 3), (3, 1)])
12/09/2023 11:41:32 AM RenderPossibleMoves(): moves and attacks after: ([(4, 0), (6, 4), (7, 1)], [(3, 3), (3, 1)])
12/09/2023 11:44:47 AM Launching Main.py
12/09/2023 11:44:48 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C05D0> moves and attacks before: ([], [])
12/09/2023 11:44:48 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:44:48 AM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 11:44:48 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:44:48 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B6410> (5, 5)
12/09/2023 11:44:48 AM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 11:44:48 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:44:48 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B6050> (4, 5)
12/09/2023 11:44:48 AM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 11:44:48 AM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 11:44:48 AM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 11:45:20 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C1C10> moves and attacks before: ([], [])
12/09/2023 11:45:20 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:45:20 AM Pawn Figure info: (1, 4, 'b', 'p')
12/09/2023 11:45:20 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:20 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B4190> (2, 4)
12/09/2023 11:45:20 AM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 11:45:20 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:20 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B68D0> (3, 4)
12/09/2023 11:45:20 AM Pawn (3, 4) is empty appended moves [(2, 4), (3, 4)]
12/09/2023 11:45:20 AM Pawn ReturnPossibleMove(): returning values: ([(2, 4), (3, 4)], [])
12/09/2023 11:45:20 AM RenderPossibleMoves(): moves and attacks after: ([(2, 4), (3, 4)], [])
12/09/2023 11:45:20 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C05D0> moves and attacks before: ([], [])
12/09/2023 11:45:20 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:45:20 AM Pawn Figure info: (4, 5, 'w', 'p')
12/09/2023 11:45:20 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:20 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B6290> (3, 5)
12/09/2023 11:45:20 AM Pawn (3, 5) is empty appended moves [(3, 5)]
12/09/2023 11:45:20 AM Pawn ReturnPossibleMove(): returning values: ([(3, 5)], [(3, 4)])
12/09/2023 11:45:20 AM RenderPossibleMoves(): moves and attacks after: ([(3, 5)], [(3, 4)])
12/09/2023 11:45:23 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C05D0> moves and attacks before: ([(3, 5)], [(3, 4)])
12/09/2023 11:45:23 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:45:23 AM Pawn Figure info: (4, 5, 'w', 'p')
12/09/2023 11:45:23 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:23 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B6290> (3, 5)
12/09/2023 11:45:23 AM Pawn (3, 5) is empty appended moves [(3, 5)]
12/09/2023 11:45:23 AM Pawn ReturnPossibleMove(): returning values: ([(3, 5)], [(3, 4)])
12/09/2023 11:45:23 AM RenderPossibleMoves(): moves and attacks after: ([(3, 5)], [(3, 4)])
12/09/2023 11:45:23 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C05D0> moves and attacks before: ([(3, 5)], [(3, 4)])
12/09/2023 11:45:23 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:45:23 AM Pawn Figure info: (4, 5, 'w', 'p')
12/09/2023 11:45:23 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:23 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B6290> (3, 5)
12/09/2023 11:45:23 AM Pawn (3, 5) is empty appended moves [(3, 5)]
12/09/2023 11:45:23 AM Pawn ReturnPossibleMove(): returning values: ([(3, 5)], [(3, 4)])
12/09/2023 11:45:23 AM RenderPossibleMoves(): moves and attacks after: ([(3, 5)], [(3, 4)])
12/09/2023 11:45:24 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C05D0> moves and attacks before: ([(3, 5)], [(3, 4)])
12/09/2023 11:45:24 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:45:24 AM Pawn Figure info: (4, 5, 'w', 'p')
12/09/2023 11:45:24 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:24 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B6290> (3, 5)
12/09/2023 11:45:24 AM Pawn (3, 5) is empty appended moves [(3, 5)]
12/09/2023 11:45:24 AM Pawn ReturnPossibleMove(): returning values: ([(3, 5)], [(3, 4)])
12/09/2023 11:45:24 AM RenderPossibleMoves(): moves and attacks after: ([(3, 5)], [(3, 4)])
12/09/2023 11:45:25 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C04D0> moves and attacks before: ([(3, 5)], [(3, 4)])
12/09/2023 11:45:25 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:45:25 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:45:25 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:25 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B4390> (5, 3)
12/09/2023 11:45:25 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:45:25 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:25 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B75D0> (4, 3)
12/09/2023 11:45:25 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:45:25 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:25 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:26 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C04D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:26 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:45:26 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:45:26 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:26 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B4390> (5, 3)
12/09/2023 11:45:26 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:45:26 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:26 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B75D0> (4, 3)
12/09/2023 11:45:26 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:45:26 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:26 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:26 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C04D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:26 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:45:26 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:45:26 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:26 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B4390> (5, 3)
12/09/2023 11:45:26 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:45:26 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:26 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B75D0> (4, 3)
12/09/2023 11:45:26 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:45:26 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:26 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:26 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C04D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:26 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:45:26 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:45:26 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:26 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B4390> (5, 3)
12/09/2023 11:45:26 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:45:26 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:26 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B75D0> (4, 3)
12/09/2023 11:45:26 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:45:26 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:26 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:26 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C04D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:26 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:45:26 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:45:26 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:26 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B4390> (5, 3)
12/09/2023 11:45:26 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:45:26 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:26 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B75D0> (4, 3)
12/09/2023 11:45:26 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:45:26 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:26 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:26 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C04D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:26 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:45:26 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:45:26 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:26 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B4390> (5, 3)
12/09/2023 11:45:26 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:45:26 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:26 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B75D0> (4, 3)
12/09/2023 11:45:26 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:45:26 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:26 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:27 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C04D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:27 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:45:27 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:45:27 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:27 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B4390> (5, 3)
12/09/2023 11:45:27 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:45:27 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:27 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B75D0> (4, 3)
12/09/2023 11:45:27 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:45:27 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:27 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:27 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C04D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:27 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:45:27 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:45:27 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:27 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B4390> (5, 3)
12/09/2023 11:45:27 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:45:27 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:27 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B75D0> (4, 3)
12/09/2023 11:45:27 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:45:27 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:27 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:27 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C04D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:27 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:45:27 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:45:27 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:27 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B4390> (5, 3)
12/09/2023 11:45:27 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:45:27 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:27 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B75D0> (4, 3)
12/09/2023 11:45:27 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:45:27 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:27 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:27 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C04D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:27 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:45:27 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:45:27 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:27 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B4390> (5, 3)
12/09/2023 11:45:27 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:45:27 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:27 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B75D0> (4, 3)
12/09/2023 11:45:27 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:45:27 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:27 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:27 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C04D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:27 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:45:27 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:45:27 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:27 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B4390> (5, 3)
12/09/2023 11:45:27 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:45:27 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:27 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B75D0> (4, 3)
12/09/2023 11:45:27 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:45:27 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:27 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:27 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C04D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:27 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:45:27 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:45:27 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:27 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B4390> (5, 3)
12/09/2023 11:45:27 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:45:27 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:27 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B75D0> (4, 3)
12/09/2023 11:45:27 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:45:27 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:27 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:28 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C04D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:28 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:45:28 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:45:28 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:28 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B4390> (5, 3)
12/09/2023 11:45:28 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:45:28 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:28 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B75D0> (4, 3)
12/09/2023 11:45:28 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:45:28 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:28 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:28 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C04D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:28 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:45:28 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:45:28 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:28 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B4390> (5, 3)
12/09/2023 11:45:28 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:45:28 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:45:28 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B75D0> (4, 3)
12/09/2023 11:45:28 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:45:28 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:45:28 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:46:07 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C04D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 11:46:07 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:46:07 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:46:07 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:46:07 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B4390> (5, 3)
12/09/2023 11:46:07 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:46:07 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:46:07 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B75D0> (4, 3)
12/09/2023 11:46:07 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:46:07 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:46:07 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:46:09 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C3D90> moves and attacks before: ([], [])
12/09/2023 11:46:09 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:46:09 AM Pawn Figure info: (1, 2, 'b', 'p')
12/09/2023 11:46:09 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:46:09 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B5690> (2, 2)
12/09/2023 11:46:09 AM Pawn (2, 2) is empty appended moves [(2, 2)]
12/09/2023 11:46:09 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:46:09 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B66D0> (3, 2)
12/09/2023 11:46:09 AM Pawn (3, 2) is empty appended moves [(2, 2), (3, 2)]
12/09/2023 11:46:09 AM Pawn ReturnPossibleMove(): returning values: ([(2, 2), (3, 2)], [])
12/09/2023 11:46:09 AM RenderPossibleMoves(): moves and attacks after: ([(2, 2), (3, 2)], [])
12/09/2023 11:47:02 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C1810> moves and attacks before: ([(2, 2), (3, 2)], [])
12/09/2023 11:47:02 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:47:02 AM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 11:47:02 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:47:02 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B7610> (2, 3)
12/09/2023 11:47:02 AM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 11:47:02 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:47:02 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B6490> (3, 3)
12/09/2023 11:47:02 AM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 11:47:02 AM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 11:47:02 AM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 11:47:04 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C1810> moves and attacks before: ([(2, 3), (3, 3)], [])
12/09/2023 11:47:04 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:47:04 AM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 11:47:04 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:47:04 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B7610> (2, 3)
12/09/2023 11:47:04 AM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 11:47:04 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:47:04 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B6490> (3, 3)
12/09/2023 11:47:04 AM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 11:47:04 AM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 11:47:04 AM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 11:47:04 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C1810> moves and attacks before: ([(2, 3), (3, 3)], [])
12/09/2023 11:47:04 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:47:04 AM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 11:47:04 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:47:04 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B7610> (2, 3)
12/09/2023 11:47:04 AM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 11:47:04 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:47:04 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B6490> (3, 3)
12/09/2023 11:47:04 AM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 11:47:04 AM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 11:47:04 AM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 11:47:04 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C1810> moves and attacks before: ([(2, 3), (3, 3)], [])
12/09/2023 11:47:04 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:47:04 AM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 11:47:04 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:47:04 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B7610> (2, 3)
12/09/2023 11:47:04 AM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 11:47:04 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:47:04 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B6490> (3, 3)
12/09/2023 11:47:04 AM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 11:47:04 AM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 11:47:04 AM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 11:47:04 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C1810> moves and attacks before: ([(2, 3), (3, 3)], [])
12/09/2023 11:47:04 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:47:04 AM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 11:47:04 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:47:04 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B7610> (2, 3)
12/09/2023 11:47:04 AM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 11:47:04 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:47:04 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B6490> (3, 3)
12/09/2023 11:47:04 AM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 11:47:04 AM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 11:47:04 AM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 11:47:04 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C1810> moves and attacks before: ([(2, 3), (3, 3)], [])
12/09/2023 11:47:04 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:47:04 AM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 11:47:04 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:47:04 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B7610> (2, 3)
12/09/2023 11:47:04 AM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 11:47:04 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:47:04 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B6490> (3, 3)
12/09/2023 11:47:04 AM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 11:47:04 AM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 11:47:04 AM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 11:47:05 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C1810> moves and attacks before: ([(2, 3), (3, 3)], [])
12/09/2023 11:47:05 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:47:05 AM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 11:47:05 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:47:05 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B7610> (2, 3)
12/09/2023 11:47:05 AM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 11:47:05 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:47:05 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B6490> (3, 3)
12/09/2023 11:47:05 AM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 11:47:05 AM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 11:47:05 AM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 11:47:10 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029F1A4C1810> moves and attacks before: ([(2, 3), (3, 3)], [])
12/09/2023 11:47:10 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:47:10 AM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 11:47:10 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:47:10 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B7610> (2, 3)
12/09/2023 11:47:10 AM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 11:47:10 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:47:10 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029F1A4B6490> (3, 3)
12/09/2023 11:47:10 AM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 11:47:10 AM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 11:47:10 AM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 11:47:45 AM Launching Main.py
12/09/2023 11:47:48 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001802A8E2150> moves and attacks before: ([], [])
12/09/2023 11:47:48 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:47:48 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:47:48 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:47:48 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001802A8E1B10> (5, 3)
12/09/2023 11:47:48 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:47:48 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:47:48 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001802A8E1C90> (4, 3)
12/09/2023 11:47:48 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:47:48 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:47:48 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:47:52 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001802A8E1050> moves and attacks before: ([], [])
12/09/2023 11:47:52 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:47:52 AM Pawn Figure info: (1, 4, 'b', 'p')
12/09/2023 11:47:52 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:47:52 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001802A8D9910> (2, 4)
12/09/2023 11:47:52 AM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 11:47:52 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:47:52 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001802A8E3CD0> (3, 4)
12/09/2023 11:47:52 AM Pawn (3, 4) is empty appended moves [(2, 4), (3, 4)]
12/09/2023 11:47:52 AM Pawn ReturnPossibleMove(): returning values: ([(2, 4), (3, 4)], [])
12/09/2023 11:47:52 AM RenderPossibleMoves(): moves and attacks after: ([(2, 4), (3, 4)], [])
12/09/2023 11:47:53 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001802A8E1050> moves and attacks before: ([(2, 4), (3, 4)], [])
12/09/2023 11:47:53 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:47:53 AM Pawn Figure info: (1, 4, 'b', 'p')
12/09/2023 11:47:53 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:47:53 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001802A8D9910> (2, 4)
12/09/2023 11:47:53 AM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 11:47:53 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:47:53 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001802A8E3CD0> (3, 4)
12/09/2023 11:47:53 AM Pawn (3, 4) is empty appended moves [(2, 4), (3, 4)]
12/09/2023 11:47:53 AM Pawn ReturnPossibleMove(): returning values: ([(2, 4), (3, 4)], [])
12/09/2023 11:47:53 AM RenderPossibleMoves(): moves and attacks after: ([(2, 4), (3, 4)], [])
12/09/2023 11:48:05 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001802A8E1050> moves and attacks before: ([(2, 4), (3, 4)], [])
12/09/2023 11:48:05 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:48:05 AM Pawn Figure info: (1, 4, 'b', 'p')
12/09/2023 11:48:05 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:48:05 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001802A8D9910> (2, 4)
12/09/2023 11:48:05 AM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 11:48:05 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:48:05 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001802A8E3CD0> (3, 4)
12/09/2023 11:48:05 AM Pawn (3, 4) is empty appended moves [(2, 4), (3, 4)]
12/09/2023 11:48:05 AM Pawn ReturnPossibleMove(): returning values: ([(2, 4), (3, 4)], [])
12/09/2023 11:48:05 AM RenderPossibleMoves(): moves and attacks after: ([(2, 4), (3, 4)], [])
12/09/2023 11:48:06 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001802A8E1050> moves and attacks before: ([(2, 4), (3, 4)], [])
12/09/2023 11:48:06 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:48:06 AM Pawn Figure info: (1, 4, 'b', 'p')
12/09/2023 11:48:06 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:48:06 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001802A8D9910> (2, 4)
12/09/2023 11:48:06 AM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 11:48:06 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:48:06 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001802A8E3CD0> (3, 4)
12/09/2023 11:48:06 AM Pawn (3, 4) is empty appended moves [(2, 4), (3, 4)]
12/09/2023 11:48:06 AM Pawn ReturnPossibleMove(): returning values: ([(2, 4), (3, 4)], [])
12/09/2023 11:48:06 AM RenderPossibleMoves(): moves and attacks after: ([(2, 4), (3, 4)], [])
12/09/2023 11:48:06 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001802A8E1050> moves and attacks before: ([(2, 4), (3, 4)], [])
12/09/2023 11:48:06 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:48:06 AM Pawn Figure info: (1, 4, 'b', 'p')
12/09/2023 11:48:06 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:48:06 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001802A8D9910> (2, 4)
12/09/2023 11:48:06 AM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 11:48:06 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:48:06 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001802A8E3CD0> (3, 4)
12/09/2023 11:48:06 AM Pawn (3, 4) is empty appended moves [(2, 4), (3, 4)]
12/09/2023 11:48:06 AM Pawn ReturnPossibleMove(): returning values: ([(2, 4), (3, 4)], [])
12/09/2023 11:48:06 AM RenderPossibleMoves(): moves and attacks after: ([(2, 4), (3, 4)], [])
12/09/2023 11:48:06 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001802A8E1050> moves and attacks before: ([(2, 4), (3, 4)], [])
12/09/2023 11:48:06 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:48:06 AM Pawn Figure info: (1, 4, 'b', 'p')
12/09/2023 11:48:06 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:48:06 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001802A8D9910> (2, 4)
12/09/2023 11:48:06 AM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 11:48:06 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:48:06 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001802A8E3CD0> (3, 4)
12/09/2023 11:48:06 AM Pawn (3, 4) is empty appended moves [(2, 4), (3, 4)]
12/09/2023 11:48:06 AM Pawn ReturnPossibleMove(): returning values: ([(2, 4), (3, 4)], [])
12/09/2023 11:48:06 AM RenderPossibleMoves(): moves and attacks after: ([(2, 4), (3, 4)], [])
12/09/2023 11:48:06 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001802A8E1050> moves and attacks before: ([(2, 4), (3, 4)], [])
12/09/2023 11:48:06 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:48:06 AM Pawn Figure info: (1, 4, 'b', 'p')
12/09/2023 11:48:06 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:48:06 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001802A8D9910> (2, 4)
12/09/2023 11:48:06 AM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 11:48:06 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:48:06 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001802A8E3CD0> (3, 4)
12/09/2023 11:48:06 AM Pawn (3, 4) is empty appended moves [(2, 4), (3, 4)]
12/09/2023 11:48:06 AM Pawn ReturnPossibleMove(): returning values: ([(2, 4), (3, 4)], [])
12/09/2023 11:48:06 AM RenderPossibleMoves(): moves and attacks after: ([(2, 4), (3, 4)], [])
12/09/2023 11:49:21 AM Launching Main.py
12/09/2023 11:49:22 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000199A5CCCD50> moves and attacks before: ([], [])
12/09/2023 11:49:22 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:49:22 AM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 11:49:22 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:49:22 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CCD850> (5, 5)
12/09/2023 11:49:22 AM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 11:49:22 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:49:22 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CCE990> (4, 5)
12/09/2023 11:49:22 AM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 11:49:22 AM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 11:49:22 AM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 11:50:06 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000199A5CCC950> moves and attacks before: ([], [])
12/09/2023 11:50:06 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:50:06 AM Pawn Figure info: (1, 5, 'b', 'p')
12/09/2023 11:50:06 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:50:06 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC68D0> (2, 5)
12/09/2023 11:50:06 AM Pawn (2, 5) is empty appended moves [(2, 5)]
12/09/2023 11:50:06 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:50:06 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC7910> (3, 5)
12/09/2023 11:50:06 AM Pawn (3, 5) is empty appended moves [(2, 5), (3, 5)]
12/09/2023 11:50:06 AM Pawn ReturnPossibleMove(): returning values: ([(2, 5), (3, 5)], [])
12/09/2023 11:50:06 AM RenderPossibleMoves(): moves and attacks after: ([(2, 5), (3, 5)], [])
12/09/2023 11:50:07 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000199A5CCC950> moves and attacks before: ([(2, 5), (3, 5)], [])
12/09/2023 11:50:07 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:50:07 AM Pawn Figure info: (1, 5, 'b', 'p')
12/09/2023 11:50:07 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:50:07 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC68D0> (2, 5)
12/09/2023 11:50:07 AM Pawn (2, 5) is empty appended moves [(2, 5)]
12/09/2023 11:50:07 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:50:07 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC7910> (3, 5)
12/09/2023 11:50:07 AM Pawn (3, 5) is empty appended moves [(2, 5), (3, 5)]
12/09/2023 11:50:07 AM Pawn ReturnPossibleMove(): returning values: ([(2, 5), (3, 5)], [])
12/09/2023 11:50:07 AM RenderPossibleMoves(): moves and attacks after: ([(2, 5), (3, 5)], [])
12/09/2023 11:50:08 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000199A5CCC950> moves and attacks before: ([(2, 5), (3, 5)], [])
12/09/2023 11:50:08 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:50:08 AM Pawn Figure info: (1, 5, 'b', 'p')
12/09/2023 11:50:08 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:50:08 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC68D0> (2, 5)
12/09/2023 11:50:08 AM Pawn (2, 5) is empty appended moves [(2, 5)]
12/09/2023 11:50:08 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:50:08 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC7910> (3, 5)
12/09/2023 11:50:08 AM Pawn (3, 5) is empty appended moves [(2, 5), (3, 5)]
12/09/2023 11:50:08 AM Pawn ReturnPossibleMove(): returning values: ([(2, 5), (3, 5)], [])
12/09/2023 11:50:08 AM RenderPossibleMoves(): moves and attacks after: ([(2, 5), (3, 5)], [])
12/09/2023 11:50:08 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000199A5CCC950> moves and attacks before: ([(2, 5), (3, 5)], [])
12/09/2023 11:50:08 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:50:08 AM Pawn Figure info: (1, 5, 'b', 'p')
12/09/2023 11:50:08 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:50:08 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC68D0> (2, 5)
12/09/2023 11:50:08 AM Pawn (2, 5) is empty appended moves [(2, 5)]
12/09/2023 11:50:08 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:50:08 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC7910> (3, 5)
12/09/2023 11:50:08 AM Pawn (3, 5) is empty appended moves [(2, 5), (3, 5)]
12/09/2023 11:50:08 AM Pawn ReturnPossibleMove(): returning values: ([(2, 5), (3, 5)], [])
12/09/2023 11:50:08 AM RenderPossibleMoves(): moves and attacks after: ([(2, 5), (3, 5)], [])
12/09/2023 11:50:09 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000199A5CCC950> moves and attacks before: ([(2, 5), (3, 5)], [])
12/09/2023 11:50:09 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:50:09 AM Pawn Figure info: (1, 5, 'b', 'p')
12/09/2023 11:50:09 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:50:09 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC68D0> (2, 5)
12/09/2023 11:50:09 AM Pawn (2, 5) is empty appended moves [(2, 5)]
12/09/2023 11:50:09 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:50:09 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC7910> (3, 5)
12/09/2023 11:50:09 AM Pawn (3, 5) is empty appended moves [(2, 5), (3, 5)]
12/09/2023 11:50:09 AM Pawn ReturnPossibleMove(): returning values: ([(2, 5), (3, 5)], [])
12/09/2023 11:50:09 AM RenderPossibleMoves(): moves and attacks after: ([(2, 5), (3, 5)], [])
12/09/2023 11:50:09 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000199A5CCC950> moves and attacks before: ([(2, 5), (3, 5)], [])
12/09/2023 11:50:09 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:50:09 AM Pawn Figure info: (1, 5, 'b', 'p')
12/09/2023 11:50:09 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:50:09 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC68D0> (2, 5)
12/09/2023 11:50:09 AM Pawn (2, 5) is empty appended moves [(2, 5)]
12/09/2023 11:50:09 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:50:09 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC7910> (3, 5)
12/09/2023 11:50:09 AM Pawn (3, 5) is empty appended moves [(2, 5), (3, 5)]
12/09/2023 11:50:09 AM Pawn ReturnPossibleMove(): returning values: ([(2, 5), (3, 5)], [])
12/09/2023 11:50:09 AM RenderPossibleMoves(): moves and attacks after: ([(2, 5), (3, 5)], [])
12/09/2023 11:50:11 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000199A5CCC810> moves and attacks before: ([(2, 5), (3, 5)], [])
12/09/2023 11:50:11 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:50:11 AM Pawn Figure info: (1, 4, 'b', 'p')
12/09/2023 11:50:11 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:50:11 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC4090> (2, 4)
12/09/2023 11:50:11 AM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 11:50:11 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:50:11 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC7710> (3, 4)
12/09/2023 11:50:11 AM Pawn (3, 4) is empty appended moves [(2, 4), (3, 4)]
12/09/2023 11:50:11 AM Pawn ReturnPossibleMove(): returning values: ([(2, 4), (3, 4)], [])
12/09/2023 11:50:11 AM RenderPossibleMoves(): moves and attacks after: ([(2, 4), (3, 4)], [])
12/09/2023 11:50:11 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000199A5CCCD50> moves and attacks before: ([], [])
12/09/2023 11:50:11 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:50:11 AM Pawn Figure info: (4, 5, 'w', 'p')
12/09/2023 11:50:11 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:50:11 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC7910> (3, 5)
12/09/2023 11:50:11 AM Pawn (3, 5) is empty appended moves [(3, 5)]
12/09/2023 11:50:11 AM Pawn ReturnPossibleMove(): returning values: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:11 AM RenderPossibleMoves(): moves and attacks after: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:12 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000199A5CCCD50> moves and attacks before: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:12 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:50:12 AM Pawn Figure info: (4, 5, 'w', 'p')
12/09/2023 11:50:12 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:50:12 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC7910> (3, 5)
12/09/2023 11:50:12 AM Pawn (3, 5) is empty appended moves [(3, 5)]
12/09/2023 11:50:12 AM Pawn ReturnPossibleMove(): returning values: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:12 AM RenderPossibleMoves(): moves and attacks after: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:12 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000199A5CCCD50> moves and attacks before: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:12 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:50:12 AM Pawn Figure info: (4, 5, 'w', 'p')
12/09/2023 11:50:12 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:50:12 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC7910> (3, 5)
12/09/2023 11:50:12 AM Pawn (3, 5) is empty appended moves [(3, 5)]
12/09/2023 11:50:12 AM Pawn ReturnPossibleMove(): returning values: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:12 AM RenderPossibleMoves(): moves and attacks after: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:12 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000199A5CCCD50> moves and attacks before: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:12 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:50:12 AM Pawn Figure info: (4, 5, 'w', 'p')
12/09/2023 11:50:12 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:50:12 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC7910> (3, 5)
12/09/2023 11:50:12 AM Pawn (3, 5) is empty appended moves [(3, 5)]
12/09/2023 11:50:12 AM Pawn ReturnPossibleMove(): returning values: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:12 AM RenderPossibleMoves(): moves and attacks after: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:12 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000199A5CCCD50> moves and attacks before: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:12 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:50:12 AM Pawn Figure info: (4, 5, 'w', 'p')
12/09/2023 11:50:12 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:50:12 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC7910> (3, 5)
12/09/2023 11:50:12 AM Pawn (3, 5) is empty appended moves [(3, 5)]
12/09/2023 11:50:12 AM Pawn ReturnPossibleMove(): returning values: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:12 AM RenderPossibleMoves(): moves and attacks after: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:13 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000199A5CCCD50> moves and attacks before: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:13 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:50:13 AM Pawn Figure info: (4, 5, 'w', 'p')
12/09/2023 11:50:13 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:50:13 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC7910> (3, 5)
12/09/2023 11:50:13 AM Pawn (3, 5) is empty appended moves [(3, 5)]
12/09/2023 11:50:13 AM Pawn ReturnPossibleMove(): returning values: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:13 AM RenderPossibleMoves(): moves and attacks after: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:13 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000199A5CCCD50> moves and attacks before: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:13 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:50:13 AM Pawn Figure info: (4, 5, 'w', 'p')
12/09/2023 11:50:13 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:50:13 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC7910> (3, 5)
12/09/2023 11:50:13 AM Pawn (3, 5) is empty appended moves [(3, 5)]
12/09/2023 11:50:13 AM Pawn ReturnPossibleMove(): returning values: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:13 AM RenderPossibleMoves(): moves and attacks after: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:13 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000199A5CCCD50> moves and attacks before: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:13 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:50:13 AM Pawn Figure info: (4, 5, 'w', 'p')
12/09/2023 11:50:13 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:50:13 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC7910> (3, 5)
12/09/2023 11:50:13 AM Pawn (3, 5) is empty appended moves [(3, 5)]
12/09/2023 11:50:13 AM Pawn ReturnPossibleMove(): returning values: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:13 AM RenderPossibleMoves(): moves and attacks after: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:14 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000199A5CCCD50> moves and attacks before: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:14 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:50:14 AM Pawn Figure info: (4, 5, 'w', 'p')
12/09/2023 11:50:14 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:50:14 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC7910> (3, 5)
12/09/2023 11:50:14 AM Pawn (3, 5) is empty appended moves [(3, 5)]
12/09/2023 11:50:14 AM Pawn ReturnPossibleMove(): returning values: ([(3, 5)], [(3, 4)])
12/09/2023 11:50:14 AM RenderPossibleMoves(): moves and attacks after: ([(3, 5)], [(3, 4)])
12/09/2023 11:51:19 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000199A5CCCD50> moves and attacks before: ([(3, 5)], [(3, 4)])
12/09/2023 11:51:19 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:51:19 AM Pawn Figure info: (4, 5, 'w', 'p')
12/09/2023 11:51:19 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:51:19 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC7910> (3, 5)
12/09/2023 11:51:19 AM Pawn (3, 5) is empty appended moves [(3, 5)]
12/09/2023 11:51:19 AM Pawn ReturnPossibleMove(): returning values: ([(3, 5)], [(3, 4)])
12/09/2023 11:51:19 AM RenderPossibleMoves(): moves and attacks after: ([(3, 5)], [(3, 4)])
12/09/2023 11:51:20 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000199A5CCCD50> moves and attacks before: ([(3, 5)], [(3, 4)])
12/09/2023 11:51:20 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:51:20 AM Pawn Figure info: (4, 5, 'w', 'p')
12/09/2023 11:51:20 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:51:20 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC7910> (3, 5)
12/09/2023 11:51:20 AM Pawn (3, 5) is empty appended moves [(3, 5)]
12/09/2023 11:51:20 AM Pawn ReturnPossibleMove(): returning values: ([(3, 5)], [(3, 4)])
12/09/2023 11:51:20 AM RenderPossibleMoves(): moves and attacks after: ([(3, 5)], [(3, 4)])
12/09/2023 11:51:21 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000199A5CCE490> moves and attacks before: ([(3, 5)], [(3, 4)])
12/09/2023 11:51:21 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:51:21 AM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 11:51:21 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:51:21 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CCD750> (5, 4)
12/09/2023 11:51:21 AM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 11:51:21 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:51:21 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CCE810> (4, 4)
12/09/2023 11:51:21 AM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 11:51:21 AM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 11:51:21 AM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 11:51:23 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000199A5CCEA10> moves and attacks before: ([], [])
12/09/2023 11:51:23 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:51:23 AM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 11:51:23 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:51:23 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC4150> (2, 3)
12/09/2023 11:51:23 AM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 11:51:23 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:51:23 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC6A50> (3, 3)
12/09/2023 11:51:23 AM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 11:51:23 AM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 11:51:23 AM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 11:51:25 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000199A5CCEA10> moves and attacks before: ([(2, 3), (3, 3)], [])
12/09/2023 11:51:25 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:51:25 AM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 11:51:25 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:51:25 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC4150> (2, 3)
12/09/2023 11:51:25 AM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 11:51:25 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:51:25 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC6A50> (3, 3)
12/09/2023 11:51:25 AM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 11:51:25 AM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 11:51:25 AM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 11:51:26 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000199A5CCEA10> moves and attacks before: ([(2, 3), (3, 3)], [])
12/09/2023 11:51:26 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:51:26 AM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 11:51:26 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:51:26 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC4150> (2, 3)
12/09/2023 11:51:26 AM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 11:51:26 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:51:26 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000199A5CC6A50> (3, 3)
12/09/2023 11:51:26 AM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 11:51:26 AM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 11:51:26 AM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 11:52:32 AM Launching Main.py
12/09/2023 11:52:34 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002B31229E5D0> moves and attacks before: ([], [])
12/09/2023 11:52:34 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:52:34 AM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 11:52:34 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:52:34 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002B31229CB90> (5, 4)
12/09/2023 11:52:34 AM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 11:52:34 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:52:34 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002B31229D990> (4, 4)
12/09/2023 11:52:34 AM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 11:52:34 AM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 11:52:34 AM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 11:52:39 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002B31229C410> moves and attacks before: ([], [])
12/09/2023 11:52:39 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:52:39 AM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 11:52:39 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:52:39 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002B312294E90> (2, 3)
12/09/2023 11:52:39 AM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 11:52:39 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:52:39 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002B31229DB90> (3, 3)
12/09/2023 11:52:39 AM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 11:52:39 AM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 11:52:39 AM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 11:52:41 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002B31229C410> moves and attacks before: ([(2, 3), (3, 3)], [])
12/09/2023 11:52:41 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:52:41 AM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 11:52:41 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:52:41 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002B312294E90> (2, 3)
12/09/2023 11:52:41 AM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 11:52:41 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:52:41 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002B31229DB90> (3, 3)
12/09/2023 11:52:41 AM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 11:52:41 AM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 11:52:41 AM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 11:53:51 AM Launching Main.py
12/09/2023 11:53:52 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000168FA1E8850> moves and attacks before: ([], [])
12/09/2023 11:53:52 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:53:52 AM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 11:53:52 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:53:52 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000168FA1E9C90> (5, 5)
12/09/2023 11:53:52 AM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 11:53:52 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:53:52 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000168FA1E9990> (4, 5)
12/09/2023 11:53:52 AM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 11:53:52 AM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 11:53:52 AM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 11:53:52 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000168FA1EA8D0> moves and attacks before: ([], [])
12/09/2023 11:53:52 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:53:52 AM Pawn Figure info: (1, 4, 'b', 'p')
12/09/2023 11:53:52 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:53:52 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000168FA1EA550> (2, 4)
12/09/2023 11:53:52 AM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 11:53:52 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:53:52 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000168FA1E9750> (3, 4)
12/09/2023 11:53:52 AM Pawn (3, 4) is empty appended moves [(2, 4), (3, 4)]
12/09/2023 11:53:52 AM Pawn ReturnPossibleMove(): returning values: ([(2, 4), (3, 4)], [])
12/09/2023 11:53:52 AM RenderPossibleMoves(): moves and attacks after: ([(2, 4), (3, 4)], [])
12/09/2023 11:53:54 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000168FA1E8ED0> moves and attacks before: ([], [])
12/09/2023 11:53:54 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:53:54 AM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 11:53:54 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:53:54 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000168FA1E8C10> (5, 2)
12/09/2023 11:53:54 AM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 11:53:54 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:53:54 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000168FA1EB290> (4, 2)
12/09/2023 11:53:54 AM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 11:53:54 AM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 11:53:54 AM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 11:59:21 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000168FA09C210> moves and attacks before: ([], [])
12/09/2023 11:59:21 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:59:21 AM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 11:59:21 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:59:21 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000168FA1EB850> (2, 3)
12/09/2023 11:59:21 AM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 11:59:21 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:59:21 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000168FA1E9610> (3, 3)
12/09/2023 11:59:21 AM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 11:59:21 AM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 11:59:21 AM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 11:59:23 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000168FA1E8ED0> moves and attacks before: ([], [])
12/09/2023 11:59:23 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:59:23 AM Pawn Figure info: (4, 2, 'w', 'p')
12/09/2023 11:59:23 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:59:23 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000168FA1E96D0> (3, 2)
12/09/2023 11:59:23 AM Pawn (3, 2) is empty appended moves [(3, 2)]
12/09/2023 11:59:23 AM Pawn ReturnPossibleMove(): returning values: ([(3, 2)], [(3, 3)])
12/09/2023 11:59:23 AM RenderPossibleMoves(): moves and attacks after: ([(3, 2)], [(3, 3)])
12/09/2023 11:59:25 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000168FA1E87D0> moves and attacks before: ([(3, 2)], [(3, 3)])
12/09/2023 11:59:25 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:59:25 AM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 11:59:25 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:59:25 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000168FA1E9E10> (5, 3)
12/09/2023 11:59:25 AM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 11:59:25 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:59:25 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000168FA1E9B50> (4, 3)
12/09/2023 11:59:25 AM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 11:59:25 AM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 11:59:25 AM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 11:59:26 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000168FA09C350> moves and attacks before: ([], [])
12/09/2023 11:59:26 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:59:26 AM Pawn Figure info: (1, 2, 'b', 'p')
12/09/2023 11:59:26 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:59:26 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000168FA1EB990> (2, 2)
12/09/2023 11:59:26 AM Pawn (2, 2) is empty appended moves [(2, 2)]
12/09/2023 11:59:26 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:59:26 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000168FA1E96D0> (3, 2)
12/09/2023 11:59:26 AM Pawn (3, 2) is empty appended moves [(2, 2), (3, 2)]
12/09/2023 11:59:26 AM Pawn ReturnPossibleMove(): returning values: ([(2, 2), (3, 2)], [])
12/09/2023 11:59:26 AM RenderPossibleMoves(): moves and attacks after: ([(2, 2), (3, 2)], [])
12/09/2023 11:59:27 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000168FA1E8B10> moves and attacks before: ([], [])
12/09/2023 11:59:27 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:59:27 AM Pawn Figure info: (6, 1, 'w', 'p')
12/09/2023 11:59:27 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:59:27 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000168FA1E8810> (5, 1)
12/09/2023 11:59:27 AM Pawn (5, 1) is empty appended moves [(5, 1)]
12/09/2023 11:59:27 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:59:27 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000168FA1EAE50> (4, 1)
12/09/2023 11:59:27 AM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/09/2023 11:59:27 AM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/09/2023 11:59:27 AM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/09/2023 11:59:32 AM Launching Main.py
12/09/2023 11:59:34 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001AE70F68710> moves and attacks before: ([], [])
12/09/2023 11:59:34 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:59:34 AM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 11:59:34 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:59:34 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AE70F69F50> (5, 4)
12/09/2023 11:59:34 AM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 11:59:34 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:59:34 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AE70F69A90> (4, 4)
12/09/2023 11:59:34 AM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 11:59:34 AM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 11:59:34 AM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 11:59:34 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001AE70E1C210> moves and attacks before: ([], [])
12/09/2023 11:59:34 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:59:34 AM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 11:59:34 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:59:34 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AE70F6B850> (2, 3)
12/09/2023 11:59:34 AM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 11:59:34 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:59:34 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AE70F69610> (3, 3)
12/09/2023 11:59:34 AM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 11:59:34 AM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 11:59:34 AM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 11:59:35 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001AE70F68850> moves and attacks before: ([], [])
12/09/2023 11:59:35 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:59:35 AM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 11:59:35 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:59:35 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AE70F69C90> (5, 5)
12/09/2023 11:59:35 AM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 11:59:35 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:59:35 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AE70F69990> (4, 5)
12/09/2023 11:59:35 AM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 11:59:35 AM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 11:59:35 AM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 11:59:38 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001AE70E1C210> moves and attacks before: ([], [])
12/09/2023 11:59:38 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:59:38 AM Pawn Figure info: (3, 3, 'b', 'p')
12/09/2023 11:59:38 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:59:38 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AE70F69B50> (4, 3)
12/09/2023 11:59:38 AM Pawn (4, 3) is empty appended moves [(4, 3)]
12/09/2023 11:59:38 AM Pawn ReturnPossibleMove(): returning values: ([(4, 3)], [(4, 4)])
12/09/2023 11:59:38 AM RenderPossibleMoves(): moves and attacks after: ([(4, 3)], [(4, 4)])
12/09/2023 11:59:38 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001AE70E1C210> moves and attacks before: ([(4, 3)], [(4, 4)])
12/09/2023 11:59:38 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:59:38 AM Pawn Figure info: (3, 3, 'b', 'p')
12/09/2023 11:59:38 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:59:38 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AE70F69B50> (4, 3)
12/09/2023 11:59:38 AM Pawn (4, 3) is empty appended moves [(4, 3)]
12/09/2023 11:59:38 AM Pawn ReturnPossibleMove(): returning values: ([(4, 3)], [(4, 4)])
12/09/2023 11:59:38 AM RenderPossibleMoves(): moves and attacks after: ([(4, 3)], [(4, 4)])
12/09/2023 11:59:38 AM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001AE70E1C210> moves and attacks before: ([(4, 3)], [(4, 4)])
12/09/2023 11:59:38 AM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 11:59:38 AM Pawn Figure info: (3, 3, 'b', 'p')
12/09/2023 11:59:38 AM Pawn attempting check on board[x-a][y]: True
12/09/2023 11:59:38 AM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AE70F69B50> (4, 3)
12/09/2023 11:59:38 AM Pawn (4, 3) is empty appended moves [(4, 3)]
12/09/2023 11:59:38 AM Pawn ReturnPossibleMove(): returning values: ([(4, 3)], [(4, 4)])
12/09/2023 11:59:38 AM RenderPossibleMoves(): moves and attacks after: ([(4, 3)], [(4, 4)])
12/09/2023 12:00:15 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001AE70E1C350> moves and attacks before: ([(4, 3)], [(4, 4)])
12/09/2023 12:00:15 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:00:15 PM Pawn Figure info: (1, 2, 'b', 'p')
12/09/2023 12:00:15 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:00:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AE70F6B990> (2, 2)
12/09/2023 12:00:15 PM Pawn (2, 2) is empty appended moves [(2, 2)]
12/09/2023 12:00:15 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:00:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AE70F696D0> (3, 2)
12/09/2023 12:00:15 PM Pawn (3, 2) is empty appended moves [(2, 2), (3, 2)]
12/09/2023 12:00:15 PM Pawn ReturnPossibleMove(): returning values: ([(2, 2), (3, 2)], [])
12/09/2023 12:00:15 PM RenderPossibleMoves(): moves and attacks after: ([(2, 2), (3, 2)], [])
12/09/2023 12:00:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001AE70F68ED0> moves and attacks before: ([], [])
12/09/2023 12:00:19 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:00:19 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 12:00:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:00:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AE70F68C10> (5, 2)
12/09/2023 12:00:19 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 12:00:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:00:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AE70F6B290> (4, 2)
12/09/2023 12:00:19 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 12:00:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 12:00:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 12:00:20 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001AE70F68ED0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/09/2023 12:00:20 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:00:20 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 12:00:20 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:00:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AE70F68C10> (5, 2)
12/09/2023 12:00:20 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 12:00:20 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:00:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AE70F6B290> (4, 2)
12/09/2023 12:00:20 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 12:00:20 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 12:00:20 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 12:21:16 PM Launching Main.py
12/09/2023 12:21:17 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018E36923C90> moves and attacks before: ([], [])
12/09/2023 12:21:17 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:21:17 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 12:21:17 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36922D50> (5, 3)
12/09/2023 12:21:17 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 12:21:17 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36923290> (4, 3)
12/09/2023 12:21:17 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 12:21:17 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 12:21:17 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 12:21:18 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018E36921410> moves and attacks before: ([], [])
12/09/2023 12:21:18 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:21:18 PM Pawn Figure info: (1, 4, 'b', 'p')
12/09/2023 12:21:18 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36922350> (2, 4)
12/09/2023 12:21:18 PM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 12:21:18 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36922210> (3, 4)
12/09/2023 12:21:18 PM Pawn (3, 4) is empty appended moves [(2, 4), (3, 4)]
12/09/2023 12:21:18 PM Pawn ReturnPossibleMove(): returning values: ([(2, 4), (3, 4)], [])
12/09/2023 12:21:18 PM RenderPossibleMoves(): moves and attacks after: ([(2, 4), (3, 4)], [])
12/09/2023 12:21:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018E36922650> moves and attacks before: ([], [])
12/09/2023 12:21:19 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:21:19 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:21:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36922B90> (5, 4)
12/09/2023 12:21:19 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:21:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E369231D0> (4, 4)
12/09/2023 12:21:19 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:21:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018E36922650> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:19 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:21:19 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:21:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36922B90> (5, 4)
12/09/2023 12:21:19 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:21:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E369231D0> (4, 4)
12/09/2023 12:21:19 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:21:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018E36922650> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:19 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:21:19 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:21:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36922B90> (5, 4)
12/09/2023 12:21:19 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:21:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E369231D0> (4, 4)
12/09/2023 12:21:19 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:21:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018E36922650> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:19 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:21:19 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:21:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36922B90> (5, 4)
12/09/2023 12:21:19 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:21:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E369231D0> (4, 4)
12/09/2023 12:21:19 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:21:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018E36922650> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:19 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:21:19 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:21:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36922B90> (5, 4)
12/09/2023 12:21:19 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:21:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E369231D0> (4, 4)
12/09/2023 12:21:19 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:21:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018E36922650> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:19 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:21:19 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:21:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36922B90> (5, 4)
12/09/2023 12:21:19 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:21:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E369231D0> (4, 4)
12/09/2023 12:21:19 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:21:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:20 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018E36922650> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:20 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:21:20 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:21:20 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36922B90> (5, 4)
12/09/2023 12:21:20 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:21:20 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E369231D0> (4, 4)
12/09/2023 12:21:20 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:21:20 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:20 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:20 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018E36922650> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:20 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:21:20 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:21:20 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36922B90> (5, 4)
12/09/2023 12:21:20 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:21:20 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E369231D0> (4, 4)
12/09/2023 12:21:20 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:21:20 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:20 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:20 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018E36922650> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:20 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:21:20 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:21:20 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36922B90> (5, 4)
12/09/2023 12:21:20 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:21:20 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E369231D0> (4, 4)
12/09/2023 12:21:20 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:21:20 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:20 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:20 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018E36922650> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:20 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:21:20 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:21:20 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36922B90> (5, 4)
12/09/2023 12:21:20 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:21:20 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E369231D0> (4, 4)
12/09/2023 12:21:20 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:21:20 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:20 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:20 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018E36922650> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:20 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:21:20 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:21:20 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36922B90> (5, 4)
12/09/2023 12:21:20 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:21:20 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E369231D0> (4, 4)
12/09/2023 12:21:20 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:21:20 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:20 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:20 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018E36922650> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:20 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:21:20 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:21:20 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36922B90> (5, 4)
12/09/2023 12:21:20 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:21:20 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E369231D0> (4, 4)
12/09/2023 12:21:20 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:21:20 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:20 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:21 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018E36922090> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 12:21:21 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:21:21 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 12:21:21 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36922C90> (5, 5)
12/09/2023 12:21:21 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 12:21:21 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E369230D0> (4, 5)
12/09/2023 12:21:21 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 12:21:21 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 12:21:21 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 12:21:21 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018E36922750> moves and attacks before: ([(5, 5), (4, 5)], [])
12/09/2023 12:21:21 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:21:21 PM Pawn Figure info: (6, 6, 'w', 'p')
12/09/2023 12:21:21 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36923090> (5, 6)
12/09/2023 12:21:21 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/09/2023 12:21:21 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36923510> (4, 6)
12/09/2023 12:21:21 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/09/2023 12:21:21 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/09/2023 12:21:21 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/09/2023 12:21:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018E36922750> moves and attacks before: ([(5, 6), (4, 6)], [])
12/09/2023 12:21:22 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:21:22 PM Pawn Figure info: (6, 6, 'w', 'p')
12/09/2023 12:21:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36923090> (5, 6)
12/09/2023 12:21:22 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/09/2023 12:21:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36923510> (4, 6)
12/09/2023 12:21:22 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/09/2023 12:21:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/09/2023 12:21:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/09/2023 12:21:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018E36922750> moves and attacks before: ([(5, 6), (4, 6)], [])
12/09/2023 12:21:22 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:21:22 PM Pawn Figure info: (6, 6, 'w', 'p')
12/09/2023 12:21:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36923090> (5, 6)
12/09/2023 12:21:22 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/09/2023 12:21:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36923510> (4, 6)
12/09/2023 12:21:22 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/09/2023 12:21:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/09/2023 12:21:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/09/2023 12:21:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018E36922410> moves and attacks before: ([(5, 6), (4, 6)], [])
12/09/2023 12:21:22 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:21:22 PM Pawn Figure info: (6, 7, 'w', 'p')
12/09/2023 12:21:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36920150> (5, 7)
12/09/2023 12:21:22 PM Pawn (5, 7) is empty appended moves [(5, 7)]
12/09/2023 12:21:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36921010> (4, 7)
12/09/2023 12:21:22 PM Pawn (4, 7) is empty appended moves [(5, 7), (4, 7)]
12/09/2023 12:21:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 7), (4, 7)], [])
12/09/2023 12:21:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 7), (4, 7)], [])
12/09/2023 12:21:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018E36922410> moves and attacks before: ([(5, 7), (4, 7)], [])
12/09/2023 12:21:22 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:21:22 PM Pawn Figure info: (6, 7, 'w', 'p')
12/09/2023 12:21:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36920150> (5, 7)
12/09/2023 12:21:22 PM Pawn (5, 7) is empty appended moves [(5, 7)]
12/09/2023 12:21:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36921010> (4, 7)
12/09/2023 12:21:22 PM Pawn (4, 7) is empty appended moves [(5, 7), (4, 7)]
12/09/2023 12:21:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 7), (4, 7)], [])
12/09/2023 12:21:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 7), (4, 7)], [])
12/09/2023 12:21:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018E36922410> moves and attacks before: ([(5, 7), (4, 7)], [])
12/09/2023 12:21:22 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:21:22 PM Pawn Figure info: (6, 7, 'w', 'p')
12/09/2023 12:21:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36920150> (5, 7)
12/09/2023 12:21:22 PM Pawn (5, 7) is empty appended moves [(5, 7)]
12/09/2023 12:21:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36921010> (4, 7)
12/09/2023 12:21:22 PM Pawn (4, 7) is empty appended moves [(5, 7), (4, 7)]
12/09/2023 12:21:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 7), (4, 7)], [])
12/09/2023 12:21:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 7), (4, 7)], [])
12/09/2023 12:21:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018E36922410> moves and attacks before: ([(5, 7), (4, 7)], [])
12/09/2023 12:21:22 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:21:22 PM Pawn Figure info: (6, 7, 'w', 'p')
12/09/2023 12:21:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36920150> (5, 7)
12/09/2023 12:21:22 PM Pawn (5, 7) is empty appended moves [(5, 7)]
12/09/2023 12:21:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36921010> (4, 7)
12/09/2023 12:21:22 PM Pawn (4, 7) is empty appended moves [(5, 7), (4, 7)]
12/09/2023 12:21:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 7), (4, 7)], [])
12/09/2023 12:21:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 7), (4, 7)], [])
12/09/2023 12:21:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018E36923C90> moves and attacks before: ([(5, 7), (4, 7)], [])
12/09/2023 12:21:23 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:21:23 PM Pawn Figure info: (4, 3, 'w', 'p')
12/09/2023 12:21:23 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36922190> (3, 3)
12/09/2023 12:21:23 PM Pawn (3, 3) is empty appended moves [(3, 3)]
12/09/2023 12:21:23 PM Pawn ReturnPossibleMove(): returning values: ([(3, 3)], [(3, 4)])
12/09/2023 12:21:23 PM RenderPossibleMoves(): moves and attacks after: ([(3, 3)], [(3, 4)])
12/09/2023 12:21:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018E36923C90> moves and attacks before: ([(3, 3)], [(3, 4)])
12/09/2023 12:21:24 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:21:24 PM Pawn Figure info: (4, 3, 'w', 'p')
12/09/2023 12:21:24 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:21:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018E36922190> (3, 3)
12/09/2023 12:21:24 PM Pawn (3, 3) is empty appended moves [(3, 3)]
12/09/2023 12:21:24 PM Pawn ReturnPossibleMove(): returning values: ([(3, 3)], [(3, 4)])
12/09/2023 12:21:24 PM RenderPossibleMoves(): moves and attacks after: ([(3, 3)], [(3, 4)])
12/09/2023 12:40:39 PM Launching Main.py
12/09/2023 12:40:40 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001AD6915B7D0> moves and attacks before: ([], [])
12/09/2023 12:40:40 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:40:40 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:40:40 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:40:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AD69158610> (5, 4)
12/09/2023 12:40:40 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:40:40 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:40:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001AD6915B910> (4, 4)
12/09/2023 12:40:40 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:40:40 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:40:40 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:41:54 PM Launching Main.py
12/09/2023 12:41:55 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002E9B03CAC90> moves and attacks before: ([], [])
12/09/2023 12:41:55 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:41:55 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 12:41:55 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:41:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002E9B03CB0D0> (5, 5)
12/09/2023 12:41:55 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 12:41:55 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:41:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002E9B03CAD90> (4, 5)
12/09/2023 12:41:55 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 12:41:55 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 12:41:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 12:43:15 PM Launching Main.py
12/09/2023 12:43:45 PM Launching Main.py
12/09/2023 12:43:46 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000253F6BDFA10> moves and attacks before: ([], [])
12/09/2023 12:43:46 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:43:46 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 12:43:46 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:43:46 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000253F6BDF310> (5, 3)
12/09/2023 12:43:46 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 12:43:46 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:43:46 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000253F6BDD990> (4, 3)
12/09/2023 12:43:46 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 12:43:46 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 12:43:46 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 12:46:01 PM Launching Main.py
12/09/2023 12:46:02 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002711619DD90> moves and attacks before: ([], [])
12/09/2023 12:46:02 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:46:02 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 12:46:02 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619D210> (5, 3)
12/09/2023 12:46:02 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 12:46:02 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:02 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619C910> (4, 3)
12/09/2023 12:46:02 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 12:46:02 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 12:46:02 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 12:46:03 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002711619DD90> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 12:46:03 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:46:03 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 12:46:03 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619D210> (5, 3)
12/09/2023 12:46:03 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 12:46:03 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619C910> (4, 3)
12/09/2023 12:46:03 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 12:46:03 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 12:46:03 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 12:46:03 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002711619DD90> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 12:46:03 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:46:03 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 12:46:03 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619D210> (5, 3)
12/09/2023 12:46:03 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 12:46:03 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619C910> (4, 3)
12/09/2023 12:46:03 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 12:46:03 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 12:46:03 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 12:46:03 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002711619DD90> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 12:46:03 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:46:03 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 12:46:03 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619D210> (5, 3)
12/09/2023 12:46:03 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 12:46:03 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619C910> (4, 3)
12/09/2023 12:46:03 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 12:46:03 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 12:46:03 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 12:46:03 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002711619DD90> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 12:46:03 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:46:03 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 12:46:03 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619D210> (5, 3)
12/09/2023 12:46:03 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 12:46:03 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619C910> (4, 3)
12/09/2023 12:46:03 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 12:46:03 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 12:46:03 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 12:46:04 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002711619DD90> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 12:46:04 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:46:04 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 12:46:04 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619D210> (5, 3)
12/09/2023 12:46:04 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 12:46:04 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:04 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619C910> (4, 3)
12/09/2023 12:46:04 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 12:46:04 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 12:46:04 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 12:46:14 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002711619DF50> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 12:46:14 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:46:14 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 12:46:14 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619D2D0> (5, 2)
12/09/2023 12:46:14 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 12:46:14 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619C9D0> (4, 2)
12/09/2023 12:46:14 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 12:46:14 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:14 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:15 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002711619DF50> moves and attacks before: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:15 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:46:15 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 12:46:15 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619D2D0> (5, 2)
12/09/2023 12:46:15 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 12:46:15 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619C9D0> (4, 2)
12/09/2023 12:46:15 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 12:46:15 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:15 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002711619DF50> moves and attacks before: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:19 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:46:19 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 12:46:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619D2D0> (5, 2)
12/09/2023 12:46:19 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 12:46:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619C9D0> (4, 2)
12/09/2023 12:46:19 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 12:46:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:20 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002711619DF50> moves and attacks before: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:20 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:46:20 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 12:46:20 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619D2D0> (5, 2)
12/09/2023 12:46:20 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 12:46:20 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:20 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619C9D0> (4, 2)
12/09/2023 12:46:20 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 12:46:20 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:20 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002711619DF50> moves and attacks before: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:23 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:46:23 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 12:46:23 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619D2D0> (5, 2)
12/09/2023 12:46:23 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 12:46:23 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619C9D0> (4, 2)
12/09/2023 12:46:23 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 12:46:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002711619DF50> moves and attacks before: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:23 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:46:23 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 12:46:23 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619D2D0> (5, 2)
12/09/2023 12:46:23 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 12:46:23 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619C9D0> (4, 2)
12/09/2023 12:46:23 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 12:46:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002711619DF50> moves and attacks before: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:23 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:46:23 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 12:46:23 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619D2D0> (5, 2)
12/09/2023 12:46:23 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 12:46:23 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619C9D0> (4, 2)
12/09/2023 12:46:23 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 12:46:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002711619DF50> moves and attacks before: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:23 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:46:23 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 12:46:23 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619D2D0> (5, 2)
12/09/2023 12:46:23 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 12:46:23 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619C9D0> (4, 2)
12/09/2023 12:46:23 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 12:46:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002711619DF50> moves and attacks before: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:23 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:46:23 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 12:46:23 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619D2D0> (5, 2)
12/09/2023 12:46:23 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 12:46:23 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619C9D0> (4, 2)
12/09/2023 12:46:23 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 12:46:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002711619DF50> moves and attacks before: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:24 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:46:24 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 12:46:24 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619D2D0> (5, 2)
12/09/2023 12:46:24 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 12:46:24 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619C9D0> (4, 2)
12/09/2023 12:46:24 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 12:46:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002711619DF50> moves and attacks before: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:24 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:46:24 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 12:46:24 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619D2D0> (5, 2)
12/09/2023 12:46:24 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 12:46:24 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619C9D0> (4, 2)
12/09/2023 12:46:24 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 12:46:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002711619DF50> moves and attacks before: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:24 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:46:24 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 12:46:24 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619D2D0> (5, 2)
12/09/2023 12:46:24 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 12:46:24 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:46:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002711619C9D0> (4, 2)
12/09/2023 12:46:24 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 12:46:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 12:46:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 12:47:19 PM Launching Main.py
12/09/2023 12:47:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A2D908F550> moves and attacks before: ([], [])
12/09/2023 12:47:19 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:47:19 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:47:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CC10> (5, 4)
12/09/2023 12:47:19 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:47:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CF50> (4, 4)
12/09/2023 12:47:19 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:47:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:47:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:47:29 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A2D908D4D0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 12:47:29 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:47:29 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 12:47:29 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908ECD0> (5, 2)
12/09/2023 12:47:29 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 12:47:29 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908DE10> (4, 2)
12/09/2023 12:47:29 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 12:47:29 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 12:47:29 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 12:47:30 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A2D908D4D0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/09/2023 12:47:30 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:47:30 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 12:47:30 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908ECD0> (5, 2)
12/09/2023 12:47:30 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 12:47:30 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908DE10> (4, 2)
12/09/2023 12:47:30 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 12:47:30 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 12:47:30 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 12:47:30 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A2D908D4D0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/09/2023 12:47:30 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:47:30 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 12:47:30 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908ECD0> (5, 2)
12/09/2023 12:47:30 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 12:47:30 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908DE10> (4, 2)
12/09/2023 12:47:30 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 12:47:30 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 12:47:30 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 12:47:30 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A2D908F610> moves and attacks before: ([(5, 2), (4, 2)], [])
12/09/2023 12:47:30 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:47:30 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 12:47:30 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908F110> (5, 3)
12/09/2023 12:47:30 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 12:47:30 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908E210> (4, 3)
12/09/2023 12:47:30 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 12:47:30 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 12:47:30 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 12:47:30 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A2D908F550> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 12:47:30 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:47:30 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:47:30 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CC10> (5, 4)
12/09/2023 12:47:30 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:47:30 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CF50> (4, 4)
12/09/2023 12:47:30 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:47:30 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:47:30 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:47:31 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A2D908F690> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 12:47:31 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:47:31 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 12:47:31 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CA10> (5, 5)
12/09/2023 12:47:31 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 12:47:31 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CFD0> (4, 5)
12/09/2023 12:47:31 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 12:47:31 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 12:47:31 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 12:47:31 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A2D908F690> moves and attacks before: ([(5, 5), (4, 5)], [])
12/09/2023 12:47:31 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:47:31 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 12:47:31 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CA10> (5, 5)
12/09/2023 12:47:31 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 12:47:31 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CFD0> (4, 5)
12/09/2023 12:47:31 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 12:47:31 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 12:47:31 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 12:47:31 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A2D908F450> moves and attacks before: ([(5, 5), (4, 5)], [])
12/09/2023 12:47:31 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:47:31 PM Pawn Figure info: (6, 6, 'w', 'p')
12/09/2023 12:47:31 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CA90> (5, 6)
12/09/2023 12:47:31 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/09/2023 12:47:31 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CE10> (4, 6)
12/09/2023 12:47:31 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/09/2023 12:47:31 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/09/2023 12:47:31 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/09/2023 12:47:31 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A2D908F890> moves and attacks before: ([(5, 6), (4, 6)], [])
12/09/2023 12:47:31 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:47:31 PM Pawn Figure info: (6, 7, 'w', 'p')
12/09/2023 12:47:31 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CED0> (5, 7)
12/09/2023 12:47:31 PM Pawn (5, 7) is empty appended moves [(5, 7)]
12/09/2023 12:47:31 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908D1D0> (4, 7)
12/09/2023 12:47:31 PM Pawn (4, 7) is empty appended moves [(5, 7), (4, 7)]
12/09/2023 12:47:31 PM Pawn ReturnPossibleMove(): returning values: ([(5, 7), (4, 7)], [])
12/09/2023 12:47:31 PM RenderPossibleMoves(): moves and attacks after: ([(5, 7), (4, 7)], [])
12/09/2023 12:47:37 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A2D908F550> moves and attacks before: ([(5, 7), (4, 7)], [])
12/09/2023 12:47:37 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:47:37 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:47:37 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CC10> (5, 4)
12/09/2023 12:47:37 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:47:37 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CF50> (4, 4)
12/09/2023 12:47:37 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:47:37 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:47:37 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:47:38 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A2D908F550> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 12:47:38 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:47:38 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:47:38 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CC10> (5, 4)
12/09/2023 12:47:38 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:47:38 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CF50> (4, 4)
12/09/2023 12:47:38 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:47:38 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:47:38 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:47:40 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A2D908F550> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 12:47:40 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:47:40 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:47:40 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CC10> (5, 4)
12/09/2023 12:47:40 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:47:40 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:47:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CF50> (4, 4)
12/09/2023 12:47:40 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:47:40 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:47:40 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:49:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A2D908F690> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 12:49:27 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:49:27 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 12:49:27 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:49:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CA10> (5, 5)
12/09/2023 12:49:27 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 12:49:27 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:49:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CFD0> (4, 5)
12/09/2023 12:49:27 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 12:49:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 12:49:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 12:49:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A2D908F690> moves and attacks before: ([(5, 5), (4, 5)], [])
12/09/2023 12:49:28 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:49:28 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 12:49:28 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:49:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CA10> (5, 5)
12/09/2023 12:49:28 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 12:49:28 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:49:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CFD0> (4, 5)
12/09/2023 12:49:28 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 12:49:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 12:49:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 12:49:29 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A2D908F690> moves and attacks before: ([(5, 5), (4, 5)], [])
12/09/2023 12:49:29 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:49:29 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 12:49:29 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:49:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CA10> (5, 5)
12/09/2023 12:49:29 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 12:49:29 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:49:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CFD0> (4, 5)
12/09/2023 12:49:29 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 12:49:29 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 12:49:29 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 12:49:29 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A2D908F690> moves and attacks before: ([(5, 5), (4, 5)], [])
12/09/2023 12:49:29 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:49:29 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 12:49:29 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:49:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CA10> (5, 5)
12/09/2023 12:49:29 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 12:49:29 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:49:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CFD0> (4, 5)
12/09/2023 12:49:29 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 12:49:29 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 12:49:29 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 12:49:29 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A2D908F690> moves and attacks before: ([(5, 5), (4, 5)], [])
12/09/2023 12:49:29 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:49:29 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 12:49:29 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:49:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CA10> (5, 5)
12/09/2023 12:49:29 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 12:49:29 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:49:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CFD0> (4, 5)
12/09/2023 12:49:29 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 12:49:29 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 12:49:29 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 12:49:29 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A2D908F690> moves and attacks before: ([(5, 5), (4, 5)], [])
12/09/2023 12:49:29 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:49:29 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 12:49:29 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:49:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CA10> (5, 5)
12/09/2023 12:49:29 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 12:49:29 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:49:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A2D908CFD0> (4, 5)
12/09/2023 12:49:29 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 12:49:29 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 12:49:29 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:02 PM Launching Main.py
12/09/2023 12:50:03 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000014801782990> moves and attacks before: ([], [])
12/09/2023 12:50:03 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:50:03 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 12:50:03 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:50:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000014801780410> (5, 5)
12/09/2023 12:50:03 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 12:50:03 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:50:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000148017801D0> (4, 5)
12/09/2023 12:50:03 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 12:50:03 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:03 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000014801782990> moves and attacks before: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:08 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:50:08 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 12:50:08 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:50:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000014801780410> (5, 5)
12/09/2023 12:50:08 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 12:50:08 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:50:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000148017801D0> (4, 5)
12/09/2023 12:50:08 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 12:50:08 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:08 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:09 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000014801782990> moves and attacks before: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:09 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:50:09 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 12:50:09 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:50:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000014801780410> (5, 5)
12/09/2023 12:50:09 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 12:50:09 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:50:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000148017801D0> (4, 5)
12/09/2023 12:50:09 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 12:50:09 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:09 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:09 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000014801782990> moves and attacks before: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:09 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:50:09 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 12:50:09 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:50:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000014801780410> (5, 5)
12/09/2023 12:50:09 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 12:50:09 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:50:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000148017801D0> (4, 5)
12/09/2023 12:50:09 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 12:50:09 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:09 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:09 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000014801782990> moves and attacks before: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:09 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:50:09 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 12:50:09 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:50:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000014801780410> (5, 5)
12/09/2023 12:50:09 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 12:50:09 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:50:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000148017801D0> (4, 5)
12/09/2023 12:50:09 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 12:50:09 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:09 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:09 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000014801782990> moves and attacks before: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:09 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:50:09 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 12:50:09 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:50:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000014801780410> (5, 5)
12/09/2023 12:50:09 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 12:50:09 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:50:09 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000148017801D0> (4, 5)
12/09/2023 12:50:09 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 12:50:09 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:09 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:10 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000148017828D0> moves and attacks before: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:10 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:50:10 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:50:10 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:50:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000014801783290> (5, 4)
12/09/2023 12:50:10 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:50:10 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:50:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000014801782D10> (4, 4)
12/09/2023 12:50:10 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:50:10 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:50:10 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:50:10 PM RenderPossibleMoves(): choosen figure: <classes.piece.King object at 0x0000014801780A90> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 12:50:15 PM Launching Main.py
12/09/2023 12:50:16 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000023756BCF690> moves and attacks before: ([], [])
12/09/2023 12:50:16 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:50:16 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 12:50:16 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:50:16 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000023756BCD550> (5, 5)
12/09/2023 12:50:16 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 12:50:16 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:50:16 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000023756BCCC50> (4, 5)
12/09/2023 12:50:16 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 12:50:16 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:16 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:17 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000023756BCF690> moves and attacks before: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:17 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:50:17 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 12:50:17 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:50:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000023756BCD550> (5, 5)
12/09/2023 12:50:17 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 12:50:17 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:50:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000023756BCCC50> (4, 5)
12/09/2023 12:50:17 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 12:50:17 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:17 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000023756BCE150> moves and attacks before: ([(5, 5), (4, 5)], [])
12/09/2023 12:50:19 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:50:19 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:50:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:50:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000023756BCD350> (5, 4)
12/09/2023 12:50:19 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:50:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:50:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000023756BCCA50> (4, 4)
12/09/2023 12:50:19 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:50:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:50:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:52:06 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000023756BCE150> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 12:52:06 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:52:06 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:52:06 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:52:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000023756BCD350> (5, 4)
12/09/2023 12:52:06 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:52:06 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:52:06 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000023756BCCA50> (4, 4)
12/09/2023 12:52:06 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:52:06 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:52:06 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:52:10 PM Launching Main.py
12/09/2023 12:52:11 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001CF7FEBC590> moves and attacks before: ([], [])
12/09/2023 12:52:11 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:52:11 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:52:11 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:52:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CF7FEBDD10> (5, 4)
12/09/2023 12:52:11 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:52:11 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:52:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CF7FEBD850> (4, 4)
12/09/2023 12:52:11 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:52:11 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:52:11 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:55:49 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001CF7FEBC590> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 12:55:49 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:55:49 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:55:49 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:55:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CF7FEBDD10> (5, 4)
12/09/2023 12:55:49 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:55:49 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:55:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CF7FEBD850> (4, 4)
12/09/2023 12:55:49 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:55:49 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:55:49 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:55:50 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001CF7FEBC590> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 12:55:50 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:55:50 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:55:50 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:55:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CF7FEBDD10> (5, 4)
12/09/2023 12:55:50 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:55:50 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:55:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001CF7FEBD850> (4, 4)
12/09/2023 12:55:50 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:55:50 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:55:50 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:56:35 PM Launching Main.py
12/09/2023 12:56:36 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A02F1AAF50> moves and attacks before: ([], [])
12/09/2023 12:56:36 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:56:36 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:56:36 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:56:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A02F1AACD0> (5, 4)
12/09/2023 12:56:36 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:56:36 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:56:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A02F1A9FD0> (4, 4)
12/09/2023 12:56:36 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:56:36 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:56:36 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 12:57:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A02F1AB990> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 12:57:27 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:57:27 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 12:57:27 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:57:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A02F1AAE50> (5, 5)
12/09/2023 12:57:27 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 12:57:27 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:57:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A02F1A9ED0> (4, 5)
12/09/2023 12:57:27 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 12:57:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 12:57:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 12:57:30 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A02F1AB990> moves and attacks before: ([(5, 5), (4, 5)], [])
12/09/2023 12:57:30 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:57:30 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 12:57:30 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:57:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A02F1AAE50> (5, 5)
12/09/2023 12:57:30 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 12:57:30 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:57:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A02F1A9ED0> (4, 5)
12/09/2023 12:57:30 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 12:57:30 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 12:57:30 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 12:57:33 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A02F1AB990> moves and attacks before: ([(5, 5), (4, 5)], [])
12/09/2023 12:57:33 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:57:33 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 12:57:33 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:57:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A02F1AAE50> (5, 5)
12/09/2023 12:57:33 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 12:57:33 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:57:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A02F1A9ED0> (4, 5)
12/09/2023 12:57:33 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 12:57:33 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 12:57:33 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 12:58:00 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A02F1AB990> moves and attacks before: ([(5, 5), (4, 5)], [])
12/09/2023 12:58:00 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:58:00 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 12:58:00 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:58:00 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A02F1AAE50> (5, 5)
12/09/2023 12:58:00 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 12:58:00 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:58:00 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A02F1A9ED0> (4, 5)
12/09/2023 12:58:00 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 12:58:00 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 12:58:00 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 12:58:07 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001A02F1AB990> moves and attacks before: ([(5, 5), (4, 5)], [])
12/09/2023 12:58:07 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:58:07 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 12:58:07 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:58:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A02F1AAE50> (5, 5)
12/09/2023 12:58:07 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 12:58:07 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:58:07 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001A02F1A9ED0> (4, 5)
12/09/2023 12:58:07 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 12:58:07 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 12:58:07 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 12:58:17 PM Launching Main.py
12/09/2023 12:58:18 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000024500EABCD0> moves and attacks before: ([], [])
12/09/2023 12:58:18 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:58:18 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 12:58:18 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:58:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000024500EAAF50> (5, 2)
12/09/2023 12:58:18 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 12:58:18 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:58:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000024500EA96D0> (4, 2)
12/09/2023 12:58:18 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 12:58:18 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 12:58:18 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 12:58:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000024500EABCD0> moves and attacks before: ([(5, 2), (4, 2)], [])
12/09/2023 12:58:19 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:58:19 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 12:58:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:58:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000024500EAAF50> (5, 2)
12/09/2023 12:58:19 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 12:58:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:58:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000024500EA96D0> (4, 2)
12/09/2023 12:58:19 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 12:58:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 12:58:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 12:58:54 PM Launching Main.py
12/09/2023 12:58:55 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002755EE6B710> moves and attacks before: ([], [])
12/09/2023 12:58:55 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:58:55 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 12:58:55 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:58:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002755EE68790> (5, 3)
12/09/2023 12:58:55 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 12:58:55 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:58:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002755EE6BA90> (4, 3)
12/09/2023 12:58:55 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 12:58:55 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 12:58:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 12:59:51 PM Launching Main.py
12/09/2023 12:59:53 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001FA24561090> moves and attacks before: ([], [])
12/09/2023 12:59:53 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 12:59:53 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 12:59:53 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:59:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001FA24563110> (5, 4)
12/09/2023 12:59:53 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 12:59:53 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 12:59:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001FA245630D0> (4, 4)
12/09/2023 12:59:53 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 12:59:53 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 12:59:53 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:00:51 PM Launching Main.py
12/09/2023 01:00:52 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000015BB8293190> moves and attacks before: ([], [])
12/09/2023 01:00:52 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:00:52 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:00:52 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:00:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000015BB8291650> (5, 4)
12/09/2023 01:00:52 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:00:52 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:00:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000015BB8293410> (4, 4)
12/09/2023 01:00:52 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:00:52 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:00:52 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:01:21 PM Launching Main.py
12/09/2023 01:01:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001851EFBE2D0> moves and attacks before: ([], [])
12/09/2023 01:01:22 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:01:22 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 01:01:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:01:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001851EFBE990> (5, 2)
12/09/2023 01:01:22 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 01:01:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:01:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001851EFBF1D0> (4, 2)
12/09/2023 01:01:22 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 01:01:22 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 01:01:22 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 01:01:56 PM Launching Main.py
12/09/2023 01:01:58 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001E6B7F10210> moves and attacks before: ([], [])
12/09/2023 01:01:58 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:01:58 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:01:58 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:01:58 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001E6B7F11310> (5, 4)
12/09/2023 01:01:58 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:01:58 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:01:58 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001E6B7F10E90> (4, 4)
12/09/2023 01:01:58 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:01:58 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:01:58 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:03:07 PM Launching Main.py
12/09/2023 01:03:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002139BFD1ED0> moves and attacks before: ([], [])
12/09/2023 01:03:08 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:03:08 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 01:03:08 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:03:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002139BFD1490> (5, 3)
12/09/2023 01:03:08 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 01:03:08 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:03:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002139BFD0110> (4, 3)
12/09/2023 01:03:08 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 01:03:08 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 01:03:08 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 01:03:17 PM Launching Main.py
12/09/2023 01:03:17 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001F8BC380110> moves and attacks before: ([], [])
12/09/2023 01:03:17 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:03:17 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:03:17 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:03:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001F8BC3811D0> (5, 4)
12/09/2023 01:03:17 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:03:17 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:03:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001F8BC3808D0> (4, 4)
12/09/2023 01:03:17 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:03:17 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:03:17 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:06:24 PM Launching Main.py
12/09/2023 01:06:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002959C5F1A10> moves and attacks before: ([], [])
12/09/2023 01:06:25 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:06:25 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 01:06:25 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:06:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002959C5F2B50> (5, 2)
12/09/2023 01:06:25 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 01:06:25 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:06:25 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002959C5F1E50> (4, 2)
12/09/2023 01:06:25 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 01:06:25 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 01:06:25 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 01:07:42 PM Launching Main.py
12/09/2023 01:07:43 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000012EEB262790> moves and attacks before: ([], [])
12/09/2023 01:07:43 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:07:43 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 01:07:43 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:07:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000012EEB262E90> (5, 2)
12/09/2023 01:07:43 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 01:07:43 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:07:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000012EEB2633D0> (4, 2)
12/09/2023 01:07:43 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 01:07:43 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 01:07:43 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 01:07:51 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000012EEB2615D0> moves and attacks before: ([], [])
12/09/2023 01:07:51 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:07:51 PM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 01:07:51 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:07:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000012EEB262D90> (2, 3)
12/09/2023 01:07:51 PM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 01:07:51 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:07:51 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000012EEB262750> (3, 3)
12/09/2023 01:07:51 PM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 01:07:51 PM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 01:07:51 PM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 01:08:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Bishop object at 0x0000012EEB262250> moves and attacks before: ([], [])
12/09/2023 01:08:08 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 01:08:48 PM Launching Main.py
12/09/2023 01:08:49 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002A7EEB33810> moves and attacks before: ([], [])
12/09/2023 01:08:49 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:08:49 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:08:49 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:08:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002A7EEB30C90> (5, 4)
12/09/2023 01:08:49 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:08:49 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:08:49 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002A7EEB335D0> (4, 4)
12/09/2023 01:08:49 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:08:49 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:08:49 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:09:30 PM Launching Main.py
12/09/2023 01:09:31 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000024F44CE2690> moves and attacks before: ([], [])
12/09/2023 01:09:31 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:09:31 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 01:09:31 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:09:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000024F44CE3210> (5, 3)
12/09/2023 01:09:31 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 01:09:31 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:09:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000024F44CE1890> (4, 3)
12/09/2023 01:09:31 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 01:09:31 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 01:09:31 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 01:11:28 PM Launching Main.py
12/09/2023 01:11:29 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000298945F3850> moves and attacks before: ([], [])
12/09/2023 01:11:29 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:11:29 PM Pawn Figure info: (6, 6, 'w', 'p')
12/09/2023 01:11:29 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:11:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000298945F2BD0> (5, 6)
12/09/2023 01:11:29 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/09/2023 01:11:29 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:11:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000298945F2050> (4, 6)
12/09/2023 01:11:29 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/09/2023 01:11:29 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/09/2023 01:11:29 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/09/2023 01:11:33 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000298945F3950> moves and attacks before: ([(5, 6), (4, 6)], [])
12/09/2023 01:11:33 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:11:33 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:11:33 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:11:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000298945F2D10> (5, 4)
12/09/2023 01:11:33 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:11:33 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:11:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000298945F1490> (4, 4)
12/09/2023 01:11:33 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:11:33 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:11:33 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:11:34 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000298945F3950> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 01:11:34 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:11:34 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:11:34 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:11:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000298945F2D10> (5, 4)
12/09/2023 01:11:34 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:11:34 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:11:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000298945F1490> (4, 4)
12/09/2023 01:11:34 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:11:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:11:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:11:34 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000298945F3950> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 01:11:34 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:11:34 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:11:34 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:11:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000298945F2D10> (5, 4)
12/09/2023 01:11:34 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:11:34 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:11:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000298945F1490> (4, 4)
12/09/2023 01:11:34 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:11:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:11:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:11:35 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000298945F3950> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 01:11:35 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:11:35 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:11:35 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:11:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000298945F2D10> (5, 4)
12/09/2023 01:11:35 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:11:35 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:11:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000298945F1490> (4, 4)
12/09/2023 01:11:35 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:11:35 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:11:35 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:11:35 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000298945F3950> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 01:11:35 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:11:35 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:11:35 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:11:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000298945F2D10> (5, 4)
12/09/2023 01:11:35 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:11:35 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:11:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000298945F1490> (4, 4)
12/09/2023 01:11:35 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:11:35 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:11:35 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:11:35 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000298945F3950> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 01:11:35 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:11:35 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:11:35 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:11:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000298945F2D10> (5, 4)
12/09/2023 01:11:35 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:11:35 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:11:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000298945F1490> (4, 4)
12/09/2023 01:11:35 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:11:35 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:11:35 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:11:36 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000298945F3950> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 01:11:36 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:11:36 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:11:36 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:11:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000298945F2D10> (5, 4)
12/09/2023 01:11:36 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:11:36 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:11:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000298945F1490> (4, 4)
12/09/2023 01:11:36 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:11:36 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:11:36 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:11:37 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000298945F3950> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 01:11:37 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:11:37 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:11:37 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:11:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000298945F2D10> (5, 4)
12/09/2023 01:11:37 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:11:37 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:11:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000298945F1490> (4, 4)
12/09/2023 01:11:37 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:11:37 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:11:37 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:12:31 PM Launching Main.py
12/09/2023 01:12:33 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002238E4A0F90> moves and attacks before: ([], [])
12/09/2023 01:12:33 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:12:33 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 01:12:33 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:12:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002238E4A3E90> (5, 2)
12/09/2023 01:12:33 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 01:12:33 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:12:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002238E4A12D0> (4, 2)
12/09/2023 01:12:33 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 01:12:33 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 01:12:33 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 01:13:05 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002238E4A3750> moves and attacks before: ([], [])
12/09/2023 01:13:05 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:13:05 PM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 01:13:05 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:13:05 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002238E4A3490> (2, 3)
12/09/2023 01:13:05 PM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 01:13:05 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:13:05 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002238E4A08D0> (3, 3)
12/09/2023 01:13:05 PM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 01:13:05 PM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 01:13:05 PM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 01:13:41 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002238E4A1190> moves and attacks before: ([], [])
12/09/2023 01:13:41 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:13:41 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:13:41 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:13:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002238E4A26D0> (5, 4)
12/09/2023 01:13:41 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:13:41 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:13:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002238E4A11D0> (4, 4)
12/09/2023 01:13:41 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:13:41 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:13:41 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:25:56 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002238E4A37D0> moves and attacks before: ([], [])
12/09/2023 01:25:56 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:25:56 PM Pawn Figure info: (1, 5, 'b', 'p')
12/09/2023 01:25:56 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:25:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002238E4A0090> (2, 5)
12/09/2023 01:25:56 PM Pawn (2, 5) is empty appended moves [(2, 5)]
12/09/2023 01:25:56 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:25:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002238E4A1890> (3, 5)
12/09/2023 01:25:56 PM Pawn (3, 5) is empty appended moves [(2, 5), (3, 5)]
12/09/2023 01:25:56 PM Pawn ReturnPossibleMove(): returning values: ([(2, 5), (3, 5)], [])
12/09/2023 01:25:56 PM RenderPossibleMoves(): moves and attacks after: ([(2, 5), (3, 5)], [])
12/09/2023 01:27:45 PM Launching Main.py
12/09/2023 01:27:46 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000023C20AE3A10> moves and attacks before: ([], [])
12/09/2023 01:27:46 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:27:46 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:27:46 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:27:46 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000023C20AE3ED0> (5, 4)
12/09/2023 01:27:46 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:27:46 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:27:46 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000023C20AE15D0> (4, 4)
12/09/2023 01:27:46 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:27:46 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:27:46 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:32:07 PM Launching Main.py
12/09/2023 01:32:08 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000277961A30D0> moves and attacks before: ([], [])
12/09/2023 01:32:08 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:32:08 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 01:32:08 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:32:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000277961A1790> (5, 5)
12/09/2023 01:32:08 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 01:32:08 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:32:08 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000277961A0110> (4, 5)
12/09/2023 01:32:08 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 01:32:08 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 01:32:08 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 01:33:14 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000277961A0E50> moves and attacks before: ([], [])
12/09/2023 01:33:14 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:33:14 PM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 01:33:14 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:33:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000277961A3850> (2, 3)
12/09/2023 01:33:14 PM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 01:33:14 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:33:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000277961A2FD0> (3, 3)
12/09/2023 01:33:14 PM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 01:33:14 PM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 01:33:14 PM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 01:34:14 PM Launching Main.py
12/09/2023 01:34:15 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002B70A8A6610> moves and attacks before: ([], [])
12/09/2023 01:34:15 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:34:15 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 01:34:15 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:34:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002B70A899D50> (5, 5)
12/09/2023 01:34:15 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 01:34:15 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:34:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002B70A898710> (4, 5)
12/09/2023 01:34:15 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 01:34:15 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 01:34:15 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 01:35:17 PM Launching Main.py
12/09/2023 01:35:18 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EC97D92450> moves and attacks before: ([], [])
12/09/2023 01:35:18 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:35:18 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:35:18 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:35:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EC97D92D10> (5, 4)
12/09/2023 01:35:18 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:35:18 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:35:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EC97D93150> (4, 4)
12/09/2023 01:35:18 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:35:18 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:35:18 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:35:21 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EC97D938D0> moves and attacks before: ([], [])
12/09/2023 01:35:21 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:35:21 PM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 01:35:21 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:35:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EC97D93C90> (2, 3)
12/09/2023 01:35:21 PM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 01:35:21 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:35:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EC97D92690> (3, 3)
12/09/2023 01:35:21 PM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 01:35:21 PM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 01:35:21 PM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 01:36:10 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EC97D922D0> moves and attacks before: ([], [])
12/09/2023 01:36:10 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:36:10 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 01:36:10 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:36:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EC97D92C10> (5, 2)
12/09/2023 01:36:10 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 01:36:10 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:36:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EC97D93250> (4, 2)
12/09/2023 01:36:10 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 01:36:10 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 01:36:10 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 01:36:11 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001EC97D938D0> moves and attacks before: ([], [])
12/09/2023 01:36:11 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:36:11 PM Pawn Figure info: (3, 3, 'b', 'p')
12/09/2023 01:36:11 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:36:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001EC97D93390> (4, 3)
12/09/2023 01:36:11 PM Pawn (4, 3) is empty appended moves [(4, 3)]
12/09/2023 01:36:11 PM Pawn ReturnPossibleMove(): returning values: ([(4, 3)], [(4, 4), (4, 2)])
12/09/2023 01:36:11 PM RenderPossibleMoves(): moves and attacks after: ([(4, 3)], [(4, 4), (4, 2)])
12/09/2023 01:36:12 PM Launching Main.py
12/09/2023 01:36:14 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000014A0ABA1410> moves and attacks before: ([], [])
12/09/2023 01:36:14 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:36:14 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:36:14 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:36:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000014A0ABA3010> (5, 4)
12/09/2023 01:36:14 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:36:14 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:36:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000014A0ABA1790> (4, 4)
12/09/2023 01:36:14 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:36:14 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:36:14 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:36:15 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000014A0ABA25D0> moves and attacks before: ([], [])
12/09/2023 01:36:15 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:36:15 PM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 01:36:15 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:36:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000014A0ABA3F10> (2, 3)
12/09/2023 01:36:15 PM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 01:36:15 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:36:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000014A0ABA0E90> (3, 3)
12/09/2023 01:36:15 PM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 01:36:15 PM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 01:36:15 PM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 01:36:15 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000014A0ABA1410> moves and attacks before: ([], [])
12/09/2023 01:36:15 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:36:15 PM Pawn Figure info: (4, 4, 'w', 'p')
12/09/2023 01:36:15 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:36:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000014A0ABA12D0> (3, 4)
12/09/2023 01:36:15 PM Pawn (3, 4) is empty appended moves [(3, 4)]
12/09/2023 01:36:15 PM Pawn ReturnPossibleMove(): returning values: ([(3, 4)], [(3, 3)])
12/09/2023 01:36:15 PM RenderPossibleMoves(): moves and attacks after: ([(3, 4)], [(3, 3)])
12/09/2023 01:37:09 PM Launching Main.py
12/09/2023 01:37:10 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001D8FFD237D0> moves and attacks before: ([], [])
12/09/2023 01:37:10 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:37:10 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 01:37:10 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:37:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001D8FFD21450> (5, 5)
12/09/2023 01:37:10 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 01:37:10 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:37:10 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001D8FFD23210> (4, 5)
12/09/2023 01:37:10 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 01:37:10 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 01:37:10 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 01:37:15 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001D8FFD22A10> moves and attacks before: ([], [])
12/09/2023 01:37:15 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:37:15 PM Pawn Figure info: (1, 4, 'b', 'p')
12/09/2023 01:37:15 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:37:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001D8FFD20410> (2, 4)
12/09/2023 01:37:15 PM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 01:37:15 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:37:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001D8FFD23090> (3, 4)
12/09/2023 01:37:15 PM Pawn (3, 4) is empty appended moves [(2, 4), (3, 4)]
12/09/2023 01:37:15 PM Pawn ReturnPossibleMove(): returning values: ([(2, 4), (3, 4)], [])
12/09/2023 01:37:15 PM RenderPossibleMoves(): moves and attacks after: ([(2, 4), (3, 4)], [])
12/09/2023 01:37:43 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001D8FFD23750> moves and attacks before: ([], [])
12/09/2023 01:37:43 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:37:43 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 01:37:43 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:37:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001D8FFD20810> (5, 3)
12/09/2023 01:37:43 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 01:37:43 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:37:43 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001D8FFD202D0> (4, 3)
12/09/2023 01:37:43 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 01:37:43 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 01:37:43 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 01:38:22 PM Launching Main.py
12/09/2023 01:38:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000022A4A852E50> moves and attacks before: ([], [])
12/09/2023 01:38:23 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:38:23 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:38:23 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:38:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000022A4A8515D0> (5, 4)
12/09/2023 01:38:23 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:38:23 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:38:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000022A4A853390> (4, 4)
12/09/2023 01:38:23 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:38:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:38:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:38:38 PM Launching Main.py
12/09/2023 01:38:39 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000239D8E635D0> moves and attacks before: ([], [])
12/09/2023 01:38:39 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:38:39 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:38:39 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:38:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000239D8E61DD0> (5, 4)
12/09/2023 01:38:39 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:38:39 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:38:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000239D8E61590> (4, 4)
12/09/2023 01:38:39 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:38:39 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:38:39 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:38:40 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000239D8E635D0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 01:38:40 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:38:40 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:38:40 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:38:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000239D8E61DD0> (5, 4)
12/09/2023 01:38:40 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:38:40 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:38:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000239D8E61590> (4, 4)
12/09/2023 01:38:40 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:38:40 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:38:40 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:39:15 PM Launching Main.py
12/09/2023 01:39:17 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002AEF2DC2C10> moves and attacks before: ([], [])
12/09/2023 01:39:17 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:39:17 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 01:39:17 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:39:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002AEF2DC00D0> (5, 3)
12/09/2023 01:39:17 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 01:39:17 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:39:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002AEF2DC0450> (4, 3)
12/09/2023 01:39:17 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 01:39:17 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 01:39:17 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 01:39:18 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002AEF2D1C350> moves and attacks before: ([], [])
12/09/2023 01:39:18 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:39:18 PM Pawn Figure info: (1, 4, 'b', 'p')
12/09/2023 01:39:18 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:39:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002AEF2DC01D0> (2, 4)
12/09/2023 01:39:18 PM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 01:39:18 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:39:18 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002AEF2DC1110> (3, 4)
12/09/2023 01:39:18 PM Pawn (3, 4) is empty appended moves [(2, 4), (3, 4)]
12/09/2023 01:39:18 PM Pawn ReturnPossibleMove(): returning values: ([(2, 4), (3, 4)], [])
12/09/2023 01:39:18 PM RenderPossibleMoves(): moves and attacks after: ([(2, 4), (3, 4)], [])
12/09/2023 01:39:36 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002AEF2DC2A90> moves and attacks before: ([], [])
12/09/2023 01:39:36 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:39:36 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:39:36 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:39:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002AEF2DC0750> (5, 4)
12/09/2023 01:39:36 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:39:36 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:39:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002AEF2DC0190> (4, 4)
12/09/2023 01:39:36 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:39:36 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:39:36 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:39:39 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002AEF2DC2C10> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 01:39:39 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:39:39 PM Pawn Figure info: (4, 3, 'w', 'p')
12/09/2023 01:39:39 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:39:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002AEF2DC1450> (3, 3)
12/09/2023 01:39:39 PM Pawn (3, 3) is empty appended moves [(3, 3)]
12/09/2023 01:39:39 PM Pawn ReturnPossibleMove(): returning values: ([(3, 3)], [(3, 4)])
12/09/2023 01:39:39 PM RenderPossibleMoves(): moves and attacks after: ([(3, 3)], [(3, 4)])
12/09/2023 01:39:44 PM Launching Main.py
12/09/2023 01:39:45 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000115199B2890> moves and attacks before: ([], [])
12/09/2023 01:39:45 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:39:45 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 01:39:45 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:39:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000115199B0090> (5, 5)
12/09/2023 01:39:45 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 01:39:45 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:39:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000115199B1090> (4, 5)
12/09/2023 01:39:45 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 01:39:45 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 01:39:45 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 01:39:46 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000115199B3890> moves and attacks before: ([], [])
12/09/2023 01:39:46 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:39:46 PM Pawn Figure info: (1, 5, 'b', 'p')
12/09/2023 01:39:46 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:39:46 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000115199B0CD0> (2, 5)
12/09/2023 01:39:46 PM Pawn (2, 5) is empty appended moves [(2, 5)]
12/09/2023 01:39:46 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:39:46 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000115199B1310> (3, 5)
12/09/2023 01:39:46 PM Pawn (3, 5) is empty appended moves [(2, 5), (3, 5)]
12/09/2023 01:39:46 PM Pawn ReturnPossibleMove(): returning values: ([(2, 5), (3, 5)], [])
12/09/2023 01:39:46 PM RenderPossibleMoves(): moves and attacks after: ([(2, 5), (3, 5)], [])
12/09/2023 01:39:46 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000115199B2890> moves and attacks before: ([], [])
12/09/2023 01:39:46 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:39:46 PM Pawn Figure info: (4, 5, 'w', 'p')
12/09/2023 01:39:46 PM Pawn attempting check on board[x-a][y]: False
12/09/2023 01:39:46 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000115199B1310> (3, 5)
12/09/2023 01:39:46 PM Pawn ReturnPossibleMove(): returning values: ([], [])
12/09/2023 01:39:46 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 01:39:48 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000115199B2350> moves and attacks before: ([], [])
12/09/2023 01:39:48 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:39:48 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:39:48 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:39:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000115199B2BD0> (5, 4)
12/09/2023 01:39:48 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:39:48 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:39:48 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000115199B3450> (4, 4)
12/09/2023 01:39:48 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:39:48 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:39:48 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:39:50 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000115199B3890> moves and attacks before: ([], [])
12/09/2023 01:39:50 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:39:50 PM Pawn Figure info: (3, 5, 'b', 'p')
12/09/2023 01:39:50 PM Pawn attempting check on board[x-a][y]: False
12/09/2023 01:39:50 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000115199B1090> (4, 5)
12/09/2023 01:39:50 PM Pawn ReturnPossibleMove(): returning values: ([], [(4, 4)])
12/09/2023 01:39:50 PM RenderPossibleMoves(): moves and attacks after: ([], [(4, 4)])
12/09/2023 01:39:53 PM Launching Main.py
12/09/2023 01:39:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001BF89393AD0> moves and attacks before: ([], [])
12/09/2023 01:39:54 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:39:54 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 01:39:54 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:39:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001BF89392E90> (5, 3)
12/09/2023 01:39:54 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 01:39:54 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:39:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001BF89391610> (4, 3)
12/09/2023 01:39:54 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 01:39:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 01:39:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 01:39:56 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001BF89390510> moves and attacks before: ([], [])
12/09/2023 01:39:56 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:39:56 PM Pawn Figure info: (1, 2, 'b', 'p')
12/09/2023 01:39:56 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:39:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001BF89391810> (2, 2)
12/09/2023 01:39:56 PM Pawn (2, 2) is empty appended moves [(2, 2)]
12/09/2023 01:39:56 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:39:56 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001BF89390D10> (3, 2)
12/09/2023 01:39:56 PM Pawn (3, 2) is empty appended moves [(2, 2), (3, 2)]
12/09/2023 01:39:56 PM Pawn ReturnPossibleMove(): returning values: ([(2, 2), (3, 2)], [])
12/09/2023 01:39:56 PM RenderPossibleMoves(): moves and attacks after: ([(2, 2), (3, 2)], [])
12/09/2023 01:39:58 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001BF89390510> moves and attacks before: ([(2, 2), (3, 2)], [])
12/09/2023 01:39:58 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:39:58 PM Pawn Figure info: (1, 2, 'b', 'p')
12/09/2023 01:39:58 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:39:58 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001BF89391810> (2, 2)
12/09/2023 01:39:58 PM Pawn (2, 2) is empty appended moves [(2, 2)]
12/09/2023 01:39:58 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:39:58 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001BF89390D10> (3, 2)
12/09/2023 01:39:58 PM Pawn (3, 2) is empty appended moves [(2, 2), (3, 2)]
12/09/2023 01:39:58 PM Pawn ReturnPossibleMove(): returning values: ([(2, 2), (3, 2)], [])
12/09/2023 01:39:58 PM RenderPossibleMoves(): moves and attacks after: ([(2, 2), (3, 2)], [])
12/09/2023 01:41:20 PM Launching Main.py
12/09/2023 01:41:21 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000023FAA962510> moves and attacks before: ([], [])
12/09/2023 01:41:21 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:41:21 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 01:41:21 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:41:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000023FAA963190> (5, 3)
12/09/2023 01:41:21 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 01:41:21 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:41:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000023FAA962E50> (4, 3)
12/09/2023 01:41:21 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 01:41:21 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 01:41:21 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 01:41:29 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000023FAA803090> moves and attacks before: ([], [])
12/09/2023 01:41:29 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:41:29 PM Pawn Figure info: (1, 4, 'b', 'p')
12/09/2023 01:41:29 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:41:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000023FAA962F10> (2, 4)
12/09/2023 01:41:29 PM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 01:41:29 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:41:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000023FAA963390> (3, 4)
12/09/2023 01:41:29 PM Pawn (3, 4) is empty appended moves [(2, 4), (3, 4)]
12/09/2023 01:41:29 PM Pawn ReturnPossibleMove(): returning values: ([(2, 4), (3, 4)], [])
12/09/2023 01:41:29 PM RenderPossibleMoves(): moves and attacks after: ([(2, 4), (3, 4)], [])
12/09/2023 01:43:23 PM Launching Main.py
12/09/2023 01:43:55 PM Launching Main.py
12/09/2023 01:44:17 PM Launching Main.py
12/09/2023 01:44:19 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018545031250> moves and attacks before: ([], [])
12/09/2023 01:44:19 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:44:19 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 01:44:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:44:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000185450308D0> (5, 3)
12/09/2023 01:44:19 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 01:44:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:44:19 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018545030390> (4, 3)
12/09/2023 01:44:19 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 01:44:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 01:44:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 01:44:29 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000018545032B90> moves and attacks before: ([], [])
12/09/2023 01:44:29 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:44:29 PM Pawn Figure info: (1, 4, 'b', 'p')
12/09/2023 01:44:29 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:44:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000185450335D0> (2, 4)
12/09/2023 01:44:29 PM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 01:44:29 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:44:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000018545033150> (3, 4)
12/09/2023 01:44:29 PM Pawn (3, 4) is empty appended moves [(2, 4), (3, 4)]
12/09/2023 01:44:29 PM Pawn ReturnPossibleMove(): returning values: ([(2, 4), (3, 4)], [])
12/09/2023 01:44:29 PM RenderPossibleMoves(): moves and attacks after: ([(2, 4), (3, 4)], [])
12/09/2023 01:45:20 PM Launching Main.py
12/09/2023 01:45:26 PM Launching Main.py
12/09/2023 01:45:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001F21CAEA190> moves and attacks before: ([], [])
12/09/2023 01:45:27 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:45:27 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:45:27 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:45:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001F21CAE9D90> (5, 4)
12/09/2023 01:45:27 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:45:27 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:45:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001F21CAE8C50> (4, 4)
12/09/2023 01:45:27 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:45:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:45:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:46:30 PM Launching Main.py
12/09/2023 01:46:33 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001F8498E9190> moves and attacks before: ([], [])
12/09/2023 01:46:33 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:46:33 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 01:46:33 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:46:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001F8498E9D90> (5, 5)
12/09/2023 01:46:33 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 01:46:33 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:46:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001F8498E8890> (4, 5)
12/09/2023 01:46:33 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 01:46:33 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 01:46:33 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 01:46:34 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001F8498EBB90> moves and attacks before: ([], [])
12/09/2023 01:46:34 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:46:34 PM Pawn Figure info: (1, 4, 'b', 'p')
12/09/2023 01:46:34 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:46:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001F8498E9B50> (2, 4)
12/09/2023 01:46:34 PM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 01:46:34 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:46:34 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001F8498EB110> (3, 4)
12/09/2023 01:46:34 PM Pawn (3, 4) is empty appended moves [(2, 4), (3, 4)]
12/09/2023 01:46:34 PM Pawn ReturnPossibleMove(): returning values: ([(2, 4), (3, 4)], [])
12/09/2023 01:46:34 PM RenderPossibleMoves(): moves and attacks after: ([(2, 4), (3, 4)], [])
12/09/2023 01:46:54 PM Launching Main.py
12/09/2023 01:46:55 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001515331D050> moves and attacks before: ([], [])
12/09/2023 01:46:55 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:46:55 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:46:55 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:46:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000015153312750> (5, 4)
12/09/2023 01:46:55 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:46:55 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:46:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000151533131D0> (4, 4)
12/09/2023 01:46:55 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:46:55 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:46:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:47:13 PM Launching Main.py
12/09/2023 01:47:14 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001E6581AF610> moves and attacks before: ([], [])
12/09/2023 01:47:14 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:47:14 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:47:14 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:47:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001E6581AE610> (5, 4)
12/09/2023 01:47:14 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:47:14 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:47:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001E6581AF690> (4, 4)
12/09/2023 01:47:14 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:47:14 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:47:14 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:47:22 PM Launching Main.py
12/09/2023 01:47:23 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000017AF1C05890> moves and attacks before: ([], [])
12/09/2023 01:47:23 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:47:23 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 01:47:23 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000017AF1C04190> (5, 3)
12/09/2023 01:47:23 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 01:47:23 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:47:23 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000017AF1C06150> (4, 3)
12/09/2023 01:47:23 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 01:47:23 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 01:47:23 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 01:47:37 PM Launching Main.py
12/09/2023 01:47:38 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000279BFB76C50> moves and attacks before: ([], [])
12/09/2023 01:47:38 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:47:38 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 01:47:38 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:47:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000279BFB76450> (5, 3)
12/09/2023 01:47:38 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 01:47:38 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:47:38 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000279BFB76E50> (4, 3)
12/09/2023 01:47:38 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 01:47:38 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 01:47:38 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 01:47:51 PM Launching Main.py
12/09/2023 01:47:52 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000021966C250D0> moves and attacks before: ([], [])
12/09/2023 01:47:52 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:47:52 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 01:47:52 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:47:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000021966C24C10> (5, 5)
12/09/2023 01:47:52 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 01:47:52 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:47:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000021966C24310> (4, 5)
12/09/2023 01:47:52 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 01:47:52 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 01:47:52 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 01:48:23 PM Launching Main.py
12/09/2023 01:48:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029FBC54C6D0> moves and attacks before: ([], [])
12/09/2023 01:48:24 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:48:24 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:48:24 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:48:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029FBC542FD0> (5, 4)
12/09/2023 01:48:24 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:48:24 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:48:24 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029FBC541050> (4, 4)
12/09/2023 01:48:24 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:48:24 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:24 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:40 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029FBC54C6D0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:40 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:48:40 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:48:40 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:48:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029FBC542FD0> (5, 4)
12/09/2023 01:48:40 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:48:40 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:48:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029FBC541050> (4, 4)
12/09/2023 01:48:40 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:48:40 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:40 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:41 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029FBC54C6D0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:41 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:48:41 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:48:41 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:48:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029FBC542FD0> (5, 4)
12/09/2023 01:48:41 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:48:41 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:48:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029FBC541050> (4, 4)
12/09/2023 01:48:41 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:48:41 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:41 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:41 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029FBC54C6D0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:41 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:48:41 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:48:41 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:48:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029FBC542FD0> (5, 4)
12/09/2023 01:48:41 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:48:41 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:48:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029FBC541050> (4, 4)
12/09/2023 01:48:41 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:48:41 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:41 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:41 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029FBC54C6D0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:41 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:48:41 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:48:41 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:48:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029FBC542FD0> (5, 4)
12/09/2023 01:48:41 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:48:41 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:48:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029FBC541050> (4, 4)
12/09/2023 01:48:41 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:48:41 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:41 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:41 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029FBC54C6D0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:41 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:48:41 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:48:41 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:48:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029FBC542FD0> (5, 4)
12/09/2023 01:48:41 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:48:41 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:48:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029FBC541050> (4, 4)
12/09/2023 01:48:41 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:48:41 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:41 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:41 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029FBC54C6D0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:41 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:48:41 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:48:41 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:48:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029FBC542FD0> (5, 4)
12/09/2023 01:48:41 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:48:41 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:48:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029FBC541050> (4, 4)
12/09/2023 01:48:41 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:48:41 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:41 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:41 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029FBC54C6D0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:41 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:48:41 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:48:41 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:48:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029FBC542FD0> (5, 4)
12/09/2023 01:48:41 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:48:41 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:48:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029FBC541050> (4, 4)
12/09/2023 01:48:41 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:48:41 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:41 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:42 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029FBC54C6D0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:42 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:48:42 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:48:42 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:48:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029FBC542FD0> (5, 4)
12/09/2023 01:48:42 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:48:42 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:48:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029FBC541050> (4, 4)
12/09/2023 01:48:42 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:48:42 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:42 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:42 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029FBC54C6D0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:42 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:48:42 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:48:42 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:48:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029FBC542FD0> (5, 4)
12/09/2023 01:48:42 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:48:42 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:48:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029FBC541050> (4, 4)
12/09/2023 01:48:42 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:48:42 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:42 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:42 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029FBC54C6D0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:42 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:48:42 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:48:42 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:48:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029FBC542FD0> (5, 4)
12/09/2023 01:48:42 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:48:42 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:48:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029FBC541050> (4, 4)
12/09/2023 01:48:42 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:48:42 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:42 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:42 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x0000029FBC54C6D0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:42 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:48:42 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:48:42 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:48:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029FBC542FD0> (5, 4)
12/09/2023 01:48:42 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:48:42 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:48:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x0000029FBC541050> (4, 4)
12/09/2023 01:48:42 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:48:42 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:42 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:48:56 PM Launching Main.py
12/09/2023 01:49:11 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001B09BB7B310> moves and attacks before: ([], [])
12/09/2023 01:49:11 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:49:11 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 01:49:11 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:49:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001B09BB78210> (5, 5)
12/09/2023 01:49:11 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 01:49:11 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:49:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001B09BB79290> (4, 5)
12/09/2023 01:49:11 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 01:49:11 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 01:49:11 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 01:50:08 PM Launching Main.py
12/09/2023 01:50:15 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000196FFB55DD0> moves and attacks before: ([], [])
12/09/2023 01:50:15 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:50:15 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:50:15 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:50:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000196FFB55150> (5, 4)
12/09/2023 01:50:15 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:50:15 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:50:15 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000196FFB57C90> (4, 4)
12/09/2023 01:50:15 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:50:15 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:50:15 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:50:16 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000196FFB54710> moves and attacks before: ([], [])
12/09/2023 01:50:16 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:50:16 PM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 01:50:16 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:50:16 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000196FFB575D0> (2, 3)
12/09/2023 01:50:16 PM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 01:50:16 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:50:16 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000196FFB54590> (3, 3)
12/09/2023 01:50:16 PM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 01:50:16 PM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 01:50:16 PM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 01:50:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000196FFB56AD0> moves and attacks before: ([], [])
12/09/2023 01:50:28 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:50:28 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 01:50:28 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:50:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000196FFB54D10> (5, 3)
12/09/2023 01:50:28 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 01:50:28 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:50:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000196FFB57850> (4, 3)
12/09/2023 01:50:28 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 01:50:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 01:50:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 01:50:29 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000196FFB56AD0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 01:50:29 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:50:29 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 01:50:29 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:50:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000196FFB54D10> (5, 3)
12/09/2023 01:50:29 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 01:50:29 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:50:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000196FFB57850> (4, 3)
12/09/2023 01:50:29 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 01:50:29 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 01:50:29 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 01:51:26 PM Launching Main.py
12/09/2023 01:51:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000200D1E14090> moves and attacks before: ([], [])
12/09/2023 01:51:27 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:51:27 PM Pawn Figure info: (6, 6, 'w', 'p')
12/09/2023 01:51:27 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:51:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000200D1E16F10> (5, 6)
12/09/2023 01:51:27 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/09/2023 01:51:27 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:51:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000200D1E16250> (4, 6)
12/09/2023 01:51:27 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/09/2023 01:51:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/09/2023 01:51:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/09/2023 01:51:29 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000200D1E17CD0> moves and attacks before: ([], [])
12/09/2023 01:51:29 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:51:29 PM Pawn Figure info: (1, 5, 'b', 'p')
12/09/2023 01:51:29 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:51:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000200D1E16550> (2, 5)
12/09/2023 01:51:29 PM Pawn (2, 5) is empty appended moves [(2, 5)]
12/09/2023 01:51:29 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:51:29 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000200D1E175D0> (3, 5)
12/09/2023 01:51:29 PM Pawn (3, 5) is empty appended moves [(2, 5), (3, 5)]
12/09/2023 01:51:29 PM Pawn ReturnPossibleMove(): returning values: ([(2, 5), (3, 5)], [])
12/09/2023 01:51:29 PM RenderPossibleMoves(): moves and attacks after: ([(2, 5), (3, 5)], [])
12/09/2023 01:51:31 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000200D1E15910> moves and attacks before: ([], [])
12/09/2023 01:51:31 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:51:31 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:51:31 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:51:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000200D1E14690> (5, 4)
12/09/2023 01:51:31 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:51:31 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:51:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000200D1E162D0> (4, 4)
12/09/2023 01:51:31 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:51:31 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:51:31 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:51:42 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000200D1E15750> moves and attacks before: ([], [])
12/09/2023 01:51:42 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:51:42 PM Pawn Figure info: (1, 2, 'b', 'p')
12/09/2023 01:51:42 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:51:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000200D1E14450> (2, 2)
12/09/2023 01:51:42 PM Pawn (2, 2) is empty appended moves [(2, 2)]
12/09/2023 01:51:42 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:51:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000200D1E141D0> (3, 2)
12/09/2023 01:51:42 PM Pawn (3, 2) is empty appended moves [(2, 2), (3, 2)]
12/09/2023 01:51:42 PM Pawn ReturnPossibleMove(): returning values: ([(2, 2), (3, 2)], [])
12/09/2023 01:51:42 PM RenderPossibleMoves(): moves and attacks after: ([(2, 2), (3, 2)], [])
12/09/2023 01:53:01 PM Launching Main.py
12/09/2023 01:53:03 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001D26C9C6050> moves and attacks before: ([], [])
12/09/2023 01:53:03 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:53:03 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 01:53:03 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:53:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001D26C9C47D0> (5, 3)
12/09/2023 01:53:03 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 01:53:03 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:53:03 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001D26C9C5DD0> (4, 3)
12/09/2023 01:53:03 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 01:53:03 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 01:53:03 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 01:53:16 PM Launching Main.py
12/09/2023 01:53:17 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001C5F77BEBD0> moves and attacks before: ([], [])
12/09/2023 01:53:17 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:53:17 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 01:53:17 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:53:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001C5F77B5150> (5, 3)
12/09/2023 01:53:17 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 01:53:17 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:53:17 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001C5F77B6250> (4, 3)
12/09/2023 01:53:17 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 01:53:17 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 01:53:17 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 01:53:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001C5F765EED0> moves and attacks before: ([], [])
12/09/2023 01:53:22 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:53:22 PM Pawn Figure info: (1, 2, 'b', 'p')
12/09/2023 01:53:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:53:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001C5F77B6790> (2, 2)
12/09/2023 01:53:22 PM Pawn (2, 2) is empty appended moves [(2, 2)]
12/09/2023 01:53:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:53:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001C5F77B52D0> (3, 2)
12/09/2023 01:53:22 PM Pawn (3, 2) is empty appended moves [(2, 2), (3, 2)]
12/09/2023 01:53:22 PM Pawn ReturnPossibleMove(): returning values: ([(2, 2), (3, 2)], [])
12/09/2023 01:53:22 PM RenderPossibleMoves(): moves and attacks after: ([(2, 2), (3, 2)], [])
12/09/2023 01:53:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001C5F75A6B10> moves and attacks before: ([], [])
12/09/2023 01:53:28 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:53:28 PM Pawn Figure info: (6, 1, 'w', 'p')
12/09/2023 01:53:28 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:53:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001C5F77B5250> (5, 1)
12/09/2023 01:53:28 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/09/2023 01:53:28 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:53:28 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001C5F77B60D0> (4, 1)
12/09/2023 01:53:28 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/09/2023 01:53:28 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/09/2023 01:53:28 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/09/2023 01:54:10 PM Launching Main.py
12/09/2023 01:54:11 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002DB7F9A4E90> moves and attacks before: ([], [])
12/09/2023 01:54:11 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:54:11 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:54:11 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:54:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002DB7F9A4BD0> (5, 4)
12/09/2023 01:54:11 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:54:11 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:54:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002DB7F9A7710> (4, 4)
12/09/2023 01:54:11 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:54:11 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:54:11 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:54:11 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002DB7F9A6DD0> moves and attacks before: ([], [])
12/09/2023 01:54:11 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:54:11 PM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 01:54:11 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:54:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002DB7F9A4110> (2, 3)
12/09/2023 01:54:11 PM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 01:54:11 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:54:11 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002DB7F9A7150> (3, 3)
12/09/2023 01:54:11 PM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 01:54:11 PM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 01:54:11 PM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 01:54:13 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002DB7F9A4F90> moves and attacks before: ([], [])
12/09/2023 01:54:13 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:54:13 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 01:54:13 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:54:13 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002DB7F9A4D10> (5, 2)
12/09/2023 01:54:13 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 01:54:13 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:54:13 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002DB7F9A5E10> (4, 2)
12/09/2023 01:54:13 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 01:54:13 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 01:54:13 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 01:54:14 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002DB7F9A6DD0> moves and attacks before: ([], [])
12/09/2023 01:54:14 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:54:14 PM Pawn Figure info: (3, 3, 'b', 'p')
12/09/2023 01:54:14 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:54:14 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002DB7F9A61D0> (4, 3)
12/09/2023 01:54:14 PM Pawn (4, 3) is empty appended moves [(4, 3)]
12/09/2023 01:54:14 PM Pawn ReturnPossibleMove(): returning values: ([(4, 3)], [(4, 4), (4, 2)])
12/09/2023 01:54:14 PM RenderPossibleMoves(): moves and attacks after: ([(4, 3)], [(4, 4), (4, 2)])
12/09/2023 01:54:16 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002DB7F9A50D0> moves and attacks before: ([], [])
12/09/2023 01:54:16 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:54:16 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 01:54:16 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:54:16 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002DB7F9A5150> (5, 3)
12/09/2023 01:54:16 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 01:54:16 PM Pawn attempting check on board[x-a][y]: False
12/09/2023 01:54:16 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002DB7F9A61D0> (4, 3)
12/09/2023 01:54:16 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3)], [])
12/09/2023 01:54:16 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3)], [])
12/09/2023 01:56:51 PM Launching Main.py
12/09/2023 01:56:52 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002C86F3F4110> moves and attacks before: ([], [])
12/09/2023 01:56:52 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:56:52 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:56:52 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:56:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002C86F3F4850> (5, 4)
12/09/2023 01:56:52 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:56:52 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:56:52 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002C86F3F5850> (4, 4)
12/09/2023 01:56:52 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:56:52 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:56:52 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:56:53 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002C86F3F5450> moves and attacks before: ([], [])
12/09/2023 01:56:53 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:56:53 PM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 01:56:53 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:56:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002C86F3F6B50> (2, 3)
12/09/2023 01:56:53 PM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 01:56:53 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:56:53 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002C86F3F5550> (3, 3)
12/09/2023 01:56:53 PM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 01:56:53 PM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 01:56:53 PM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 01:56:55 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002C86F3F4110> moves and attacks before: ([], [])
12/09/2023 01:56:55 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:56:55 PM Pawn Figure info: (4, 4, 'w', 'p')
12/09/2023 01:56:55 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:56:55 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002C86F3F5A10> (3, 4)
12/09/2023 01:56:55 PM Pawn (3, 4) is empty appended moves [(3, 4)]
12/09/2023 01:56:55 PM Pawn ReturnPossibleMove(): returning values: ([(3, 4)], [(3, 3)])
12/09/2023 01:56:55 PM RenderPossibleMoves(): moves and attacks after: ([(3, 4)], [(3, 3)])
12/09/2023 01:59:31 PM Launching Main.py
12/09/2023 01:59:32 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000279B53B2490> moves and attacks before: ([], [])
12/09/2023 01:59:32 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:59:32 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 01:59:32 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:59:32 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000279B53B0290> (5, 4)
12/09/2023 01:59:32 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 01:59:32 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:59:32 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000279B53B11D0> (4, 4)
12/09/2023 01:59:32 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 01:59:32 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 01:59:32 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 01:59:33 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000279B5241C10> moves and attacks before: ([], [])
12/09/2023 01:59:33 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:59:33 PM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 01:59:33 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:59:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000279B53B2910> (2, 3)
12/09/2023 01:59:33 PM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 01:59:33 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:59:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000279B53B1450> (3, 3)
12/09/2023 01:59:33 PM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 01:59:33 PM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 01:59:33 PM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 01:59:33 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000279B53B2490> moves and attacks before: ([], [])
12/09/2023 01:59:33 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:59:33 PM Pawn Figure info: (4, 4, 'w', 'p')
12/09/2023 01:59:33 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:59:33 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000279B53B1290> (3, 4)
12/09/2023 01:59:33 PM Pawn (3, 4) is empty appended moves [(3, 4)]
12/09/2023 01:59:33 PM Pawn ReturnPossibleMove(): returning values: ([(3, 4)], [])
12/09/2023 01:59:33 PM RenderPossibleMoves(): moves and attacks after: ([(3, 4)], [])
12/09/2023 01:59:35 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000279B5241C10> moves and attacks before: ([], [])
12/09/2023 01:59:35 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:59:35 PM Pawn Figure info: (2, 3, 'b', 'p')
12/09/2023 01:59:35 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:59:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000279B53B1450> (3, 3)
12/09/2023 01:59:35 PM Pawn (3, 3) is empty appended moves [(3, 3)]
12/09/2023 01:59:35 PM Pawn ReturnPossibleMove(): returning values: ([(3, 3)], [(3, 4)])
12/09/2023 01:59:35 PM RenderPossibleMoves(): moves and attacks after: ([(3, 3)], [(3, 4)])
12/09/2023 01:59:39 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000279B53B27D0> moves and attacks before: ([], [])
12/09/2023 01:59:39 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:59:39 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 01:59:39 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:59:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000279B53B01D0> (5, 3)
12/09/2023 01:59:39 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 01:59:39 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:59:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000279B53B1090> (4, 3)
12/09/2023 01:59:39 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 01:59:39 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 01:59:39 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 01:59:40 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000279B5241C10> moves and attacks before: ([], [])
12/09/2023 01:59:40 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 01:59:40 PM Pawn Figure info: (3, 4, 'b', 'p')
12/09/2023 01:59:40 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 01:59:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000279B53B11D0> (4, 4)
12/09/2023 01:59:40 PM Pawn (4, 4) is empty appended moves [(4, 4)]
12/09/2023 01:59:40 PM Pawn ReturnPossibleMove(): returning values: ([(4, 4)], [(4, 3)])
12/09/2023 01:59:40 PM RenderPossibleMoves(): moves and attacks after: ([(4, 4)], [(4, 3)])
12/09/2023 02:00:26 PM Launching Main.py
12/09/2023 02:00:27 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002A45DE51210> moves and attacks before: ([], [])
12/09/2023 02:00:27 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:00:27 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 02:00:27 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:00:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002A45DE50810> (5, 3)
12/09/2023 02:00:27 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 02:00:27 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:00:27 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002A45DE50450> (4, 3)
12/09/2023 02:00:27 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 02:00:27 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 02:00:27 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 02:00:30 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002A45DE537D0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 02:00:30 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:00:30 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 02:00:30 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:00:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002A45DE50750> (5, 4)
12/09/2023 02:00:30 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 02:00:30 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:00:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002A45DE50590> (4, 4)
12/09/2023 02:00:30 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 02:00:30 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 02:00:30 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 02:00:30 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002A45DE537D0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 02:00:30 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:00:30 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 02:00:30 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:00:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002A45DE50750> (5, 4)
12/09/2023 02:00:30 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 02:00:30 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:00:30 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002A45DE50590> (4, 4)
12/09/2023 02:00:30 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 02:00:30 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 02:00:30 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 02:00:31 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002A45DE537D0> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 02:00:31 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:00:31 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 02:00:31 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:00:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002A45DE50750> (5, 4)
12/09/2023 02:00:31 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 02:00:31 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:00:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002A45DE50590> (4, 4)
12/09/2023 02:00:31 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 02:00:31 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 02:00:31 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 02:00:43 PM Launching Main.py
12/09/2023 02:00:44 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002A6FAD53610> moves and attacks before: ([], [])
12/09/2023 02:00:44 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:00:44 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 02:00:44 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:00:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002A6FAD51790> (5, 2)
12/09/2023 02:00:44 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 02:00:44 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:00:44 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002A6FAD50350> (4, 2)
12/09/2023 02:00:44 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 02:00:44 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 02:00:44 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 02:00:45 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002A6FAD53B90> moves and attacks before: ([], [])
12/09/2023 02:00:45 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:00:45 PM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 02:00:45 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:00:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002A6FAD53290> (2, 3)
12/09/2023 02:00:45 PM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 02:00:45 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:00:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002A6FAD50AD0> (3, 3)
12/09/2023 02:00:45 PM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 02:00:45 PM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 02:00:45 PM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 02:00:47 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002A6FAD53B90> moves and attacks before: ([(2, 3), (3, 3)], [])
12/09/2023 02:00:47 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:00:47 PM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 02:00:47 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:00:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002A6FAD53290> (2, 3)
12/09/2023 02:00:47 PM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 02:00:47 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:00:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002A6FAD50AD0> (3, 3)
12/09/2023 02:00:47 PM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 02:00:47 PM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 02:00:47 PM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 02:01:34 PM Launching Main.py
12/09/2023 02:01:35 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002608A5A2210> moves and attacks before: ([], [])
12/09/2023 02:01:35 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:01:35 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 02:01:35 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:01:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002608A5A2CD0> (5, 4)
12/09/2023 02:01:35 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 02:01:35 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:01:35 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002608A5A3610> (4, 4)
12/09/2023 02:01:35 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 02:01:35 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 02:01:35 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 02:01:36 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000260F2CC2C90> moves and attacks before: ([], [])
12/09/2023 02:01:36 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:01:36 PM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 02:01:36 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:01:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002608A5A2BD0> (2, 3)
12/09/2023 02:01:36 PM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 02:01:36 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:01:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002608A5A1210> (3, 3)
12/09/2023 02:01:36 PM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 02:01:36 PM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 02:01:36 PM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 02:01:36 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002608A5A2210> moves and attacks before: ([], [])
12/09/2023 02:01:36 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:01:36 PM Pawn Figure info: (4, 4, 'w', 'p')
12/09/2023 02:01:36 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:01:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002608A5A1290> (3, 4)
12/09/2023 02:01:36 PM Pawn (3, 4) is empty appended moves [(3, 4)]
12/09/2023 02:01:36 PM Pawn ReturnPossibleMove(): returning values: ([(3, 4)], [(3, 3)])
12/09/2023 02:01:36 PM RenderPossibleMoves(): moves and attacks after: ([(3, 4)], [(3, 3)])
12/09/2023 02:01:45 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002608A440A50> moves and attacks before: ([], [])
12/09/2023 02:01:45 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:01:45 PM Pawn Figure info: (1, 2, 'b', 'p')
12/09/2023 02:01:45 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:01:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002608A5A2110> (2, 2)
12/09/2023 02:01:45 PM Pawn (2, 2) is empty appended moves [(2, 2)]
12/09/2023 02:01:45 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:01:45 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002608A5A0DD0> (3, 2)
12/09/2023 02:01:45 PM Pawn (3, 2) is empty appended moves [(2, 2), (3, 2)]
12/09/2023 02:01:45 PM Pawn ReturnPossibleMove(): returning values: ([(2, 2), (3, 2)], [])
12/09/2023 02:01:45 PM RenderPossibleMoves(): moves and attacks after: ([(2, 2), (3, 2)], [])
12/09/2023 02:01:47 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002608A5A3A50> moves and attacks before: ([], [])
12/09/2023 02:01:47 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:01:47 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 02:01:47 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:01:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002608A5A2890> (5, 3)
12/09/2023 02:01:47 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 02:01:47 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:01:47 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002608A5A3250> (4, 3)
12/09/2023 02:01:47 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 02:01:47 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 02:01:47 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 02:01:53 PM Launching Main.py
12/09/2023 02:01:54 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000194F77E4650> moves and attacks before: ([], [])
12/09/2023 02:01:54 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:01:54 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 02:01:54 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:01:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000194F77E6190> (5, 4)
12/09/2023 02:01:54 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 02:01:54 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:01:54 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000194F77D99D0> (4, 4)
12/09/2023 02:01:54 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 02:01:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 02:01:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 02:01:57 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000194F67D5B10> moves and attacks before: ([], [])
12/09/2023 02:01:57 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:01:57 PM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 02:01:57 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:01:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000194F77D8BD0> (2, 3)
12/09/2023 02:01:57 PM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 02:01:57 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:01:57 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000194F77DA590> (3, 3)
12/09/2023 02:01:57 PM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 02:01:57 PM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 02:01:57 PM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 02:01:59 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x00000194F77E4650> moves and attacks before: ([], [])
12/09/2023 02:01:59 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:01:59 PM Pawn Figure info: (4, 4, 'w', 'p')
12/09/2023 02:01:59 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:01:59 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x00000194F77DA4D0> (3, 4)
12/09/2023 02:01:59 PM Pawn (3, 4) is empty appended moves [(3, 4)]
12/09/2023 02:01:59 PM Pawn ReturnPossibleMove(): returning values: ([(3, 4)], [(3, 3)])
12/09/2023 02:01:59 PM RenderPossibleMoves(): moves and attacks after: ([(3, 4)], [(3, 3)])
12/09/2023 02:02:35 PM Launching Main.py
12/09/2023 02:02:36 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002105FCB27D0> moves and attacks before: ([], [])
12/09/2023 02:02:36 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:02:36 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 02:02:36 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:02:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002105FCB2B10> (5, 4)
12/09/2023 02:02:36 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 02:02:36 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:02:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002105FCB3390> (4, 4)
12/09/2023 02:02:36 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 02:02:36 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 02:02:36 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 02:02:36 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002105FCB3890> moves and attacks before: ([], [])
12/09/2023 02:02:36 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:02:36 PM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 02:02:36 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:02:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002105FCB0D50> (2, 3)
12/09/2023 02:02:36 PM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 02:02:36 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:02:36 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002105FCB2490> (3, 3)
12/09/2023 02:02:36 PM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 02:02:36 PM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 02:02:36 PM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 02:02:37 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002105FCB27D0> moves and attacks before: ([], [])
12/09/2023 02:02:37 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:02:37 PM Pawn Figure info: (4, 4, 'w', 'p')
12/09/2023 02:02:37 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:02:37 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002105FCB11D0> (3, 4)
12/09/2023 02:02:37 PM Pawn (3, 4) is empty appended moves [(3, 4)]
12/09/2023 02:02:37 PM Pawn ReturnPossibleMove(): returning values: ([(3, 4)], [(3, 3)])
12/09/2023 02:02:37 PM RenderPossibleMoves(): moves and attacks after: ([(3, 4)], [(3, 3)])
12/09/2023 02:02:39 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002105FCB1310> moves and attacks before: ([], [])
12/09/2023 02:02:39 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:02:39 PM Pawn Figure info: (1, 2, 'b', 'p')
12/09/2023 02:02:39 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:02:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002105FCB21D0> (2, 2)
12/09/2023 02:02:39 PM Pawn (2, 2) is empty appended moves [(2, 2)]
12/09/2023 02:02:39 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:02:39 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002105FCB2090> (3, 2)
12/09/2023 02:02:39 PM Pawn (3, 2) is empty appended moves [(2, 2), (3, 2)]
12/09/2023 02:02:39 PM Pawn ReturnPossibleMove(): returning values: ([(2, 2), (3, 2)], [])
12/09/2023 02:02:39 PM RenderPossibleMoves(): moves and attacks after: ([(2, 2), (3, 2)], [])
12/09/2023 02:02:40 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002105FCB25D0> moves and attacks before: ([], [])
12/09/2023 02:02:40 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:02:40 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 02:02:40 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:02:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002105FCB2A10> (5, 2)
12/09/2023 02:02:40 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 02:02:40 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:02:40 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002105FCB3190> (4, 2)
12/09/2023 02:02:40 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 02:02:40 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 02:02:40 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 02:02:41 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002105FB41C10> moves and attacks before: ([], [])
12/09/2023 02:02:41 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:02:41 PM Pawn Figure info: (1, 1, 'b', 'p')
12/09/2023 02:02:41 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:02:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002105FCB1F50> (2, 1)
12/09/2023 02:02:41 PM Pawn (2, 1) is empty appended moves [(2, 1)]
12/09/2023 02:02:41 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:02:41 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002105FCB2010> (3, 1)
12/09/2023 02:02:41 PM Pawn (3, 1) is empty appended moves [(2, 1), (3, 1)]
12/09/2023 02:02:41 PM Pawn ReturnPossibleMove(): returning values: ([(2, 1), (3, 1)], [])
12/09/2023 02:02:41 PM RenderPossibleMoves(): moves and attacks after: ([(2, 1), (3, 1)], [])
12/09/2023 02:02:42 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000002105FCB25D0> moves and attacks before: ([], [])
12/09/2023 02:02:42 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:02:42 PM Pawn Figure info: (4, 2, 'w', 'p')
12/09/2023 02:02:42 PM Pawn attempting check on board[x-a][y]: False
12/09/2023 02:02:42 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000002105FCB2090> (3, 2)
12/09/2023 02:02:42 PM Pawn ReturnPossibleMove(): returning values: ([], [(3, 1)])
12/09/2023 02:02:42 PM RenderPossibleMoves(): moves and attacks after: ([], [(3, 1)])
12/09/2023 02:06:20 PM Launching Main.py
12/09/2023 02:06:21 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001E16BAA3990> moves and attacks before: ([], [])
12/09/2023 02:06:21 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:06:21 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 02:06:21 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:06:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001E16BAA2ED0> (5, 3)
12/09/2023 02:06:21 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 02:06:21 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:06:21 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001E16BAA1510> (4, 3)
12/09/2023 02:06:21 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 02:06:21 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 02:06:21 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 02:06:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001E16BAA3790> moves and attacks before: ([], [])
12/09/2023 02:06:22 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:06:22 PM Pawn Figure info: (1, 2, 'b', 'p')
12/09/2023 02:06:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:06:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001E16BAA3750> (2, 2)
12/09/2023 02:06:22 PM Pawn (2, 2) is empty appended moves [(2, 2)]
12/09/2023 02:06:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:06:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001E16BAA0C10> (3, 2)
12/09/2023 02:06:22 PM Pawn (3, 2) is empty appended moves [(2, 2), (3, 2)]
12/09/2023 02:06:22 PM Pawn ReturnPossibleMove(): returning values: ([(2, 2), (3, 2)], [])
12/09/2023 02:06:22 PM RenderPossibleMoves(): moves and attacks after: ([(2, 2), (3, 2)], [])
12/09/2023 02:06:22 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001E16BAA3990> moves and attacks before: ([], [])
12/09/2023 02:06:22 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:06:22 PM Pawn Figure info: (4, 3, 'w', 'p')
12/09/2023 02:06:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:06:22 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001E16BAA0D50> (3, 3)
12/09/2023 02:06:22 PM Pawn (3, 3) is empty appended moves [(3, 3)]
12/09/2023 02:06:22 PM Pawn ReturnPossibleMove(): returning values: ([(3, 3)], [(3, 2)])
12/09/2023 02:06:22 PM RenderPossibleMoves(): moves and attacks after: ([(3, 3)], [(3, 2)])
12/09/2023 02:06:24 PM RenderPossibleMoves(): choosen figure: <classes.piece.Queen object at 0x000001E16B8DEA50> moves and attacks before: ([], [])
12/09/2023 02:06:24 PM RenderPossibleMoves(): moves and attacks after: ([(1, 2), (2, 1), (3, 0)], [])
12/09/2023 02:06:25 PM RenderPossibleMoves(): choosen figure: <classes.piece.Queen object at 0x000001E16BAA0F90> moves and attacks before: ([], [])
12/09/2023 02:06:25 PM RenderPossibleMoves(): moves and attacks after: ([(6, 3), (5, 3), (4, 3), (3, 3), (2, 3)], [(1, 3)])
12/09/2023 02:06:28 PM RenderPossibleMoves(): choosen figure: <classes.piece.Queen object at 0x000001E16B8DEA50> moves and attacks before: ([], [])
12/09/2023 02:06:28 PM RenderPossibleMoves(): moves and attacks after: ([(2, 0), (4, 0), (5, 0), (3, 1), (4, 1), (5, 2), (6, 3), (2, 1), (1, 2), (0, 3)], [(6, 0), (3, 2), (7, 4)])
12/09/2023 02:06:31 PM RenderPossibleMoves(): choosen figure: <classes.piece.Pawn object at 0x000001E16BAA38D0> moves and attacks before: ([], [])
12/09/2023 02:06:31 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:06:31 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 02:06:31 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:06:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001E16BAA2910> (5, 4)
12/09/2023 02:06:31 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 02:06:31 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:06:31 PM Pawn attempting check on board[x-a][y]: <classes.field.field object at 0x000001E16BAA1650> (4, 4)
12/09/2023 02:06:31 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 02:06:31 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 02:06:31 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 02:20:46 PM Launching Main.py
12/09/2023 02:20:47 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000026A2E4A4490> moves and attacks before: ([], [])
12/09/2023 02:20:47 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:20:47 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 02:20:47 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:20:47 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000026A2E4A6B50> (5, 5)
12/09/2023 02:20:47 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 02:20:47 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:20:47 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000026A2E4A6BD0> (4, 5)
12/09/2023 02:20:47 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 02:20:47 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 02:20:47 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 02:20:48 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000026A2E329F10> moves and attacks before: ([], [])
12/09/2023 02:20:48 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:20:48 PM Pawn Figure info: (1, 4, 'b', 'p')
12/09/2023 02:20:48 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:20:48 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000026A14993FD0> (2, 4)
12/09/2023 02:20:48 PM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 02:20:48 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:20:48 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000026A2E4A7210> (3, 4)
12/09/2023 02:20:48 PM Pawn (3, 4) is empty appended moves [(2, 4), (3, 4)]
12/09/2023 02:20:48 PM Pawn ReturnPossibleMove(): returning values: ([(2, 4), (3, 4)], [])
12/09/2023 02:20:48 PM RenderPossibleMoves(): moves and attacks after: ([(2, 4), (3, 4)], [])
12/09/2023 02:20:48 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000026A2E4A4490> moves and attacks before: ([], [])
12/09/2023 02:20:48 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:20:48 PM Pawn Figure info: (4, 5, 'w', 'p')
12/09/2023 02:20:48 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:20:48 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000026A2E4A49D0> (3, 5)
12/09/2023 02:20:48 PM Pawn (3, 5) is empty appended moves [(3, 5)]
12/09/2023 02:20:48 PM Pawn ReturnPossibleMove(): returning values: ([(3, 5)], [(3, 4)])
12/09/2023 02:20:48 PM RenderPossibleMoves(): moves and attacks after: ([(3, 5)], [(3, 4)])
12/09/2023 02:20:50 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000026A2E357F10> moves and attacks before: ([], [])
12/09/2023 02:20:50 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:20:50 PM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 02:20:50 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:20:50 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000026A14993B50> (2, 3)
12/09/2023 02:20:50 PM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 02:20:50 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:20:50 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000026A2E4A5B10> (3, 3)
12/09/2023 02:20:50 PM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 02:20:50 PM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 02:20:50 PM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 02:20:51 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000026A2E4A4490> moves and attacks before: ([], [])
12/09/2023 02:20:51 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:20:51 PM Pawn Figure info: (3, 4, 'w', 'p')
12/09/2023 02:20:51 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:20:51 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000026A14993FD0> (2, 4)
12/09/2023 02:20:51 PM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 02:20:51 PM Pawn ReturnPossibleMove(): returning values: ([(2, 4)], [(2, 3)])
12/09/2023 02:20:51 PM RenderPossibleMoves(): moves and attacks after: ([(2, 4)], [(2, 3)])
12/09/2023 02:21:43 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000026A2E329D90> moves and attacks before: ([], [])
12/09/2023 02:21:43 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:21:43 PM Pawn Figure info: (1, 2, 'b', 'p')
12/09/2023 02:21:43 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:21:43 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000026A2E340250> (2, 2)
12/09/2023 02:21:43 PM Pawn (2, 2) is empty appended moves [(2, 2)]
12/09/2023 02:21:43 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:21:43 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000026A2E4A5690> (3, 2)
12/09/2023 02:21:43 PM Pawn (3, 2) is empty appended moves [(2, 2), (3, 2)]
12/09/2023 02:21:43 PM Pawn ReturnPossibleMove(): returning values: ([(2, 2), (3, 2)], [(2, 3)])
12/09/2023 02:21:43 PM RenderPossibleMoves(): moves and attacks after: ([(2, 2), (3, 2)], [(2, 3)])
12/09/2023 02:21:44 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000026A2E4A62D0> moves and attacks before: ([], [])
12/09/2023 02:21:44 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:21:44 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 02:21:44 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:21:44 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000026A2E4A5390> (5, 3)
12/09/2023 02:21:44 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 02:21:44 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:21:44 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000026A2E4A6C10> (4, 3)
12/09/2023 02:21:44 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 02:21:44 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 02:21:44 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 02:21:45 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000026A2E329D90> moves and attacks before: ([], [])
12/09/2023 02:21:45 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:21:45 PM Pawn Figure info: (2, 3, 'b', 'p')
12/09/2023 02:21:45 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:21:45 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000026A2E4A5B10> (3, 3)
12/09/2023 02:21:45 PM Pawn (3, 3) is empty appended moves [(3, 3)]
12/09/2023 02:21:45 PM Pawn ReturnPossibleMove(): returning values: ([(3, 3)], [])
12/09/2023 02:21:45 PM RenderPossibleMoves(): moves and attacks after: ([(3, 3)], [])
12/09/2023 02:21:46 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000026A2E4A4550> moves and attacks before: ([], [])
12/09/2023 02:21:46 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:21:46 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 02:21:46 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:21:46 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000026A2E4A54D0> (5, 4)
12/09/2023 02:21:46 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 02:21:46 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:21:46 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000026A2E4A4610> (4, 4)
12/09/2023 02:21:46 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 02:21:46 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 02:21:46 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 02:21:46 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000026A2E329D90> moves and attacks before: ([], [])
12/09/2023 02:21:46 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:21:46 PM Pawn Figure info: (3, 3, 'b', 'p')
12/09/2023 02:21:46 PM Pawn attempting check on board[x-a][y]: False
12/09/2023 02:21:46 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000026A2E4A6C10> (4, 3)
12/09/2023 02:21:46 PM Pawn ReturnPossibleMove(): returning values: ([], [(4, 4)])
12/09/2023 02:21:46 PM RenderPossibleMoves(): moves and attacks after: ([], [(4, 4)])
12/09/2023 02:21:47 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.King object at 0x0000026A2E4A5890> moves and attacks before: ([], [])
12/09/2023 02:22:20 PM Launching Main.py
12/09/2023 02:22:21 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000013AC2364490> moves and attacks before: ([], [])
12/09/2023 02:22:21 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:22:21 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 02:22:21 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:22:21 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000013AC2366B50> (5, 5)
12/09/2023 02:22:21 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 02:22:21 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:22:21 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000013AC2366BD0> (4, 5)
12/09/2023 02:22:21 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 02:22:21 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 02:22:21 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 02:22:22 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Queen object at 0x0000013AC21E9E90> moves and attacks before: ([], [])
12/09/2023 02:22:22 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 02:22:23 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Queen object at 0x0000013AC21E9E90> moves and attacks before: ([], [])
12/09/2023 02:22:23 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 02:22:23 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Queen object at 0x0000013AC21E9E90> moves and attacks before: ([], [])
12/09/2023 02:22:23 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 02:22:23 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Queen object at 0x0000013AC21E9E90> moves and attacks before: ([], [])
12/09/2023 02:22:23 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 02:22:24 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000013AC21E9F10> moves and attacks before: ([], [])
12/09/2023 02:22:24 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:22:24 PM Pawn Figure info: (1, 4, 'b', 'p')
12/09/2023 02:22:24 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:22:24 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000013AA8843FD0> (2, 4)
12/09/2023 02:22:24 PM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 02:22:24 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:22:24 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000013AC2365E50> (3, 4)
12/09/2023 02:22:24 PM Pawn (3, 4) is empty appended moves [(2, 4), (3, 4)]
12/09/2023 02:22:24 PM Pawn ReturnPossibleMove(): returning values: ([(2, 4), (3, 4)], [])
12/09/2023 02:22:24 PM RenderPossibleMoves(): moves and attacks after: ([(2, 4), (3, 4)], [])
12/09/2023 02:22:25 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000013AC2364490> moves and attacks before: ([], [])
12/09/2023 02:22:25 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:22:25 PM Pawn Figure info: (4, 5, 'w', 'p')
12/09/2023 02:22:25 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:22:25 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000013AC2364A50> (3, 5)
12/09/2023 02:22:25 PM Pawn (3, 5) is empty appended moves [(3, 5)]
12/09/2023 02:22:25 PM Pawn ReturnPossibleMove(): returning values: ([(3, 5)], [(3, 4)])
12/09/2023 02:22:25 PM RenderPossibleMoves(): moves and attacks after: ([(3, 5)], [(3, 4)])
12/09/2023 02:22:25 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Queen object at 0x0000013AC21E9E90> moves and attacks before: ([], [])
12/09/2023 02:22:25 PM RenderPossibleMoves(): moves and attacks after: ([(1, 4), (2, 5), (3, 6), (4, 7)], [])
12/09/2023 02:22:26 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.King object at 0x0000013AC21D9E50> moves and attacks before: ([(1, 4), (2, 5), (3, 6), (4, 7)], [])
12/09/2023 02:22:26 PM RenderPossibleMoves(): moves and attacks after: ([(1, 4)], [])
12/09/2023 02:22:28 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000013AC2364490> moves and attacks before: ([], [])
12/09/2023 02:22:28 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:22:28 PM Pawn Figure info: (3, 4, 'w', 'p')
12/09/2023 02:22:28 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:22:28 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000013AA8843FD0> (2, 4)
12/09/2023 02:22:28 PM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 02:22:28 PM Pawn ReturnPossibleMove(): returning values: ([(2, 4)], [])
12/09/2023 02:22:28 PM RenderPossibleMoves(): moves and attacks after: ([(2, 4)], [])
12/09/2023 02:22:28 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.King object at 0x0000013AC21D9E50> moves and attacks before: ([], [])
12/09/2023 02:22:28 PM RenderPossibleMoves(): moves and attacks after: ([(0, 4), (2, 3), (2, 5)], [(2, 4)])
12/09/2023 02:22:29 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000013AC2364490> moves and attacks before: ([], [])
12/09/2023 02:22:29 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:22:29 PM Pawn Figure info: (2, 4, 'w', 'p')
12/09/2023 02:22:29 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:22:29 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000013AC21EAFD0> (1, 4)
12/09/2023 02:22:29 PM Pawn (1, 4) is empty appended moves [(1, 4)]
12/09/2023 02:22:29 PM Pawn ReturnPossibleMove(): returning values: ([(1, 4)], [(1, 5), (1, 3)])
12/09/2023 02:22:29 PM RenderPossibleMoves(): moves and attacks after: ([(1, 4)], [(1, 5), (1, 3)])
12/09/2023 02:22:30 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.King object at 0x0000013AC21D9E50> moves and attacks before: ([], [])
12/09/2023 02:22:30 PM RenderPossibleMoves(): moves and attacks after: ([(2, 2), (2, 4), (3, 2), (3, 3), (3, 4)], [(1, 4)])
12/09/2023 02:22:33 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000013AC2364550> moves and attacks before: ([], [])
12/09/2023 02:22:33 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:22:33 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 02:22:33 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:22:33 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000013AC23654D0> (5, 4)
12/09/2023 02:22:33 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 02:22:33 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:22:33 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000013AC2366290> (4, 4)
12/09/2023 02:22:33 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 02:22:33 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 02:22:33 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 02:22:34 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.King object at 0x0000013AC21D9E50> moves and attacks before: ([], [])
12/09/2023 02:22:34 PM RenderPossibleMoves(): moves and attacks after: ([(0, 4), (2, 3), (2, 4), (2, 5)], [])
12/09/2023 02:22:34 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000013AC2364550> moves and attacks before: ([], [])
12/09/2023 02:22:34 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:22:34 PM Pawn Figure info: (4, 4, 'w', 'p')
12/09/2023 02:22:34 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:22:34 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000013AC2365E50> (3, 4)
12/09/2023 02:22:34 PM Pawn (3, 4) is empty appended moves [(3, 4)]
12/09/2023 02:22:34 PM Pawn ReturnPossibleMove(): returning values: ([(3, 4)], [])
12/09/2023 02:22:34 PM RenderPossibleMoves(): moves and attacks after: ([(3, 4)], [])
12/09/2023 02:22:35 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000013AC2364550> moves and attacks before: ([(3, 4)], [])
12/09/2023 02:22:35 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:22:35 PM Pawn Figure info: (4, 4, 'w', 'p')
12/09/2023 02:22:35 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:22:35 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000013AC2365E50> (3, 4)
12/09/2023 02:22:35 PM Pawn (3, 4) is empty appended moves [(3, 4)]
12/09/2023 02:22:35 PM Pawn ReturnPossibleMove(): returning values: ([(3, 4)], [])
12/09/2023 02:22:35 PM RenderPossibleMoves(): moves and attacks after: ([(3, 4)], [])
12/09/2023 02:22:36 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.King object at 0x0000013AC21D9E50> moves and attacks before: ([], [])
12/09/2023 02:22:36 PM RenderPossibleMoves(): moves and attacks after: ([(1, 4), (2, 2), (2, 4), (3, 2), (3, 3)], [(3, 4)])
12/09/2023 02:22:36 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000013AC2364550> moves and attacks before: ([], [])
12/09/2023 02:22:36 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:22:36 PM Pawn Figure info: (3, 4, 'w', 'p')
12/09/2023 02:22:36 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:22:36 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000013AA8843FD0> (2, 4)
12/09/2023 02:22:36 PM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 02:22:36 PM Pawn ReturnPossibleMove(): returning values: ([(2, 4)], [])
12/09/2023 02:22:36 PM RenderPossibleMoves(): moves and attacks after: ([(2, 4)], [])
12/09/2023 02:22:37 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.King object at 0x0000013AC21D9E50> moves and attacks before: ([], [])
12/09/2023 02:22:37 PM RenderPossibleMoves(): moves and attacks after: ([(2, 2), (2, 3), (3, 2), (3, 4), (4, 2), (4, 3), (4, 4)], [(2, 4)])
12/09/2023 02:22:37 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000013AC2364550> moves and attacks before: ([], [])
12/09/2023 02:22:37 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:22:37 PM Pawn Figure info: (2, 4, 'w', 'p')
12/09/2023 02:22:37 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:22:37 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000013AC21EAFD0> (1, 4)
12/09/2023 02:22:37 PM Pawn (1, 4) is empty appended moves [(1, 4)]
12/09/2023 02:22:37 PM Pawn ReturnPossibleMove(): returning values: ([(1, 4)], [(1, 5), (1, 3)])
12/09/2023 02:22:37 PM RenderPossibleMoves(): moves and attacks after: ([(1, 4)], [(1, 5), (1, 3)])
12/09/2023 02:22:38 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.King object at 0x0000013AC21D9E50> moves and attacks before: ([], [])
12/09/2023 02:22:38 PM RenderPossibleMoves(): moves and attacks after: ([(2, 2), (2, 4), (3, 2), (3, 3), (3, 4)], [(1, 4)])
12/09/2023 02:22:38 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000013AC2364550> moves and attacks before: ([], [])
12/09/2023 02:22:38 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:22:38 PM Pawn Figure info: (1, 4, 'w', 'p')
12/09/2023 02:22:38 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:22:38 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000013AC22176D0> (0, 4)
12/09/2023 02:22:38 PM Pawn (0, 4) is empty appended moves [(0, 4)]
12/09/2023 02:22:38 PM Pawn ReturnPossibleMove(): returning values: ([(0, 4)], [(0, 5), (0, 3)])
12/09/2023 02:22:38 PM RenderPossibleMoves(): moves and attacks after: ([(0, 4)], [(0, 5), (0, 3)])
12/09/2023 02:24:14 PM Launching Main.py
12/09/2023 02:24:43 PM Launching Main.py
12/09/2023 02:27:29 PM Launching Main.py
12/09/2023 02:27:51 PM Launching Main.py
12/09/2023 02:28:16 PM Launching Main.py
12/09/2023 02:28:24 PM Launching Main.py
12/09/2023 02:29:20 PM Launching Main.py
12/09/2023 02:29:31 PM Launching Main.py
12/09/2023 02:33:08 PM Launching Main.py
12/09/2023 02:43:04 PM Launching Main.py
12/09/2023 02:43:21 PM Launching Main.py
12/09/2023 02:44:31 PM Launching Main.py
12/09/2023 02:45:25 PM Launching Main.py
12/09/2023 02:46:03 PM Launching Main.py
12/09/2023 02:47:30 PM Launching Main.py
12/09/2023 02:49:09 PM Launching Main.py
12/09/2023 02:49:31 PM Launching Main.py
12/09/2023 02:50:02 PM Launching Main.py
12/09/2023 02:51:08 PM Launching Main.py
12/09/2023 02:52:10 PM Launching Main.py
12/09/2023 02:53:03 PM Launching Main.py
12/09/2023 02:53:11 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Knight object at 0x000001AB2AA82ED0> moves and attacks before: ([], [])
12/09/2023 02:53:11 PM RenderPossibleMoves(): moves and attacks after: ([(5, 7), (5, 5)], [])
12/09/2023 02:53:12 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Bishop object at 0x000001AB2AA82E90> moves and attacks before: ([(5, 7), (5, 5)], [])
12/09/2023 02:53:12 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 02:53:13 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Bishop object at 0x000001AB2AA82DD0> moves and attacks before: ([], [])
12/09/2023 02:53:13 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 02:53:13 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Bishop object at 0x000001AB2AA82DD0> moves and attacks before: ([], [])
12/09/2023 02:53:13 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 02:53:13 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x000001AB2AA82C10> moves and attacks before: ([], [])
12/09/2023 02:53:13 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:53:13 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 02:53:13 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:13 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28334250> (5, 3)
12/09/2023 02:53:13 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 02:53:13 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:13 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28327D50> (4, 3)
12/09/2023 02:53:13 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 02:53:13 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 02:53:13 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 02:53:14 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x000001AB2AA82C10> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 02:53:14 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:53:14 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 02:53:14 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:14 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28334250> (5, 3)
12/09/2023 02:53:14 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 02:53:14 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:14 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28327D50> (4, 3)
12/09/2023 02:53:14 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 02:53:14 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 02:53:14 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 02:53:14 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x000001AB2AA82BD0> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 02:53:14 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:53:14 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 02:53:14 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:14 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB283341D0> (5, 2)
12/09/2023 02:53:14 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 02:53:14 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:14 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28327CD0> (4, 2)
12/09/2023 02:53:14 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 02:53:14 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 02:53:14 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 02:53:14 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x000001AB2AA82B90> moves and attacks before: ([(5, 2), (4, 2)], [])
12/09/2023 02:53:14 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:53:14 PM Pawn Figure info: (6, 1, 'w', 'p')
12/09/2023 02:53:14 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:14 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28334150> (5, 1)
12/09/2023 02:53:14 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/09/2023 02:53:14 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:14 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28327C50> (4, 1)
12/09/2023 02:53:14 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/09/2023 02:53:14 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/09/2023 02:53:14 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/09/2023 02:53:14 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Knight object at 0x000001AB2AA82D90> moves and attacks before: ([(5, 1), (4, 1)], [])
12/09/2023 02:53:14 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (5, 0)], [])
12/09/2023 02:53:14 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Rock object at 0x000001AB2AA82D50> moves and attacks before: ([(5, 2), (5, 0)], [])
12/09/2023 02:53:14 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 02:53:15 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x000001AB2AA82B50> moves and attacks before: ([], [])
12/09/2023 02:53:15 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:53:15 PM Pawn Figure info: (6, 0, 'w', 'p')
12/09/2023 02:53:15 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:15 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB283340D0> (5, 0)
12/09/2023 02:53:15 PM Pawn (5, 0) is empty appended moves [(5, 0)]
12/09/2023 02:53:15 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:15 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28327BD0> (4, 0)
12/09/2023 02:53:15 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
12/09/2023 02:53:15 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
12/09/2023 02:53:15 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
12/09/2023 02:53:15 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.King object at 0x000001AB2AA82E50> moves and attacks before: ([(5, 0), (4, 0)], [])
12/09/2023 02:53:15 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 02:53:16 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x000001AB2AA82C50> moves and attacks before: ([], [])
12/09/2023 02:53:16 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:53:16 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 02:53:16 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:16 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB283342D0> (5, 4)
12/09/2023 02:53:16 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 02:53:16 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:16 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28327DD0> (4, 4)
12/09/2023 02:53:16 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 02:53:16 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 02:53:16 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 02:53:16 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Queen object at 0x000001AB2AA82E10> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 02:53:16 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 02:53:16 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x000001AB2AA82C90> moves and attacks before: ([], [])
12/09/2023 02:53:16 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:53:16 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 02:53:16 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:16 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28334390> (5, 5)
12/09/2023 02:53:16 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 02:53:16 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:16 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28327E90> (4, 5)
12/09/2023 02:53:16 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 02:53:16 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 02:53:16 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 02:53:16 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x000001AB2AA82CD0> moves and attacks before: ([(5, 5), (4, 5)], [])
12/09/2023 02:53:16 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:53:16 PM Pawn Figure info: (6, 6, 'w', 'p')
12/09/2023 02:53:16 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:16 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28334410> (5, 6)
12/09/2023 02:53:16 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/09/2023 02:53:16 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:16 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28327F10> (4, 6)
12/09/2023 02:53:16 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/09/2023 02:53:16 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/09/2023 02:53:16 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/09/2023 02:53:17 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x000001AB2AA82D10> moves and attacks before: ([(5, 6), (4, 6)], [])
12/09/2023 02:53:17 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:53:17 PM Pawn Figure info: (6, 7, 'w', 'p')
12/09/2023 02:53:17 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:17 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28334490> (5, 7)
12/09/2023 02:53:17 PM Pawn (5, 7) is empty appended moves [(5, 7)]
12/09/2023 02:53:17 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:17 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28327F90> (4, 7)
12/09/2023 02:53:17 PM Pawn (4, 7) is empty appended moves [(5, 7), (4, 7)]
12/09/2023 02:53:17 PM Pawn ReturnPossibleMove(): returning values: ([(5, 7), (4, 7)], [])
12/09/2023 02:53:17 PM RenderPossibleMoves(): moves and attacks after: ([(5, 7), (4, 7)], [])
12/09/2023 02:53:17 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Rock object at 0x000001AB2AA82F10> moves and attacks before: ([(5, 7), (4, 7)], [])
12/09/2023 02:53:17 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 02:53:19 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x000001AB2AA82C90> moves and attacks before: ([], [])
12/09/2023 02:53:19 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:53:19 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 02:53:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:19 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28334390> (5, 5)
12/09/2023 02:53:19 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 02:53:19 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:19 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28327E90> (4, 5)
12/09/2023 02:53:19 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 02:53:19 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 02:53:19 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 02:53:20 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Rock object at 0x000001AB2AA829D0> moves and attacks before: ([], [])
12/09/2023 02:53:20 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 02:53:20 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x000001AB2AA82B10> moves and attacks before: ([], [])
12/09/2023 02:53:20 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:53:20 PM Pawn Figure info: (1, 7, 'b', 'p')
12/09/2023 02:53:20 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:20 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28327690> (2, 7)
12/09/2023 02:53:20 PM Pawn (2, 7) is empty appended moves [(2, 7)]
12/09/2023 02:53:20 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:20 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28327B10> (3, 7)
12/09/2023 02:53:20 PM Pawn (3, 7) is empty appended moves [(2, 7), (3, 7)]
12/09/2023 02:53:20 PM Pawn ReturnPossibleMove(): returning values: ([(2, 7), (3, 7)], [])
12/09/2023 02:53:20 PM RenderPossibleMoves(): moves and attacks after: ([(2, 7), (3, 7)], [])
12/09/2023 02:53:20 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x000001AB2AA82AD0> moves and attacks before: ([(2, 7), (3, 7)], [])
12/09/2023 02:53:20 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:53:20 PM Pawn Figure info: (1, 6, 'b', 'p')
12/09/2023 02:53:20 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:20 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28327610> (2, 6)
12/09/2023 02:53:20 PM Pawn (2, 6) is empty appended moves [(2, 6)]
12/09/2023 02:53:20 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:20 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28327A90> (3, 6)
12/09/2023 02:53:20 PM Pawn (3, 6) is empty appended moves [(2, 6), (3, 6)]
12/09/2023 02:53:20 PM Pawn ReturnPossibleMove(): returning values: ([(2, 6), (3, 6)], [])
12/09/2023 02:53:20 PM RenderPossibleMoves(): moves and attacks after: ([(2, 6), (3, 6)], [])
12/09/2023 02:53:20 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x000001AB2AA82AD0> moves and attacks before: ([(2, 6), (3, 6)], [])
12/09/2023 02:53:20 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:53:20 PM Pawn Figure info: (1, 6, 'b', 'p')
12/09/2023 02:53:20 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:20 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28327610> (2, 6)
12/09/2023 02:53:20 PM Pawn (2, 6) is empty appended moves [(2, 6)]
12/09/2023 02:53:20 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:20 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28327A90> (3, 6)
12/09/2023 02:53:20 PM Pawn (3, 6) is empty appended moves [(2, 6), (3, 6)]
12/09/2023 02:53:20 PM Pawn ReturnPossibleMove(): returning values: ([(2, 6), (3, 6)], [])
12/09/2023 02:53:20 PM RenderPossibleMoves(): moves and attacks after: ([(2, 6), (3, 6)], [])
12/09/2023 02:53:20 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Knight object at 0x000001AB2AA828D0> moves and attacks before: ([(2, 6), (3, 6)], [])
12/09/2023 02:53:20 PM RenderPossibleMoves(): moves and attacks after: ([(2, 5), (2, 7)], [])
12/09/2023 02:53:21 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.King object at 0x000001AB27F36510> moves and attacks before: ([(2, 5), (2, 7)], [])
12/09/2023 02:53:21 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 02:53:21 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.King object at 0x000001AB27F36510> moves and attacks before: ([], [])
12/09/2023 02:53:21 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 02:53:21 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Knight object at 0x000001AB2AA82990> moves and attacks before: ([], [])
12/09/2023 02:53:21 PM RenderPossibleMoves(): moves and attacks after: ([(2, 0), (2, 2)], [])
12/09/2023 02:53:21 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Rock object at 0x000001AB27F37150> moves and attacks before: ([(2, 0), (2, 2)], [])
12/09/2023 02:53:21 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 02:53:21 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Knight object at 0x000001AB2AA82990> moves and attacks before: ([], [])
12/09/2023 02:53:21 PM RenderPossibleMoves(): moves and attacks after: ([(2, 0), (2, 2)], [])
12/09/2023 02:53:21 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x000001AB0E37BA50> moves and attacks before: ([(2, 0), (2, 2)], [])
12/09/2023 02:53:21 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:53:21 PM Pawn Figure info: (1, 1, 'b', 'p')
12/09/2023 02:53:21 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:21 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28327350> (2, 1)
12/09/2023 02:53:21 PM Pawn (2, 1) is empty appended moves [(2, 1)]
12/09/2023 02:53:21 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:21 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB283277D0> (3, 1)
12/09/2023 02:53:21 PM Pawn (3, 1) is empty appended moves [(2, 1), (3, 1)]
12/09/2023 02:53:21 PM Pawn ReturnPossibleMove(): returning values: ([(2, 1), (3, 1)], [])
12/09/2023 02:53:21 PM RenderPossibleMoves(): moves and attacks after: ([(2, 1), (3, 1)], [])
12/09/2023 02:53:21 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x000001AB27F65250> moves and attacks before: ([(2, 1), (3, 1)], [])
12/09/2023 02:53:21 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:53:21 PM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 02:53:21 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:21 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28327450> (2, 3)
12/09/2023 02:53:21 PM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 02:53:21 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:21 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB283278D0> (3, 3)
12/09/2023 02:53:21 PM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 02:53:21 PM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 02:53:21 PM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 02:53:22 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x000001AB2AA800D0> moves and attacks before: ([(2, 3), (3, 3)], [])
12/09/2023 02:53:22 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:53:22 PM Pawn Figure info: (1, 4, 'b', 'p')
12/09/2023 02:53:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:22 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB283274D0> (2, 4)
12/09/2023 02:53:22 PM Pawn (2, 4) is empty appended moves [(2, 4)]
12/09/2023 02:53:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:22 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28327950> (3, 4)
12/09/2023 02:53:22 PM Pawn (3, 4) is empty appended moves [(2, 4), (3, 4)]
12/09/2023 02:53:22 PM Pawn ReturnPossibleMove(): returning values: ([(2, 4), (3, 4)], [])
12/09/2023 02:53:22 PM RenderPossibleMoves(): moves and attacks after: ([(2, 4), (3, 4)], [])
12/09/2023 02:53:22 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x000001AB27F65250> moves and attacks before: ([(2, 4), (3, 4)], [])
12/09/2023 02:53:22 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:53:22 PM Pawn Figure info: (1, 3, 'b', 'p')
12/09/2023 02:53:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:22 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28327450> (2, 3)
12/09/2023 02:53:22 PM Pawn (2, 3) is empty appended moves [(2, 3)]
12/09/2023 02:53:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:22 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB283278D0> (3, 3)
12/09/2023 02:53:22 PM Pawn (3, 3) is empty appended moves [(2, 3), (3, 3)]
12/09/2023 02:53:22 PM Pawn ReturnPossibleMove(): returning values: ([(2, 3), (3, 3)], [])
12/09/2023 02:53:22 PM RenderPossibleMoves(): moves and attacks after: ([(2, 3), (3, 3)], [])
12/09/2023 02:53:22 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x000001AB2834E190> moves and attacks before: ([(2, 3), (3, 3)], [])
12/09/2023 02:53:22 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 02:53:22 PM Pawn Figure info: (1, 2, 'b', 'p')
12/09/2023 02:53:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:22 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB283273D0> (2, 2)
12/09/2023 02:53:22 PM Pawn (2, 2) is empty appended moves [(2, 2)]
12/09/2023 02:53:22 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 02:53:22 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x000001AB28327850> (3, 2)
12/09/2023 02:53:22 PM Pawn (3, 2) is empty appended moves [(2, 2), (3, 2)]
12/09/2023 02:53:22 PM Pawn ReturnPossibleMove(): returning values: ([(2, 2), (3, 2)], [])
12/09/2023 02:53:22 PM RenderPossibleMoves(): moves and attacks after: ([(2, 2), (3, 2)], [])
12/09/2023 02:53:22 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Bishop object at 0x000001AB27F4FD10> moves and attacks before: ([(2, 2), (3, 2)], [])
12/09/2023 02:53:22 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 02:53:22 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Queen object at 0x000001AB27F64A50> moves and attacks before: ([], [])
12/09/2023 02:53:22 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 02:54:08 PM Launching Main.py
12/09/2023 04:09:45 PM Launching Main.py
12/09/2023 04:10:49 PM Launching Main.py
12/09/2023 04:10:52 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x00000217CFE42BD0> moves and attacks before: ([], [])
12/09/2023 04:10:52 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 04:10:52 PM Pawn Figure info: (6, 2, 'w', 'p')
12/09/2023 04:10:52 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 04:10:52 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x00000217CD6F5110> (5, 2)
12/09/2023 04:10:52 PM Pawn (5, 2) is empty appended moves [(5, 2)]
12/09/2023 04:10:52 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 04:10:52 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x00000217CD6F4C50> (4, 2)
12/09/2023 04:10:52 PM Pawn (4, 2) is empty appended moves [(5, 2), (4, 2)]
12/09/2023 04:10:52 PM Pawn ReturnPossibleMove(): returning values: ([(5, 2), (4, 2)], [])
12/09/2023 04:10:52 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (4, 2)], [])
12/09/2023 04:10:53 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x00000217CFE42C10> moves and attacks before: ([(5, 2), (4, 2)], [])
12/09/2023 04:10:53 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 04:10:53 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 04:10:53 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 04:10:53 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x00000217CD6F5190> (5, 3)
12/09/2023 04:10:53 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 04:10:53 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 04:10:53 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x00000217CD6F4CD0> (4, 3)
12/09/2023 04:10:53 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 04:10:53 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 04:10:53 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 04:10:53 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Queen object at 0x00000217CFE42E10> moves and attacks before: ([(5, 3), (4, 3)], [])
12/09/2023 04:10:53 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 04:10:53 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Bishop object at 0x00000217CFE42DD0> moves and attacks before: ([], [])
12/09/2023 04:10:53 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 04:10:53 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Knight object at 0x00000217CFE42D90> moves and attacks before: ([], [])
12/09/2023 04:10:53 PM RenderPossibleMoves(): moves and attacks after: ([(5, 2), (5, 0)], [])
12/09/2023 04:10:54 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x00000217CFE42B90> moves and attacks before: ([(5, 2), (5, 0)], [])
12/09/2023 04:10:54 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 04:10:54 PM Pawn Figure info: (6, 1, 'w', 'p')
12/09/2023 04:10:54 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 04:10:54 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x00000217CD6F5090> (5, 1)
12/09/2023 04:10:54 PM Pawn (5, 1) is empty appended moves [(5, 1)]
12/09/2023 04:10:54 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 04:10:54 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x00000217CD6F4BD0> (4, 1)
12/09/2023 04:10:54 PM Pawn (4, 1) is empty appended moves [(5, 1), (4, 1)]
12/09/2023 04:10:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 1), (4, 1)], [])
12/09/2023 04:10:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 1), (4, 1)], [])
12/09/2023 04:10:54 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x00000217CFE42B50> moves and attacks before: ([(5, 1), (4, 1)], [])
12/09/2023 04:10:54 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 04:10:54 PM Pawn Figure info: (6, 0, 'w', 'p')
12/09/2023 04:10:54 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 04:10:54 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x00000217CD6F5010> (5, 0)
12/09/2023 04:10:54 PM Pawn (5, 0) is empty appended moves [(5, 0)]
12/09/2023 04:10:54 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 04:10:54 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x00000217CD6F4B50> (4, 0)
12/09/2023 04:10:54 PM Pawn (4, 0) is empty appended moves [(5, 0), (4, 0)]
12/09/2023 04:10:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 0), (4, 0)], [])
12/09/2023 04:10:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 0), (4, 0)], [])
12/09/2023 04:10:54 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Rock object at 0x00000217CFE42D50> moves and attacks before: ([(5, 0), (4, 0)], [])
12/09/2023 04:10:54 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 04:10:54 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Bishop object at 0x00000217CFE42E90> moves and attacks before: ([], [])
12/09/2023 04:10:54 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 04:10:54 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x00000217CFE42C50> moves and attacks before: ([], [])
12/09/2023 04:10:54 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 04:10:54 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 04:10:54 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 04:10:54 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x00000217CD6F5210> (5, 4)
12/09/2023 04:10:54 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 04:10:54 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 04:10:54 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x00000217CD6F4D50> (4, 4)
12/09/2023 04:10:54 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 04:10:54 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 04:10:54 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 04:10:55 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x00000217CFE42C90> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 04:10:55 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 04:10:55 PM Pawn Figure info: (6, 5, 'w', 'p')
12/09/2023 04:10:55 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 04:10:55 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x00000217CD6F52D0> (5, 5)
12/09/2023 04:10:55 PM Pawn (5, 5) is empty appended moves [(5, 5)]
12/09/2023 04:10:55 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 04:10:55 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x00000217CD6F4E10> (4, 5)
12/09/2023 04:10:55 PM Pawn (4, 5) is empty appended moves [(5, 5), (4, 5)]
12/09/2023 04:10:55 PM Pawn ReturnPossibleMove(): returning values: ([(5, 5), (4, 5)], [])
12/09/2023 04:10:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 5), (4, 5)], [])
12/09/2023 04:10:55 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.King object at 0x00000217CFE42E50> moves and attacks before: ([(5, 5), (4, 5)], [])
12/09/2023 04:10:55 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 04:10:55 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x00000217CFE42CD0> moves and attacks before: ([], [])
12/09/2023 04:10:55 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 04:10:55 PM Pawn Figure info: (6, 6, 'w', 'p')
12/09/2023 04:10:55 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 04:10:55 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x00000217CD6F5350> (5, 6)
12/09/2023 04:10:55 PM Pawn (5, 6) is empty appended moves [(5, 6)]
12/09/2023 04:10:55 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 04:10:55 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x00000217CD6F4E90> (4, 6)
12/09/2023 04:10:55 PM Pawn (4, 6) is empty appended moves [(5, 6), (4, 6)]
12/09/2023 04:10:55 PM Pawn ReturnPossibleMove(): returning values: ([(5, 6), (4, 6)], [])
12/09/2023 04:10:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 6), (4, 6)], [])
12/09/2023 04:10:55 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Knight object at 0x00000217CFE42ED0> moves and attacks before: ([(5, 6), (4, 6)], [])
12/09/2023 04:10:55 PM RenderPossibleMoves(): moves and attacks after: ([(5, 7), (5, 5)], [])
12/09/2023 04:10:55 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Rock object at 0x00000217CFE42F10> moves and attacks before: ([(5, 7), (5, 5)], [])
12/09/2023 04:10:55 PM RenderPossibleMoves(): moves and attacks after: ([], [])
12/09/2023 04:10:56 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x00000217CFE42D10> moves and attacks before: ([], [])
12/09/2023 04:10:56 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 04:10:56 PM Pawn Figure info: (6, 7, 'w', 'p')
12/09/2023 04:10:56 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 04:10:56 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x00000217CD6F53D0> (5, 7)
12/09/2023 04:10:56 PM Pawn (5, 7) is empty appended moves [(5, 7)]
12/09/2023 04:10:56 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 04:10:56 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x00000217CD6F4F10> (4, 7)
12/09/2023 04:10:56 PM Pawn (4, 7) is empty appended moves [(5, 7), (4, 7)]
12/09/2023 04:10:56 PM Pawn ReturnPossibleMove(): returning values: ([(5, 7), (4, 7)], [])
12/09/2023 04:10:56 PM RenderPossibleMoves(): moves and attacks after: ([(5, 7), (4, 7)], [])
12/09/2023 04:11:31 PM Launching Main.py
12/09/2023 04:11:33 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Knight object at 0x0000022ED0432A50> moves and attacks before: ([], [])
12/09/2023 04:11:33 PM RenderPossibleMoves(): moves and attacks after: ([(5, 7), (5, 5)], [])
12/09/2023 04:11:33 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000022ED04327D0> moves and attacks before: ([(5, 7), (5, 5)], [])
12/09/2023 04:11:33 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 04:11:33 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 04:11:33 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 04:11:33 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000022ECDCE4A50> (5, 4)
12/09/2023 04:11:33 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 04:11:33 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 04:11:33 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000022ECDCE4590> (4, 4)
12/09/2023 04:11:33 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 04:11:33 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 04:11:33 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 04:11:34 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000022ED0432890> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 04:11:34 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 04:11:34 PM Pawn Figure info: (6, 7, 'w', 'p')
12/09/2023 04:11:34 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 04:11:34 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000022ECDCE4C10> (5, 7)
12/09/2023 04:11:34 PM Pawn (5, 7) is empty appended moves [(5, 7)]
12/09/2023 04:11:34 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 04:11:34 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000022ECDCE4750> (4, 7)
12/09/2023 04:11:34 PM Pawn (4, 7) is empty appended moves [(5, 7), (4, 7)]
12/09/2023 04:11:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 7), (4, 7)], [])
12/09/2023 04:11:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 7), (4, 7)], [])
12/09/2023 04:11:34 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000022ED04327D0> moves and attacks before: ([(5, 7), (4, 7)], [])
12/09/2023 04:11:34 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 04:11:34 PM Pawn Figure info: (6, 4, 'w', 'p')
12/09/2023 04:11:34 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 04:11:34 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000022ECDCE4A50> (5, 4)
12/09/2023 04:11:34 PM Pawn (5, 4) is empty appended moves [(5, 4)]
12/09/2023 04:11:34 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 04:11:34 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000022ECDCE4590> (4, 4)
12/09/2023 04:11:34 PM Pawn (4, 4) is empty appended moves [(5, 4), (4, 4)]
12/09/2023 04:11:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 4), (4, 4)], [])
12/09/2023 04:11:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 4), (4, 4)], [])
12/09/2023 04:11:34 PM RenderPossibleMoves(): choosen figure: <classes.logic.piece.Pawn object at 0x0000022ED0432790> moves and attacks before: ([(5, 4), (4, 4)], [])
12/09/2023 04:11:34 PM Pawn attemping ReturnPossibleMoves() Method
12/09/2023 04:11:34 PM Pawn Figure info: (6, 3, 'w', 'p')
12/09/2023 04:11:34 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 04:11:34 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000022ECDCE49D0> (5, 3)
12/09/2023 04:11:34 PM Pawn (5, 3) is empty appended moves [(5, 3)]
12/09/2023 04:11:34 PM Pawn attempting check on board[x-a][y]: True
12/09/2023 04:11:34 PM Pawn attempting check on board[x-a][y]: <classes.logic.field.field object at 0x0000022ECDCE4510> (4, 3)
12/09/2023 04:11:34 PM Pawn (4, 3) is empty appended moves [(5, 3), (4, 3)]
12/09/2023 04:11:34 PM Pawn ReturnPossibleMove(): returning values: ([(5, 3), (4, 3)], [])
12/09/2023 04:11:34 PM RenderPossibleMoves(): moves and attacks after: ([(5, 3), (4, 3)], [])
12/09/2023 04:21:17 PM Launching Main.py
12/09/2023 04:21:26 PM Launching Main.py
12/09/2023 04:26:40 PM Launching Main.py
12/09/2023 04:36:33 PM Launching Main.py
12/09/2023 04:39:27 PM Launching Main.py
12/09/2023 04:39:42 PM Launching Main.py
12/09/2023 04:40:00 PM Launching Main.py
12/09/2023 04:40:56 PM Launching Main.py
12/09/2023 04:41:10 PM Launching Main.py
12/09/2023 04:52:16 PM Launching Main.py
12/09/2023 04:52:25 PM Launching Main.py
12/09/2023 04:52:52 PM Launching Main.py
12/09/2023 04:54:58 PM Launching Main.py
12/09/2023 04:57:03 PM Launching Main.py
12/09/2023 04:57:48 PM Launching Main.py
12/09/2023 04:58:22 PM Launching Main.py
12/09/2023 04:59:29 PM Launching Main.py
12/09/2023 04:59:45 PM Launching Main.py
12/09/2023 05:01:05 PM Launching Main.py
12/09/2023 05:05:06 PM Launching Main.py
12/09/2023 05:05:26 PM Launching Main.py
12/09/2023 05:05:57 PM Launching Main.py
12/09/2023 05:15:11 PM Launching Main.py
12/09/2023 05:15:27 PM Launching Main.py
12/09/2023 05:15:49 PM Launching Main.py
12/09/2023 05:17:43 PM Launching Main.py
12/09/2023 05:17:44 PM Launching Main.py
12/09/2023 05:17:45 PM Launching Main.py
12/09/2023 05:20:56 PM Launching Main.py
12/09/2023 05:23:00 PM Launching Main.py
12/09/2023 05:23:14 PM Launching Main.py
12/09/2023 05:23:25 PM Launching Main.py
12/30/2023 11:46:40 AM Launching Main.py
12/30/2023 11:48:12 AM Launching Main.py
12/30/2023 11:50:43 AM Launching Main.py
01/19/2024 05:16:03 PM Launching Main.py
01/19/2024 05:16:24 PM Launching Main.py
01/19/2024 05:18:50 PM Launching Main.py
01/19/2024 05:19:00 PM Launching Main.py
01/19/2024 05:19:13 PM Launching Main.py
01/19/2024 05:20:18 PM Launching Main.py
01/19/2024 05:22:10 PM Launching Main.py
01/19/2024 05:22:50 PM Launching Main.py
01/19/2024 05:23:07 PM Launching Main.py
01/19/2024 05:23:55 PM Launching Main.py
01/19/2024 05:24:24 PM Launching Main.py
01/19/2024 05:24:37 PM Launching Main.py
01/19/2024 05:25:10 PM Launching Main.py
01/19/2024 05:26:42 PM Launching Main.py
01/19/2024 05:26:48 PM Launching Main.py
01/19/2024 05:28:23 PM Launching Main.py
01/19/2024 05:29:32 PM Launching Main.py
01/19/2024 05:30:36 PM Launching Main.py
